{
  "address": "0xc4d1e0459E1e408F1bc6D1aCa86528321AC07695",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ChromaticLPLogicGelato",
          "name": "lpLogic",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "lpName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tag",
              "type": "string"
            }
          ],
          "internalType": "struct ChromaticLPStorage.LPMeta",
          "name": "lpMeta",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IChromaticMarket",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "utilizationTargetBPS",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "rebalanceBPS",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "rebalanceCheckingInterval",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "settleCheckingInterval",
              "type": "uint256"
            }
          ],
          "internalType": "struct ChromaticLPStorage.Config",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "int16[]",
          "name": "_feeRates",
          "type": "int16[]"
        },
        {
          "internalType": "uint16[]",
          "name": "distributionRates",
          "type": "uint16[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "automate",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "opsProxyFactory",
              "type": "address"
            }
          ],
          "internalType": "struct ChromaticLPStorageGelato.AutomateParam",
          "name": "automateParam",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRebalanceTaskExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadySwapRouterConfigured",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDistributionSum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRebalanceBPS",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "targetBPS",
          "type": "uint16"
        }
      ],
      "name": "InvalidUtilizationTarget",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAutomationCalled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotImplementedInLogicContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotKeeperCalled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMarket",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "distributionLength",
          "type": "uint256"
        }
      ],
      "name": "NotMatchDistributionLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAccessableByOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyBatchCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownLPAction",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oracleVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "settlementAdded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "AddLiquiditySettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "RebalanceLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "RebalanceSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oracleVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burningAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "witdrawnSettlementAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquiditySettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "CHROMATIC_LP_LOGIC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oracleVersion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "enum ChromaticLPAction",
              "name": "action",
              "type": "uint8"
            }
          ],
          "internalType": "struct ChromaticLPReceipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "addLiquidityBatchCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "addLiquidityCallback",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "automate",
      "outputs": [
        {
          "internalType": "contract IAutomate",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelRebalanceTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "int16[]",
          "name": "",
          "type": "int16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "claimLiquidityBatchCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "int16",
          "name": "",
          "type": "int16"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "claimLiquidityCallback",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clbTokenBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_clbTokenBalances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clbTokenIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createRebalanceTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dedicatedMsgSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRates",
      "outputs": [
        {
          "internalType": "int16[]",
          "name": "",
          "type": "int16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "getReceipt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oracleVersion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "enum ChromaticLPAction",
              "name": "action",
              "type": "uint8"
            }
          ],
          "internalType": "struct ChromaticLPReceipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getReceiptIdsOf",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "receiptIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "holdingClbValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "holdingValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingClbValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oracleVersion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "enum ChromaticLPAction",
              "name": "action",
              "type": "uint8"
            }
          ],
          "internalType": "struct ChromaticLPReceipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "removeLiquidityBatchCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "removeLiquidityCallback",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolveRebalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "resolveSettle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "settle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "settleTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClbValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utilization",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "currentUtility",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "valueInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "holding",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pending",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "holdingClb",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingClb",
              "type": "uint256"
            }
          ],
          "internalType": "struct ValueInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "int16[]",
          "name": "",
          "type": "int16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "withdrawLiquidityBatchCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "int16",
          "name": "",
          "type": "int16"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "withdrawLiquidityCallback",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa26239ecf309778f7a8e0dda6b7de14d599e0363a2de6ebba25fd5c60062da13",
  "receipt": {
    "to": null,
    "from": "0x3bD0496CA35b200FCc21CAc644208F7b11838EF6",
    "contractAddress": "0xc4d1e0459E1e408F1bc6D1aCa86528321AC07695",
    "transactionIndex": 1,
    "gasUsed": "5414560",
    "logsBloom": "0x001000001000600000000000000000000000000080000000000000000000d0002000000000000800040400000000000000000000000002000000008000000000000000000001000000000000000000000080000000200000080000000200000000000000028000000000000000000a00040000000000000000000000000200080000002480000000000000000000000100000200000000000000010000800000000400000000000080000000000200000000000000000000000000002000000200000000000000000000004000000010000040000000000000010000000120000800000000000000000400000000004000020000000000000000000000000000",
    "blockHash": "0x2b7f141ca7b757b53ac1be17dd0e17b33a28ef949b92485236303e49890a2515",
    "transactionHash": "0xa26239ecf309778f7a8e0dda6b7de14d599e0363a2de6ebba25fd5c60062da13",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 46984609,
        "transactionHash": "0xa26239ecf309778f7a8e0dda6b7de14d599e0363a2de6ebba25fd5c60062da13",
        "address": "0xa5f9b728ecEB9A1F6FCC89dcc2eFd810bA4Dec41",
        "topics": [
          "0x857791ec95701b6fff966bff1b5ce9a86107aeabaf6d2fdfd89993aa0f084e37",
          "0xa3a1fdeab4642bebf3dd555b9a4eb21b31283c0a848e9b4e83d9d0b3e93585cc",
          "0x0000000000000000000000000000000000000000000000000000000065264ee7",
          "0x0000000000000000000000000000000000000000000000000000000000000e10"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2b7f141ca7b757b53ac1be17dd0e17b33a28ef949b92485236303e49890a2515"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 46984609,
        "transactionHash": "0xa26239ecf309778f7a8e0dda6b7de14d599e0363a2de6ebba25fd5c60062da13",
        "address": "0xFCe3B8A17350F51e7E7a169f645d86D998C25111",
        "topics": [
          "0x5570d70a002632a7b0b3c9304cc89efb62d8da9eca0dbd7752c83b7379068296",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000926a40b485b8bebf8f739fca5c45f7cc683890a2"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x2b7f141ca7b757b53ac1be17dd0e17b33a28ef949b92485236303e49890a2515"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 46984609,
        "transactionHash": "0xa26239ecf309778f7a8e0dda6b7de14d599e0363a2de6ebba25fd5c60062da13",
        "address": "0xFCe3B8A17350F51e7E7a169f645d86D998C25111",
        "topics": [
          "0xdf435d422321da6b195902d70fc417c06a32f88379c20dd8f2a8da07088cec29",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c4d1e0459e1e408f1bc6d1aca86528321ac07695"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x2b7f141ca7b757b53ac1be17dd0e17b33a28ef949b92485236303e49890a2515"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 46984609,
        "transactionHash": "0xa26239ecf309778f7a8e0dda6b7de14d599e0363a2de6ebba25fd5c60062da13",
        "address": "0xC815dB16D4be6ddf2685C201937905aBf338F5D7",
        "topics": [
          "0x2d8895d948115783fa362a57339c4c179365fafeafdd7dca66364ae296f50b75",
          "0x000000000000000000000000a5f9b728eceb9a1f6fcc89dcc2efd810ba4dec41",
          "0x000000000000000000000000c4d1e0459e1e408f1bc6d1aca86528321ac07695",
          "0x000000000000000000000000fce3b8a17350f51e7e7a169f645d86d998c25111"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x2b7f141ca7b757b53ac1be17dd0e17b33a28ef949b92485236303e49890a2515"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 46984609,
        "transactionHash": "0xa26239ecf309778f7a8e0dda6b7de14d599e0363a2de6ebba25fd5c60062da13",
        "address": "0xa5f9b728ecEB9A1F6FCC89dcc2eFd810bA4Dec41",
        "topics": [
          "0x73f079427211e7b93db86024054de0b3c4a076a36cf0f86d2c4bf0d112eb7f1d",
          "0x000000000000000000000000c4d1e0459e1e408f1bc6d1aca86528321ac07695",
          "0x000000000000000000000000c4d1e0459e1e408f1bc6d1aca86528321ac07695",
          "0xa3a1fdeab4642bebf3dd555b9a4eb21b31283c0a848e9b4e83d9d0b3e93585cc"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000000000000000000000000000000000047d7c2a1c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000cc4d1e0459e1e408f1bc6d1aca86528321ac0769500000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000004a06104ae0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000065264ee70000000000000000000000000000000000000000000000000000000000000e100000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 4,
        "blockHash": "0x2b7f141ca7b757b53ac1be17dd0e17b33a28ef949b92485236303e49890a2515"
      }
    ],
    "blockNumber": 46984609,
    "cumulativeGasUsed": "5414560",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8aD2BF39F0CB690b9fBaaAee545B2567a0fF5e01",
    {
      "lpName": "normal",
      "tag": "N"
    },
    {
      "market": "0x8Afc5b9e09F8c6002d8400f5E71cd74649466f95",
      "utilizationTargetBPS": 5000,
      "rebalanceBPS": 500,
      "rebalanceCheckingInterval": 3600,
      "settleCheckingInterval": 60
    },
    [
      -4,
      -3,
      -2,
      -1,
      1,
      2,
      3,
      4
    ],
    [
      2000,
      1500,
      1000,
      500,
      500,
      1000,
      1500,
      2000
    ],
    {
      "automate": "0xa5f9b728ecEB9A1F6FCC89dcc2eFd810bA4Dec41",
      "opsProxyFactory": "0x0000000000000000000000000000000000000000"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "7c62a9a78955dd40ad4fd41dae0045a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ChromaticLPLogicGelato\",\"name\":\"lpLogic\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"lpName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"}],\"internalType\":\"struct ChromaticLPStorage.LPMeta\",\"name\":\"lpMeta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IChromaticMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"utilizationTargetBPS\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rebalanceBPS\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceCheckingInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settleCheckingInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct ChromaticLPStorage.Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"int16[]\",\"name\":\"_feeRates\",\"type\":\"int16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"distributionRates\",\"type\":\"uint16[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"automate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"opsProxyFactory\",\"type\":\"address\"}],\"internalType\":\"struct ChromaticLPStorageGelato.AutomateParam\",\"name\":\"automateParam\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRebalanceTaskExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadySwapRouterConfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDistributionSum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRebalanceBPS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetBPS\",\"type\":\"uint16\"}],\"name\":\"InvalidUtilizationTarget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAutomationCalled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotImplementedInLogicContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotKeeperCalled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMarket\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionLength\",\"type\":\"uint256\"}],\"name\":\"NotMatchDistributionLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAccessableByOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyBatchCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownLPAction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquiditySettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"RebalanceLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"RebalanceSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burningAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"witdrawnSettlementAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquiditySettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CHROMATIC_LP_LOGIC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"enum ChromaticLPAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"internalType\":\"struct ChromaticLPReceipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"addLiquidityBatchCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"addLiquidityCallback\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"automate\",\"outputs\":[{\"internalType\":\"contract IAutomate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelRebalanceTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"int16[]\",\"name\":\"\",\"type\":\"int16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"claimLiquidityBatchCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"int16\",\"name\":\"\",\"type\":\"int16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"claimLiquidityCallback\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clbTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_clbTokenBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clbTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createRebalanceTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dedicatedMsgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRates\",\"outputs\":[{\"internalType\":\"int16[]\",\"name\":\"\",\"type\":\"int16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"enum ChromaticLPAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"internalType\":\"struct ChromaticLPReceipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getReceiptIdsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"receiptIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdingClbValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdingValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingClbValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"enum ChromaticLPAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"internalType\":\"struct ChromaticLPReceipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"removeLiquidityBatchCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"removeLiquidityCallback\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolveRebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"resolveSettle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settleTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClbValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilization\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"currentUtility\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingClb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingClb\",\"type\":\"uint256\"}],\"internalType\":\"struct ValueInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"int16[]\",\"name\":\"\",\"type\":\"int16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"withdrawLiquidityBatchCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"int16\",\"name\":\"\",\"type\":\"int16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"withdrawLiquidityCallback\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"addLiquidityBatchCallback(address,address,bytes)\":{\"details\":\"not implemented\",\"params\":{\"data\":\"Additional data associated with the liquidity addition.\",\"settlementToken\":\"The address of the settlement token used for adding liquidity.\",\"vault\":\"The address of the vault where the liquidity is added.\"}},\"addLiquidityCallback(address,address,bytes)\":{\"details\":\"not implemented\",\"params\":{\"data\":\"Additional data associated with the liquidity addition.\",\"settlementToken\":\"The address of the settlement token used for adding liquidity.\",\"vault\":\"The address of the vault where the liquidity is added.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"claimLiquidityBatchCallback(uint256[],int16[],uint256[],uint256[],bytes)\":{\"details\":\"not implemented\",\"params\":{\"data\":\"Additional data associated with the liquidity claim.\",\"depositedAmounts\":\"The array of deposited liquidity amounts for each receipt in the batch.\",\"feeRates\":\"The array of trading fee rates associated with each claim in the batch.\",\"mintedCLBTokenAmounts\":\"The array of CLB token amounts minted for each receipt in the batch.\",\"receiptIds\":\"The array of the liquidity receipt IDs.\"}},\"claimLiquidityCallback(uint256,int16,uint256,uint256,bytes)\":{\"details\":\"not implemented\",\"params\":{\"data\":\"Additional data associated with the liquidity claim.\",\"depositedAmount\":\"The amount of liquidity deposited.\",\"feeRate\":\"The trading fee rate associated with the liquidity claim.\",\"mintedCLBTokenAmount\":\"The amount of CLB tokens minted as liquidity.\",\"receiptId\":\"The ID of the liquidity claim receipt.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"rebalance()\":{\"details\":\"called by keeper only\"},\"removeLiquidityBatchCallback(address,uint256[],bytes)\":{\"details\":\"not implemented\",\"params\":{\"clbToken\":\"The address of the Chromatic liquidity token.\",\"clbTokenIds\":\"The array of the Chromatic liquidity token IDs to be removed.\",\"data\":\"Additional data associated with the liquidity removal.\"}},\"removeLiquidityCallback(address,uint256,bytes)\":{\"details\":\"not implemented\",\"params\":{\"clbToken\":\"The address of the Chromatic liquidity token.\",\"clbTokenId\":\"The ID of the Chromatic liquidity token to be removed.\",\"data\":\"Additional data associated with the liquidity removal.\"}},\"settleTask(uint256)\":{\"details\":\"called by Keeper only\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"withdrawLiquidityBatchCallback(uint256[],int16[],uint256[],uint256[],bytes)\":{\"details\":\"not implemented\",\"params\":{\"burnedCLBTokenAmounts\":\"The array of CLB token amounts burned for each receipt in the batch.\",\"data\":\"Additional data associated with the liquidity withdrawal.\",\"feeRates\":\"The array of trading fee rates associated with each withdrawal in the batch.\",\"receiptIds\":\"The array of the liquidity receipt IDs.\",\"withdrawnAmounts\":\"The array of withdrawn liquidity amounts for each receipt in the batch.\"}},\"withdrawLiquidityCallback(uint256,int16,uint256,uint256,bytes)\":{\"details\":\"not implemented\",\"params\":{\"burnedCLBTokenAmount\":\"The amount of CLB tokens burned during the withdrawal.\",\"data\":\"Additional data associated with the liquidity withdrawal.\",\"feeRate\":\"The trading fee rate associated with the liquidity withdrawal.\",\"receiptId\":\"The ID of the liquidity withdrawal receipt.\",\"withdrawnAmount\":\"The amount of liquidity that has been withdrawn.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidityBatchCallback(address,address,bytes)\":{\"notice\":\"Handles the callback after adding liquidity to the Chromatic protocol.\"},\"addLiquidityCallback(address,address,bytes)\":{\"notice\":\"Handles the callback after adding liquidity to the Chromatic protocol.\"},\"claimLiquidityBatchCallback(uint256[],int16[],uint256[],uint256[],bytes)\":{\"notice\":\"Handles the callback after claiming liquidity from the Chromatic protocol.\"},\"claimLiquidityCallback(uint256,int16,uint256,uint256,bytes)\":{\"notice\":\"Handles the callback after claiming liquidity from the Chromatic protocol.\"},\"removeLiquidityBatchCallback(address,uint256[],bytes)\":{\"notice\":\"Handles the callback after removing liquidity from the Chromatic protocol.\"},\"removeLiquidityCallback(address,uint256,bytes)\":{\"notice\":\"Handles the callback after removing liquidity from the Chromatic protocol.\"},\"withdrawLiquidityBatchCallback(uint256[],int16[],uint256[],uint256[],bytes)\":{\"notice\":\"Handles the callback after withdrawing liquidity from the Chromatic protocol.\"},\"withdrawLiquidityCallback(uint256,int16,uint256,uint256,bytes)\":{\"notice\":\"Handles the callback after withdrawing liquidity from the Chromatic protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lp/contracts/gelato/ChromaticLPGelato.sol\":\"ChromaticLPGelato\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":30000},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":~/=contracts/\"]},\"sources\":{\"@chromatic-protocol/contracts/core/automation/gelato/AutomateReady.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IAutomate, IOpsProxyFactory, ITaskTreasuryUpgradable, ModuleData} from \\\"@chromatic-protocol/contracts/core/automation/gelato/Types.sol\\\";\\n\\n/**\\n * @dev Inherit this contract to allow your smart contract to\\n * - Make synchronous fee payments.\\n * - Have call restrictions for functions to be automated.\\n */\\n// solhint-disable private-vars-leading-underscore\\nabstract contract AutomateReady {\\n    IAutomate public immutable automate;\\n    address public immutable dedicatedMsgSender;\\n    address private immutable _gelato;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address private constant OPS_PROXY_FACTORY = 0xC815dB16D4be6ddf2685C201937905aBf338F5D7;\\n\\n    /**\\n     * @dev\\n     * Only tasks created by _taskCreator defined in constructor can call\\n     * the functions with this modifier.\\n     */\\n    modifier onlyDedicatedMsgSender() {\\n        require(msg.sender == dedicatedMsgSender, \\\"Only dedicated msg.sender\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev\\n     * _taskCreator is the address which will create tasks for this contract.\\n     */\\n    constructor(address _automate, address _taskCreator, address opsProxyFactory) {\\n        automate = IAutomate(_automate);\\n        _gelato = IAutomate(_automate).gelato();\\n        if (opsProxyFactory == address(0)) opsProxyFactory = OPS_PROXY_FACTORY;\\n        (dedicatedMsgSender, ) = IOpsProxyFactory(opsProxyFactory).getProxyOf(_taskCreator);\\n    }\\n\\n    /**\\n     * @dev\\n     * Transfers fee to gelato for synchronous fee payments.\\n     *\\n     * _fee & _feeToken should be queried from IAutomate.getFeeDetails()\\n     */\\n    function _transfer(uint256 _fee, address _feeToken) internal {\\n        if (_feeToken == ETH) {\\n            (bool success, ) = _gelato.call{value: _fee}(\\\"\\\");\\n            require(success, \\\"_transfer: ETH transfer failed\\\");\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(_feeToken), _gelato, _fee);\\n        }\\n    }\\n\\n    function _getFeeDetails() internal view returns (uint256 fee, address feeToken) {\\n        (fee, feeToken) = automate.getFeeDetails();\\n    }\\n}\\n\",\"keccak256\":\"0x793bae5b43035efda3376d4a0f759fb68716c8d62eb1a4b22086e62d9a579072\",\"license\":\"UNLICENSED\"},\"@chromatic-protocol/contracts/core/automation/gelato/Types.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nenum Module {\\n    RESOLVER,\\n    TIME,\\n    PROXY,\\n    SINGLE_EXEC\\n}\\n\\nstruct ModuleData {\\n    Module[] modules;\\n    bytes[] args;\\n}\\n\\ninterface IAutomate {\\n    function createTask(\\n        address execAddress,\\n        bytes calldata execDataOrSelector,\\n        ModuleData calldata moduleData,\\n        address feeToken\\n    ) external returns (bytes32 taskId);\\n\\n    function cancelTask(bytes32 taskId) external;\\n\\n    function getFeeDetails() external view returns (uint256, address);\\n\\n    function gelato() external view returns (address payable);\\n\\n    function taskTreasury() external view returns (ITaskTreasuryUpgradable);\\n}\\n\\ninterface ITaskTreasuryUpgradable {\\n    function depositFunds(address receiver, address token, uint256 amount) external payable;\\n\\n    function withdrawFunds(address payable receiver, address token, uint256 amount) external;\\n}\\n\\ninterface IOpsProxyFactory {\\n    function getProxyOf(address account) external view returns (address, bool);\\n}\\n\",\"keccak256\":\"0x119933c31bfd5801eed35cd7f24a56670ce1dba9ab72caac8471cfd82cd67ec3\",\"license\":\"UNLICENSED\"},\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\\\";\\n\\n/**\\n * @title ICLBToken\\n * @dev Interface for CLBToken contract, which represents Liquidity Bin tokens.\\n */\\ninterface ICLBToken is IERC1155, IERC1155MetadataURI {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     * @param id The token ID for which to retrieve the total supply.\\n     * @return The total supply of tokens for the given token ID.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Total amounts of tokens in with the given ids.\\n     * @param ids The token IDs for which to retrieve the total supply.\\n     * @return The total supples of tokens for the given token IDs.\\n     */\\n    function totalSupplyBatch(uint256[] memory ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Mints new tokens and assigns them to the specified address.\\n     * @param to The address to which the minted tokens will be assigned.\\n     * @param id The token ID to mint.\\n     * @param amount The amount of tokens to mint.\\n     * @param data Additional data to pass during the minting process.\\n     */\\n    function mint(address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Burns tokens from a specified address.\\n     * @param from The address from which to burn tokens.\\n     * @param id The token ID to burn.\\n     * @param amount The amount of tokens to burn.\\n     */\\n    function burn(address from, uint256 id, uint256 amount) external;\\n\\n    /**\\n     * @dev Retrieves the number of decimals used for token amounts.\\n     * @return The number of decimals used for token amounts.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Retrieves the name of a token.\\n     * @param id The token ID for which to retrieve the name.\\n     * @return The name of the token.\\n     */\\n    function name(uint256 id) external view returns (string memory);\\n\\n    /**\\n     * @dev Retrieves the description of a token.\\n     * @param id The token ID for which to retrieve the description.\\n     * @return The description of the token.\\n     */\\n    function description(uint256 id) external view returns (string memory);\\n\\n    /**\\n     * @dev Retrieves the image URI of a token.\\n     * @param id The token ID for which to retrieve the image URI.\\n     * @return The image URI of the token.\\n     */\\n    function image(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x104e532ccc23403fdf1b340c292d208c3837f9abd29eda787eec5b6ac1438488\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IMarketTrade} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketTrade.sol\\\";\\nimport {IMarketLiquidity} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketLiquidity.sol\\\";\\nimport {IMarketLens} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketLens.sol\\\";\\nimport {IMarketState} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketState.sol\\\";\\nimport {IMarketLiquidate} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketLiquidate.sol\\\";\\nimport {IMarketSettle} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketSettle.sol\\\";\\n\\n/**\\n * @title IChromaticMarket\\n * @dev Interface for the Chromatic Market contract, which combines trade and liquidity functionalities.\\n */\\ninterface IChromaticMarket is\\n    IMarketTrade,\\n    IMarketLiquidity,\\n    IMarketLens,\\n    IMarketState,\\n    IMarketLiquidate,\\n    IMarketSettle\\n{\\n\\n}\\n\",\"keccak256\":\"0x1f4180fc5c9ce9aa38b54a38fb51ed4acdc3f9f6be8021b46f1b183b12934f5e\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IInterestCalculator} from \\\"@chromatic-protocol/contracts/core/interfaces/IInterestCalculator.sol\\\";\\nimport {IMarketDeployer} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/IMarketDeployer.sol\\\";\\nimport {ISettlementTokenRegistry} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/ISettlementTokenRegistry.sol\\\";\\nimport {IOracleProviderRegistry} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/IOracleProviderRegistry.sol\\\";\\n\\n/**\\n * @title IChromaticMarketFactory\\n * @dev Interface for the Chromatic Market Factory contract.\\n */\\ninterface IChromaticMarketFactory is\\n    IMarketDeployer,\\n    IOracleProviderRegistry,\\n    ISettlementTokenRegistry,\\n    IInterestCalculator\\n{\\n    /**\\n     * @notice Emitted when the DAO address is updated.\\n     * @param dao The new DAO address.\\n     */\\n    event UpdateDao(address indexed dao);\\n\\n    /**\\n     * @notice Emitted when the DAO treasury address is updated.\\n     * @param treasury The new DAO treasury address.\\n     */\\n    event UpdateTreasury(address indexed treasury);\\n\\n    /**\\n     * @notice Emitted when the liquidator address is set.\\n     * @param liquidator The liquidator address.\\n     */\\n    event SetLiquidator(address indexed liquidator);\\n\\n    /**\\n     * @notice Emitted when the vault address is set.\\n     * @param vault The vault address.\\n     */\\n    event SetVault(address indexed vault);\\n\\n    /**\\n     * @notice Emitted when the keeper fee payer address is set.\\n     * @param keeperFeePayer The keeper fee payer address.\\n     */\\n    event SetKeeperFeePayer(address indexed keeperFeePayer);\\n\\n    /**\\n     * @notice Emitted when the market settlement task address is set.\\n     * @param marketSettlement The market settlement task address.\\n     */\\n    event SetMarketSettlement(address indexed marketSettlement);\\n\\n    /**\\n     * @notice Emitted when a market is created.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     * @param market The address of the created market.\\n     */\\n    event MarketCreated(\\n        address indexed oracleProvider,\\n        address indexed settlementToken,\\n        address indexed market\\n    );\\n\\n    /**\\n     * @notice Returns the address of the DAO.\\n     * @return The address of the DAO.\\n     */\\n    function dao() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the DAO treasury.\\n     * @return The address of the DAO treasury.\\n     */\\n    function treasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the liquidator.\\n     * @return The address of the liquidator.\\n     */\\n    function liquidator() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the vault.\\n     * @return The address of the vault.\\n     */\\n    function vault() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the keeper fee payer.\\n     * @return The address of the keeper fee payer.\\n     */\\n    function keeperFeePayer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the market settlement task.\\n     * @return The address of the market settlement task.\\n     */\\n    function marketSettlement() external view returns (address);\\n\\n    /**\\n     * @notice Updates the DAO address.\\n     * @param _dao The new DAO address.\\n     */\\n    function updateDao(address _dao) external;\\n\\n    /**\\n     * @notice Updates the DAO treasury address.\\n     * @param _treasury The new DAO treasury address.\\n     */\\n    function updateTreasury(address _treasury) external;\\n\\n    /**\\n     * @notice Sets the liquidator address.\\n     * @param _liquidator The liquidator address.\\n     */\\n    function setLiquidator(address _liquidator) external;\\n\\n    /**\\n     * @notice Sets the vault address.\\n     * @param _vault The vault address.\\n     */\\n    function setVault(address _vault) external;\\n\\n    /**\\n     * @notice Sets the keeper fee payer address.\\n     * @param _keeperFeePayer The keeper fee payer address.\\n     */\\n    function setKeeperFeePayer(address _keeperFeePayer) external;\\n\\n    /**\\n     * @notice Sets the market settlement task address.\\n     * @param _marketSettlement The market settlement task address.\\n     */\\n    function setMarketSettlement(address _marketSettlement) external;\\n\\n    /**\\n     * @notice Returns an array of all market addresses.\\n     * @return markets An array of all market addresses.\\n     */\\n    function getMarkets() external view returns (address[] memory markets);\\n\\n    /**\\n     * @notice Returns an array of market addresses associated with a settlement token.\\n     * @param settlementToken The address of the settlement token.\\n     * @return An array of market addresses.\\n     */\\n    function getMarketsBySettlmentToken(\\n        address settlementToken\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of a market associated with an oracle provider and settlement token.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     * @return The address of the market.\\n     */\\n    function getMarket(\\n        address oracleProvider,\\n        address settlementToken\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Creates a new market associated with an oracle provider and settlement token.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     */\\n    function createMarket(address oracleProvider, address settlementToken) external;\\n\\n    /**\\n     * @notice Checks if a market is registered.\\n     * @param market The address of the market.\\n     * @return True if the market is registered, false otherwise.\\n     */\\n    function isRegisteredMarket(address market) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9e281572c161bee4179d8e1cd7703d9278c319695491b7bf5f71701d1351f78f\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/IChromaticVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ILendingPool} from \\\"@chromatic-protocol/contracts/core/interfaces/vault/ILendingPool.sol\\\";\\nimport {IVault} from \\\"@chromatic-protocol/contracts/core/interfaces/vault/IVault.sol\\\";\\n\\n/**\\n * @title IChromaticVault\\n * @notice Interface for the Chromatic Vault contract.\\n */\\ninterface IChromaticVault is IVault, ILendingPool {\\n    /**\\n     * @dev Emitted when market earning is accumulated.\\n     * @param market The address of the market.\\n     * @param earning The amount of earning accumulated.\\n     */\\n    event MarketEarningAccumulated(address indexed market, uint256 earning);\\n\\n    /**\\n     * @dev Emitted when maker earning is distributed.\\n     * @param token The address of the settlement token.\\n     * @param earning The amount of earning distributed.\\n     * @param usedKeeperFee The amount of keeper fee used.\\n     */\\n    event MakerEarningDistributed(\\n        address indexed token,\\n        uint256 indexed earning,\\n        uint256 indexed usedKeeperFee\\n    );\\n\\n    /**\\n     * @dev Emitted when market earning is distributed.\\n     * @param market The address of the market.\\n     * @param earning The amount of earning distributed.\\n     * @param usedKeeperFee The amount of keeper fee used.\\n     * @param marketBalance The balance of the market.\\n     */\\n    event MarketEarningDistributed(\\n        address indexed market,\\n        uint256 indexed earning,\\n        uint256 indexed usedKeeperFee,\\n        uint256 marketBalance\\n    );\\n\\n    function pendingMakerEarnings(address token) external view returns (uint256);\\n\\n    function pendingMarketEarnings(address market) external view returns (uint256);\\n\\n    /**\\n     * @notice Creates a maker earning distribution task for a token.\\n     * @param token The address of the settlement token.\\n     */\\n    function createMakerEarningDistributionTask(address token) external;\\n\\n    /**\\n     * @notice Cancels a maker earning distribution task for a token.\\n     * @param token The address of the settlement token.\\n     */\\n    function cancelMakerEarningDistributionTask(address token) external;\\n\\n    /**\\n     * @notice Distributes the maker earning for a token to the each markets.\\n     * @param token The address of the settlement token.\\n     * @param fee The keeper fee amount.\\n     * @param keeper The keeper address to receive fee.\\n     */\\n    function distributeMakerEarning(address token, uint256 fee, address keeper) external;\\n\\n    /**\\n     * @notice Creates a market earning distribution task for a market.\\n     * @param market The address of the market.\\n     */\\n    function createMarketEarningDistributionTask(address market) external;\\n\\n    /**\\n     * @notice Cancels a market earning distribution task for a market.\\n     * @param market The address of the market.\\n     */\\n    function cancelMarketEarningDistributionTask(address market) external;\\n\\n    /**\\n     * @notice Distributes the market earning for a market to the each bins.\\n     * @param market The address of the market.\\n     * @param fee The fee amount.\\n     * @param keeper The keeper address to receive fee.\\n     */\\n    function distributeMarketEarning(address market, uint256 fee, address keeper) external;\\n}\\n\",\"keccak256\":\"0x8521226c86ff197092c32d2e693734c8ff6f2d0c1f9cbb1e8cbc70b6654102f0\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/IInterestCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IInterestCalculator\\n * @dev Interface for an interest calculator contract.\\n */\\ninterface IInterestCalculator {\\n    /**\\n     * @notice Calculates the interest accrued for a given token and amount within a specified time range.\\n     * @param token The address of the token.\\n     * @param amount The amount of the token.\\n     * @param from The starting timestamp (inclusive) of the time range.\\n     * @param to The ending timestamp (exclusive) of the time range.\\n     * @return The accrued interest for the specified token and amount within the given time range.\\n     */\\n    function calculateInterest(\\n        address token,\\n        uint256 amount,\\n        uint256 from, // timestamp (inclusive)\\n        uint256 to // timestamp (exclusive)\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf70b44ce6eb1422abed056169dc5db83ddbb2ee34d7751192f00e6cb3dc1ccbe\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/IKeeperFeePayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IKeeperFeePayer\\n * @dev Interface for a contract that pays keeper fees.\\n */\\ninterface IKeeperFeePayer {\\n    event SetRouter(address indexed);\\n\\n    /**\\n     * @notice Approves or revokes approval to the Uniswap router for a given token.\\n     * @param token The address of the token.\\n     * @param approve A boolean indicating whether to approve or revoke approval.\\n     */\\n    function approveToRouter(address token, bool approve) external;\\n\\n    /**\\n     * @notice Pays the keeper fee using Uniswap swaps.\\n     * @param tokenIn The address of the token being swapped.\\n     * @param amountOut The desired amount of output tokens.\\n     * @param keeperAddress The address of the keeper to receive the fee.\\n     * @return amountIn The actual amount of input tokens used for the swap.\\n     */\\n    function payKeeperFee(\\n        address tokenIn,\\n        uint256 amountOut,\\n        address keeperAddress\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xffaab8adb0713fa436e217be2aa016cf79b55ec2868db06656b150217151a66e\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/ILiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title ILiquidator\\n * @dev Interface for the Chromatic Liquidator contract.\\n */\\ninterface ILiquidator {\\n    /**\\n     * @notice Creates a liquidation task for a given position.\\n     * @param positionId The ID of the position to be liquidated.\\n     */\\n    function createLiquidationTask(uint256 positionId) external;\\n\\n    /**\\n     * @notice Cancels a liquidation task for a given position.\\n     * @param positionId The ID of the position for which to cancel the liquidation task.\\n     */\\n    function cancelLiquidationTask(uint256 positionId) external;\\n\\n    /**\\n     * @notice Resolves the liquidation of a position.\\n     * @dev This function is called by the automation system.\\n     * @param market The address of the market contract.\\n     * @param positionId The ID of the position to be liquidated.\\n     * @return canExec Whether the liquidation can be executed.\\n     * @return execPayload The encoded function call to execute the liquidation.\\n     */\\n    function resolveLiquidation(\\n        address market,\\n        uint256 positionId\\n    ) external view returns (bool canExec, bytes memory execPayload);\\n\\n    /**\\n     * @notice Liquidates a position in a market.\\n     * @param market The address of the market contract.\\n     * @param positionId The ID of the position to be liquidated.\\n     */\\n    function liquidate(address market, uint256 positionId) external;\\n\\n    /**\\n     * @notice Creates a claim position task for a given position.\\n     * @param positionId The ID of the position to be claimed.\\n     */\\n    function createClaimPositionTask(uint256 positionId) external;\\n\\n    /**\\n     * @notice Cancels a claim position task for a given position.\\n     * @param positionId The ID of the position for which to cancel the claim position task.\\n     */\\n    function cancelClaimPositionTask(uint256 positionId) external;\\n\\n    /**\\n     * @notice Resolves the claim of a position.\\n     * @dev This function is called by the automation system.\\n     * @param market The address of the market contract.\\n     * @param positionId The ID of the position to be claimed.\\n     * @return canExec Whether the claim can be executed.\\n     * @return execPayload The encoded function call to execute the claim.\\n     */\\n    function resolveClaimPosition(\\n        address market,\\n        uint256 positionId\\n    ) external view returns (bool canExec, bytes memory execPayload);\\n\\n    /**\\n     * @notice Claims a position in a market.\\n     * @param market The address of the market contract.\\n     * @param positionId The ID of the position to be claimed.\\n     */\\n    function claimPosition(address market, uint256 positionId) external;\\n\\n    function getLiquidationTaskId(\\n        address market,\\n        uint256 positionId\\n    ) external view returns (bytes32);\\n\\n    function getClaimPositionTaskId(\\n        address market,\\n        uint256 positionId\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1c432965ed93d482fddf0f0f69dd3ffa275212a202e40cd1f9b51cd10d50b2c2\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/callback/IChromaticLiquidityCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IChromaticLiquidityCallback\\n * @dev Interface for a contract that handles liquidity callbacks in the Chromatic protocol.\\n *      Liquidity callbacks are used to handle various operations related to liquidity management.\\n *      This interface defines the function signatures for different types of liquidity callbacks.\\n */\\ninterface IChromaticLiquidityCallback {\\n    /**\\n     * @notice Handles the callback after adding liquidity to the Chromatic protocol.\\n     * @param settlementToken The address of the settlement token used for adding liquidity.\\n     * @param vault The address of the vault where the liquidity is added.\\n     * @param data Additional data associated with the liquidity addition.\\n     */\\n    function addLiquidityCallback(\\n        address settlementToken,\\n        address vault,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after adding liquidity to the Chromatic protocol.\\n     * @param settlementToken The address of the settlement token used for adding liquidity.\\n     * @param vault The address of the vault where the liquidity is added.\\n     * @param data Additional data associated with the liquidity addition.\\n     */\\n    function addLiquidityBatchCallback(\\n        address settlementToken,\\n        address vault,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after claiming liquidity from the Chromatic protocol.\\n     * @param receiptId The ID of the liquidity claim receipt.\\n     * @param feeRate The trading fee rate associated with the liquidity claim.\\n     * @param depositedAmount The amount of liquidity deposited.\\n     * @param mintedCLBTokenAmount The amount of CLB tokens minted as liquidity.\\n     * @param data Additional data associated with the liquidity claim.\\n     */\\n    function claimLiquidityCallback(\\n        uint256 receiptId,\\n        int16 feeRate,\\n        uint256 depositedAmount,\\n        uint256 mintedCLBTokenAmount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after claiming liquidity from the Chromatic protocol.\\n     * @param receiptIds The array of the liquidity receipt IDs.\\n     * @param feeRates The array of trading fee rates associated with each claim in the batch.\\n     * @param depositedAmounts The array of deposited liquidity amounts for each receipt in the batch.\\n     * @param mintedCLBTokenAmounts The array of CLB token amounts minted for each receipt in the batch.\\n     * @param data Additional data associated with the liquidity claim.\\n     */\\n    function claimLiquidityBatchCallback(\\n        uint256[] calldata receiptIds,\\n        int16[] calldata feeRates,\\n        uint256[] calldata depositedAmounts,\\n        uint256[] calldata mintedCLBTokenAmounts,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after removing liquidity from the Chromatic protocol.\\n     * @param clbToken The address of the Chromatic liquidity token.\\n     * @param clbTokenId The ID of the Chromatic liquidity token to be removed.\\n     * @param data Additional data associated with the liquidity removal.\\n     */\\n    function removeLiquidityCallback(\\n        address clbToken,\\n        uint256 clbTokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after removing liquidity from the Chromatic protocol.\\n     * @param clbToken The address of the Chromatic liquidity token.\\n     * @param clbTokenIds The array of the Chromatic liquidity token IDs to be removed.\\n     * @param data Additional data associated with the liquidity removal.\\n     */\\n    function removeLiquidityBatchCallback(\\n        address clbToken,\\n        uint256[] calldata clbTokenIds,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after withdrawing liquidity from the Chromatic protocol.\\n     * @param receiptId The ID of the liquidity withdrawal receipt.\\n     * @param feeRate The trading fee rate associated with the liquidity withdrawal.\\n     * @param withdrawnAmount The amount of liquidity that has been withdrawn.\\n     * @param burnedCLBTokenAmount The amount of CLB tokens burned during the withdrawal.\\n     * @param data Additional data associated with the liquidity withdrawal.\\n     */\\n    function withdrawLiquidityCallback(\\n        uint256 receiptId,\\n        int16 feeRate,\\n        uint256 withdrawnAmount,\\n        uint256 burnedCLBTokenAmount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after withdrawing liquidity from the Chromatic protocol.\\n     * @param receiptIds The array of the liquidity receipt IDs.\\n     * @param feeRates The array of trading fee rates associated with each withdrawal in the batch.\\n     * @param withdrawnAmounts The array of withdrawn liquidity amounts for each receipt in the batch.\\n     * @param burnedCLBTokenAmounts The array of CLB token amounts burned for each receipt in the batch.\\n     * @param data Additional data associated with the liquidity withdrawal.\\n     */\\n    function withdrawLiquidityBatchCallback(\\n        uint256[] calldata receiptIds,\\n        int16[] calldata feeRates,\\n        uint256[] calldata withdrawnAmounts,\\n        uint256[] calldata burnedCLBTokenAmounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x723edd42199cb728b843bcfe067d5ca0e23f10008debc648dc99b7c06f253b1b\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/factory/IMarketDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title An interface for a contract that is capable of deploying Chromatic markets\\n * @notice A contract that constructs a market must implement this to pass arguments to the market\\n * @dev This is used to avoid having constructor arguments in the market contract, which results in the init code hash\\n * of the market being constant allowing the CREATE2 address of the market to be cheaply computed on-chain\\n */\\ninterface IMarketDeployer {\\n    /**\\n     * @notice Get the parameters to be used in constructing the market, set transiently during market creation.\\n     * @dev Called by the market constructor to fetch the parameters of the market\\n     * Returns underlyingAsset The underlying asset of the market\\n     * Returns settlementToken The settlement token of the market\\n     * Returns vPoolCapacity Capacity of virtual future pool\\n     * Returns vPoolA Amplification coefficient of virtual future pool, precise value\\n     */\\n    function parameters() external view returns (address oracleProvider, address settlementToken);\\n}\\n\",\"keccak256\":\"0x6ce7c90b2b1a8ff9b721644a33ab4585d84fdacf789af3ea6169f49dc033fd77\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/factory/IOracleProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IOracleProviderRegistry\\n * @dev Interface for the Oracle Provider Registry contract.\\n */\\ninterface IOracleProviderRegistry {\\n    \\n    /**\\n     * @dev The OracleProviderProperties struct represents properties of the oracle provider.\\n     * @param minTakeProfitBPS The minimum take-profit basis points.\\n     * @param maxTakeProfitBPS The maximum take-profit basis points.\\n     * @param leverageLevel The leverage level of the oracle provider.\\n     */\\n    struct OracleProviderProperties {\\n        uint32 minTakeProfitBPS;\\n        uint32 maxTakeProfitBPS;\\n        uint8 leverageLevel;\\n    }\\n\\n    /**\\n     * @dev Emitted when a new oracle provider is registered.\\n     * @param oracleProvider The address of the registered oracle provider.\\n     * @param properties The properties of the registered oracle provider.\\n     */\\n    event OracleProviderRegistered(\\n        address indexed oracleProvider,\\n        OracleProviderProperties properties\\n    );\\n\\n    /**\\n     * @dev Emitted when an oracle provider is unregistered.\\n     * @param oracleProvider The address of the unregistered oracle provider.\\n     */\\n    event OracleProviderUnregistered(address indexed oracleProvider);\\n\\n    /**\\n     * @dev Emitted when the take-profit basis points range of an oracle provider is updated.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param minTakeProfitBPS The new minimum take-profit basis points.\\n     * @param maxTakeProfitBPS The new maximum take-profit basis points.\\n     */\\n    event UpdateTakeProfitBPSRange(\\n        address indexed oracleProvider,\\n        uint32 indexed minTakeProfitBPS,\\n        uint32 indexed maxTakeProfitBPS\\n    );\\n\\n    /**\\n     * @dev Emitted when the level of an oracle provider is set.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param level The new level set for the oracle provider.\\n     */\\n    event UpdateLeverageLevel(address indexed oracleProvider, uint8 indexed level);\\n\\n    /**\\n     * @notice Registers an oracle provider.\\n     * @param oracleProvider The address of the oracle provider to register.\\n     * @param properties The properties of the oracle provider.\\n     */\\n    function registerOracleProvider(\\n        address oracleProvider,\\n        OracleProviderProperties memory properties\\n    ) external;\\n\\n    /**\\n     * @notice Unregisters an oracle provider.\\n     * @param oracleProvider The address of the oracle provider to unregister.\\n     */\\n    function unregisterOracleProvider(address oracleProvider) external;\\n\\n    /**\\n     * @notice Gets the registered oracle providers.\\n     * @return An array of registered oracle provider addresses.\\n     */\\n    function registeredOracleProviders() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Checks if an oracle provider is registered.\\n     * @param oracleProvider The address of the oracle provider to check.\\n     * @return A boolean indicating if the oracle provider is registered.\\n     */\\n    function isRegisteredOracleProvider(address oracleProvider) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the properties of an oracle provider.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @return The properties of the oracle provider.\\n     */\\n    function getOracleProviderProperties(\\n        address oracleProvider\\n    ) external view returns (OracleProviderProperties memory);\\n\\n    /**\\n     * @notice Updates the take-profit basis points range of an oracle provider.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param minTakeProfitBPS The new minimum take-profit basis points.\\n     * @param maxTakeProfitBPS The new maximum take-profit basis points.\\n     */\\n    function updateTakeProfitBPSRange(\\n        address oracleProvider,\\n        uint32 minTakeProfitBPS,\\n        uint32 maxTakeProfitBPS\\n    ) external;\\n\\n    /**\\n     * @notice Updates the leverage level of an oracle provider in the registry.\\n     * @dev The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param level The new leverage level to be set for the oracle provider.\\n     */\\n    function updateLeverageLevel(address oracleProvider, uint8 level) external;\\n}\\n\",\"keccak256\":\"0x77262e41b90e3a09c60ecd12e257a1d4119ed15ee8c4fbc51d6fb6e34d4c138a\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/factory/ISettlementTokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {InterestRate} from \\\"@chromatic-protocol/contracts/core/libraries/InterestRate.sol\\\";\\n\\n/**\\n * @title ISettlementTokenRegistry\\n * @dev Interface for the Settlement Token Registry contract.\\n */\\ninterface ISettlementTokenRegistry {\\n    /**\\n     * @dev Emitted when a new settlement token is registered.\\n     * @param token The address of the registered settlement token.\\n     * @param minimumMargin The minimum margin for the markets using this settlement token.\\n     * @param interestRate The interest rate for the settlement token.\\n     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.\\n     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.\\n     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.\\n     */\\n    event SettlementTokenRegistered(\\n        address indexed token,\\n        uint256 indexed minimumMargin,\\n        uint256 indexed interestRate,\\n        uint256 flashLoanFeeRate,\\n        uint256 earningDistributionThreshold,\\n        uint24 uniswapFeeTier\\n    );\\n\\n    /**\\n     * @dev Emitted when the minimum margin for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param minimumMargin The new minimum margin for the settlement token.\\n     */\\n    event SetMinimumMargin(address indexed token, uint256 indexed minimumMargin);\\n\\n    /**\\n     * @dev Emitted when the flash loan fee rate for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.\\n     */\\n    event SetFlashLoanFeeRate(address indexed token, uint256 indexed flashLoanFeeRate);\\n\\n    /**\\n     * @dev Emitted when the earning distribution threshold for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.\\n     */\\n    event SetEarningDistributionThreshold(\\n        address indexed token,\\n        uint256 indexed earningDistributionThreshold\\n    );\\n\\n    /**\\n     * @dev Emitted when the Uniswap fee tier for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.\\n     */\\n    event SetUniswapFeeTier(address indexed token, uint24 indexed uniswapFeeTier);\\n\\n    /**\\n     * @dev Emitted when an interest rate record is appended for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    event InterestRateRecordAppended(\\n        address indexed token,\\n        uint256 indexed annualRateBPS,\\n        uint256 indexed beginTimestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the last interest rate record is removed for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    event LastInterestRateRecordRemoved(\\n        address indexed token,\\n        uint256 indexed annualRateBPS,\\n        uint256 indexed beginTimestamp\\n    );\\n\\n    /**\\n     * @notice Registers a new settlement token.\\n     * @param token The address of the settlement token to register.\\n     * @param minimumMargin The minimum margin for the settlement token.\\n     * @param interestRate The interest rate for the settlement token.\\n     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.\\n     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.\\n     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.\\n     */\\n    function registerSettlementToken(\\n        address token,\\n        uint256 minimumMargin,\\n        uint256 interestRate,\\n        uint256 flashLoanFeeRate,\\n        uint256 earningDistributionThreshold,\\n        uint24 uniswapFeeTier\\n    ) external;\\n\\n    /**\\n     * @notice Gets the list of registered settlement tokens.\\n     * @return An array of addresses representing the registered settlement tokens.\\n     */\\n    function registeredSettlementTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Checks if a settlement token is registered.\\n     * @param token The address of the settlement token to check.\\n     * @return True if the settlement token is registered, false otherwise.\\n     */\\n    function isRegisteredSettlementToken(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Gets the minimum margin for a settlement token.\\n     * @dev The minimumMargin is used as the minimum value for the taker margin of a position\\n     *      or as the minimum value for the maker margin of each bin.\\n     * @param token The address of the settlement token.\\n     * @return The minimum margin for the settlement token.\\n     */\\n    function getMinimumMargin(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the minimum margin for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param minimumMargin The new minimum margin for the settlement token.\\n     */\\n    function setMinimumMargin(address token, uint256 minimumMargin) external;\\n\\n    /**\\n     * @notice Gets the flash loan fee rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The flash loan fee rate for the settlement token.\\n     */\\n    function getFlashLoanFeeRate(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the flash loan fee rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.\\n     */\\n    function setFlashLoanFeeRate(address token, uint256 flashLoanFeeRate) external;\\n\\n    /**\\n     * @notice Gets the earning distribution threshold for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The earning distribution threshold for the settlement token.\\n     */\\n    function getEarningDistributionThreshold(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the earning distribution threshold for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.\\n     */\\n    function setEarningDistributionThreshold(\\n        address token,\\n        uint256 earningDistributionThreshold\\n    ) external;\\n\\n    /**\\n     * @notice Gets the Uniswap fee tier for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The Uniswap fee tier for the settlement token.\\n     */\\n    function getUniswapFeeTier(address token) external view returns (uint24);\\n\\n    /**\\n     * @notice Sets the Uniswap fee tier for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.\\n     */\\n    function setUniswapFeeTier(address token, uint24 uniswapFeeTier) external;\\n\\n    /**\\n     * @notice Appends an interest rate record for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    function appendInterestRateRecord(\\n        address token,\\n        uint256 annualRateBPS,\\n        uint256 beginTimestamp\\n    ) external;\\n\\n    /**\\n     * @notice Removes the last interest rate record for a settlement token.\\n     * @param token The address of the settlement token.\\n     */\\n    function removeLastInterestRateRecord(address token) external;\\n\\n    /**\\n     * @notice Gets the current interest rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The current interest rate for the settlement token.\\n     */\\n    function currentInterestRate(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets all the interest rate records for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return An array of interest rate records for the settlement token.\\n     */\\n    function getInterestRateRecords(\\n        address token\\n    ) external view returns (InterestRate.Record[] memory);\\n}\\n\",\"keccak256\":\"0xd6f2e609c42fed3def6cde7e2d14623e1252356ab0ce79db7fc491c302c491b2\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/market/IMarketLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {PendingPosition, ClosingPosition, LiquidityBinValue, PendingLiquidity, ClaimableLiquidity, LiquidityBinStatus} from \\\"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\\\";\\nimport {LpReceipt} from \\\"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\\\";\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\n\\n/**\\n * @title IMarketLens\\n * @dev The interface for liquidity information retrieval in a market.\\n */\\ninterface IMarketLens {\\n    /**\\n     * @dev Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.\\n     * @return amount The total liquidity amount for the specified trading fee rate.\\n     */\\n    function getBinLiquidity(int16 tradingFeeRate) external view returns (uint256 amount);\\n\\n    /**\\n     * @dev Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.\\n     * @return amount The available (free) liquidity amount for the specified trading fee rate.\\n     */\\n    function getBinFreeLiquidity(int16 tradingFeeRate) external view returns (uint256 amount);\\n\\n    /**\\n     * @dev Retrieves the values of a specific trading fee rate's bins in the liquidity pool.\\n     *      The value of a bin represents the total valuation of the liquidity in the bin.\\n     * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.\\n     * @return values The value list of the bins for the specified trading fee rates.\\n     */\\n    function getBinValues(\\n        int16[] calldata tradingFeeRates\\n    ) external view returns (uint256[] memory values);\\n\\n    /**\\n     * @dev Retrieves the values of specific trading fee rates' bins in the liquidity pool at a specific oracle version.\\n     *      The value of a bin represents the total valuation of the liquidity in the bin.\\n     * @param oracleVersion The oracle version for which to retrieve the bin values.\\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the bin values.\\n     * @return values The array of LiquidityBinValue representing the values of the bins for the specified trading fee rates and oracle version.\\n     */\\n    function getBinValuesAt(\\n        uint256 oracleVersion,\\n        int16[] calldata tradingFeeRates\\n    ) external view returns (LiquidityBinValue[] memory values);\\n\\n    /**\\n     * @dev Retrieves the liquidity receipt with the given receipt ID.\\n     *      It throws NotExistLpReceipt if the specified receipt ID does not exist.\\n     * @param receiptId The ID of the liquidity receipt to retrieve.\\n     * @return receipt The liquidity receipt with the specified ID.\\n     */\\n    function getLpReceipt(uint256 receiptId) external view returns (LpReceipt memory);\\n\\n    /**\\n     * @dev Retrieves the liquidity receipts with the given receipt IDs.\\n     *      It throws NotExistLpReceipt if the specified receipt ID does not exist.\\n     * @param receiptIds The ID list of the liquidity receipt to retrieve.\\n     * @return receipts The liquidity receipt list with the specified IDs.\\n     */\\n    function getLpReceipts(\\n        uint256[] calldata receiptIds\\n    ) external view returns (LpReceipt[] memory);\\n\\n    /**\\n     * @dev Retrieves the pending liquidity information for a specific trading fee rate from the associated LiquidityPool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the pending liquidity.\\n     * @return pendingLiquidity An instance of PendingLiquidity representing the pending liquidity information.\\n     */\\n    function pendingLiquidity(int16 tradingFeeRate) external view returns (PendingLiquidity memory);\\n\\n    /**\\n     * @dev Retrieves the pending liquidity information for multiple trading fee rates from the associated LiquidityPool.\\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending liquidity.\\n     * @return pendingLiquidityBatch An array of PendingLiquidity instances representing the pending liquidity information for each trading fee rate.\\n     */\\n    function pendingLiquidityBatch(\\n        int16[] calldata tradingFeeRates\\n    ) external view returns (PendingLiquidity[] memory);\\n\\n    /**\\n     * @dev Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.\\n     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.\\n     * @return claimableLiquidity An instance of ClaimableLiquidity representing the claimable liquidity information.\\n     */\\n    function claimableLiquidity(\\n        int16 tradingFeeRate,\\n        uint256 oracleVersion\\n    ) external view returns (ClaimableLiquidity memory);\\n\\n    /**\\n     * @dev Retrieves the claimable liquidity information for multiple trading fee rates and a specific oracle version from the associated LiquidityPool.\\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the claimable liquidity.\\n     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.\\n     * @return claimableLiquidityBatch An array of ClaimableLiquidity instances representing the claimable liquidity information for each trading fee rate.\\n     */\\n    function claimableLiquidityBatch(\\n        int16[] calldata tradingFeeRates,\\n        uint256 oracleVersion\\n    ) external view returns (ClaimableLiquidity[] memory);\\n\\n    /**\\n     * @dev Retrieves the liquidity bin statuses for the caller's liquidity pool.\\n     * @return statuses An array of LiquidityBinStatus representing the liquidity bin statuses.\\n     */\\n    function liquidityBinStatuses() external view returns (LiquidityBinStatus[] memory);\\n\\n    /**\\n     * @dev Retrieves the position with the given position ID.\\n     *      It throws NotExistPosition if the specified position ID does not exist.\\n     * @param positionId The ID of the position to retrieve.\\n     * @return position The position with the specified ID.\\n     */\\n    function getPosition(uint256 positionId) external view returns (Position memory);\\n\\n    /**\\n     * @dev Retrieves multiple positions by their IDs.\\n     * @param positionIds The IDs of the positions to retrieve.\\n     * @return positions An array of retrieved positions.\\n     */\\n    function getPositions(\\n        uint256[] calldata positionIds\\n    ) external view returns (Position[] memory positions);\\n\\n    /**\\n     * @dev Retrieves the pending position information for a specific trading fee rate from the associated LiquidityPool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the pending position.\\n     * @return pendingPosition An instance of PendingPosition representing the pending position information.\\n     */\\n    function pendingPosition(int16 tradingFeeRate) external view returns (PendingPosition memory);\\n\\n    /**\\n     * @dev Retrieves the pending position information for multiple trading fee rates from the associated LiquidityPool.\\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending position.\\n     * @return pendingPositionBatch An array of PendingPosition instances representing the pending position information for each trading fee rate.\\n     */\\n    function pendingPositionBatch(\\n        int16[] calldata tradingFeeRates\\n    ) external view returns (PendingPosition[] memory);\\n\\n    /**\\n     * @dev Retrieves the closing position information for a specific trading fee rate from the associated LiquidityPool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the closing position.\\n     * @return closingPosition An instance of PendingPosition representing the closing position information.\\n     */\\n    function closingPosition(int16 tradingFeeRate) external view returns (ClosingPosition memory);\\n\\n    /**\\n     * @dev Retrieves the closing position information for multiple trading fee rates from the associated LiquidityPool.\\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the closing position.\\n     * @return pendingPositionBatch An array of PendingPosition instances representing the closing position information for each trading fee rate.\\n     */\\n    function closingPositionBatch(\\n        int16[] calldata tradingFeeRates\\n    ) external view returns (ClosingPosition[] memory);\\n}\\n\",\"keccak256\":\"0x18f876a7d5d163f3bec2d507464bd78d29a5c609076be4814e5b89397ea9011e\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/market/IMarketLiquidate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\n\\n/**\\n * @title IMarketLiquidate\\n * @dev Interface for liquidating and claiming positions in a market.\\n */\\ninterface IMarketLiquidate {\\n    /**\\n     * @dev Emitted when a position is claimed by keeper.\\n     * @param account The address of the account claiming the position.\\n     * @param pnl The profit or loss of the claimed position.\\n     * @param interest The interest paid for the claimed position.\\n     * @param usedKeeperFee The amount of keeper fee used for the liquidation.\\n     * @param position The claimed position.\\n     */\\n    event ClaimPositionByKeeper(\\n        address indexed account,\\n        int256 indexed pnl,\\n        uint256 indexed interest,\\n        uint256 usedKeeperFee,\\n        Position position\\n    );\\n\\n    /**\\n     * @dev Emitted when a position is liquidated.\\n     * @param account The address of the account being liquidated.\\n     * @param pnl The profit or loss of the claimed position.\\n     * @param interest The interest paid for the claimed position.\\n     * @param usedKeeperFee The amount of keeper fee used for the liquidation.\\n     * @param position The liquidated position.\\n     */\\n    event Liquidate(\\n        address indexed account,\\n        int256 indexed pnl,\\n        uint256 indexed interest,\\n        uint256 usedKeeperFee,\\n        Position position\\n    );\\n\\n    /**\\n     * @dev Checks if a position is eligible for liquidation.\\n     * @param positionId The ID of the position to check.\\n     * @return A boolean indicating if the position is eligible for liquidation.\\n     */\\n    function checkLiquidation(uint256 positionId) external view returns (bool);\\n\\n    /**\\n     * @dev Liquidates a position.\\n     * @param positionId The ID of the position to liquidate.\\n     * @param keeper The address of the keeper performing the liquidation.\\n     * @param keeperFee The native token amount of the keeper's fee.\\n     */\\n    function liquidate(uint256 positionId, address keeper, uint256 keeperFee) external;\\n\\n    /**\\n     * @dev Checks if a position is eligible for claim.\\n     * @param positionId The ID of the position to check.\\n     * @return A boolean indicating if the position is eligible for claim.\\n     */\\n    function checkClaimPosition(uint256 positionId) external view returns (bool);\\n\\n    /**\\n     * @dev Claims a closed position on behalf of a keeper.\\n     * @param positionId The ID of the position to claim.\\n     * @param keeper The address of the keeper claiming the position.\\n     * @param keeperFee The native token amount of the keeper's fee.\\n     */\\n    function claimPosition(uint256 positionId, address keeper, uint256 keeperFee) external;\\n}\\n\",\"keccak256\":\"0x4b14cfba4efebc696bbd43e4995f1f531800d9fe5c3189e01c1335eb8e1acf39\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/market/IMarketLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {LpReceipt} from \\\"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\\\";\\n\\n/**\\n * @title IMarketLiquidity\\n * @dev The interface for liquidity operations in a market.\\n */\\ninterface IMarketLiquidity {\\n    /**\\n     * @dev Emitted when liquidity is added to the market.\\n     * @param receipt The liquidity receipt.\\n     */\\n    event AddLiquidity(LpReceipt receipt);\\n\\n    /**\\n     * @dev Emitted when liquidity is added to the market.\\n     * @param receipts An array of LP receipts.\\n     */\\n    event AddLiquidityBatch(LpReceipt[] receipts);\\n\\n    /**\\n     * @dev Emitted when liquidity is claimed from the market.\\n     * @param clbTokenAmount The amount of CLB tokens claimed.\\n     * @param receipt The liquidity receipt.\\n     */\\n    event ClaimLiquidity(LpReceipt receipt, uint256 indexed clbTokenAmount);\\n\\n    /**\\n     * @dev Emitted when liquidity is claimed from the market.\\n     * @param receipts An array of LP receipts.\\n     * @param clbTokenAmounts The amount list of CLB tokens claimed.\\n     */\\n    event ClaimLiquidityBatch(LpReceipt[] receipts, uint256[] clbTokenAmounts);\\n\\n    /**\\n     * @dev Emitted when liquidity is removed from the market.\\n     * @param receipt The liquidity receipt.\\n     */\\n    event RemoveLiquidity(LpReceipt receipt);\\n\\n    /**\\n     * @dev Emitted when liquidity is removed from the market.\\n     * @param receipts An array of LP receipts.\\n     */\\n    event RemoveLiquidityBatch(LpReceipt[] receipts);\\n\\n    /**\\n     * @dev Emitted when liquidity is withdrawn from the market.\\n     * @param receipt The liquidity receipt.\\n     * @param amount The amount of liquidity withdrawn.\\n     * @param burnedCLBTokenAmount The amount of burned CLB tokens.\\n     */\\n    event WithdrawLiquidity(\\n        LpReceipt receipt,\\n        uint256 indexed amount,\\n        uint256 indexed burnedCLBTokenAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when liquidity is withdrawn from the market.\\n     * @param receipts An array of LP receipts.\\n     * @param amounts The amount list of liquidity withdrawn.\\n     * @param burnedCLBTokenAmounts The amount list of burned CLB tokens.\\n     */\\n    event WithdrawLiquidityBatch(\\n        LpReceipt[] receipts,\\n        uint256[] amounts,\\n        uint256[] burnedCLBTokenAmounts\\n    );\\n\\n    /**\\n     * @dev Adds liquidity to the market.\\n     * @param recipient The address to receive the liquidity tokens.\\n     * @param tradingFeeRate The trading fee rate for the liquidity.\\n     * @param data Additional data for the liquidity callback.\\n     * @return The liquidity receipt.\\n     */\\n    function addLiquidity(\\n        address recipient,\\n        int16 tradingFeeRate,\\n        bytes calldata data\\n    ) external returns (LpReceipt memory);\\n\\n    /**\\n     * @notice Adds liquidity to multiple liquidity bins of the market in a batch.\\n     * @param recipient The address of the recipient for each liquidity bin.\\n     * @param tradingFeeRates An array of fee rates for each liquidity bin.\\n     * @param amounts An array of amounts to add as liquidity for each bin.\\n     * @param data Additional data for the liquidity callback.\\n     * @return An array of LP receipts.\\n     */\\n    function addLiquidityBatch(\\n        address recipient,\\n        int16[] calldata tradingFeeRates,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external returns (LpReceipt[] memory);\\n\\n    /**\\n     * @dev Claims liquidity from a liquidity receipt.\\n     * @param receiptId The ID of the liquidity receipt.\\n     * @param data Additional data for the liquidity callback.\\n     */\\n    function claimLiquidity(uint256 receiptId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Claims liquidity from a liquidity receipt.\\n     * @param receiptIds The array of the liquidity receipt IDs.\\n     * @param data Additional data for the liquidity callback.\\n     */\\n    function claimLiquidityBatch(uint256[] calldata receiptIds, bytes calldata data) external;\\n\\n    /**\\n     * @dev Removes liquidity from the market.\\n     * @param recipient The address to receive the removed liquidity.\\n     * @param tradingFeeRate The trading fee rate for the liquidity.\\n     * @param data Additional data for the liquidity callback.\\n     * @return The liquidity receipt.\\n     */\\n    function removeLiquidity(\\n        address recipient,\\n        int16 tradingFeeRate,\\n        bytes calldata data\\n    ) external returns (LpReceipt memory);\\n\\n    /**\\n     * @dev Removes liquidity from the market.\\n     * @param recipient The address to receive the removed liquidity.\\n     * @param tradingFeeRates An array of fee rates for each liquidity bin.\\n     * @param clbTokenAmounts An array of clb token amounts to remove as liquidity for each bin.\\n     * @param data Additional data for the liquidity callback.\\n     * @return The liquidity receipt.\\n     */\\n    function removeLiquidityBatch(\\n        address recipient,\\n        int16[] calldata tradingFeeRates,\\n        uint256[] calldata clbTokenAmounts,\\n        bytes calldata data\\n    ) external returns (LpReceipt[] memory);\\n\\n    /**\\n     * @dev Withdraws liquidity from a liquidity receipt.\\n     * @param receiptId The ID of the liquidity receipt.\\n     * @param data Additional data for the liquidity callback.\\n     */\\n    function withdrawLiquidity(uint256 receiptId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Withdraws liquidity from a liquidity receipt.\\n     * @param receiptIds The array of the liquidity receipt IDs.\\n     * @param data Additional data for the liquidity callback.\\n     */\\n    function withdrawLiquidityBatch(uint256[] calldata receiptIds, bytes calldata data) external;\\n\\n    /**\\n     * @dev Distributes earning to the liquidity bins.\\n     * @param earning The amount of earning to distribute.\\n     * @param marketBalance The balance of the market.\\n     */\\n    function distributeEarningToBins(uint256 earning, uint256 marketBalance) external;\\n}\\n\",\"keccak256\":\"0xe60df36a3b456aa53a5d3289673c78b5bd590e82d7f53175399365edfa1f90b6\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/market/IMarketSettle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IMarketSettle\\n * @dev Interface for market settlement.\\n */\\ninterface IMarketSettle {\\n    /**\\n     * @notice Executes the settlement process for the Chromatic market.\\n     * @dev This function is called to settle the market.\\n     * @param feeRates The feeRate list of liquidity bin to settle.\\n     */\\n    function settle(int16[] calldata feeRates) external;\\n\\n    /**\\n     * @notice Executes the settlement process for the Chromatic market.\\n     * @dev This function is called to settle the market.\\n     */\\n    function settleAll() external;\\n}\\n\",\"keccak256\":\"0xb88a0c6429f6311db0b58b113d880ba1816aa7e59953f457ad1585d3d8b3e8a1\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/market/IMarketState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {IChromaticMarketFactory} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarketFactory.sol\\\";\\nimport {ILiquidator} from \\\"@chromatic-protocol/contracts/core/interfaces/ILiquidator.sol\\\";\\nimport {IChromaticVault} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticVault.sol\\\";\\nimport {ICLBToken} from \\\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\\\";\\nimport {IKeeperFeePayer} from \\\"@chromatic-protocol/contracts/core/interfaces/IKeeperFeePayer.sol\\\";\\n\\n/**\\n * @title IMarketState\\n * @dev Interface for accessing the state of a market contract.\\n */\\ninterface IMarketState {\\n    /**\\n     * @notice Emitted when the protocol fee is changed by the market\\n     * @param feeProtocolOld The previous value of the protocol fee\\n     * @param feeProtocolNew The updated value of the protocol fee\\n     */\\n    event SetFeeProtocol(uint8 feeProtocolOld, uint8 feeProtocolNew);\\n\\n    /**\\n     * @dev Returns the factory contract for the market.\\n     * @return The factory contract.\\n     */\\n    function factory() external view returns (IChromaticMarketFactory);\\n\\n    /**\\n     * @dev Returns the settlement token of the market.\\n     * @return The settlement token.\\n     */\\n    function settlementToken() external view returns (IERC20Metadata);\\n\\n    /**\\n     * @dev Returns the oracle provider contract for the market.\\n     * @return The oracle provider contract.\\n     */\\n    function oracleProvider() external view returns (IOracleProvider);\\n\\n    /**\\n     * @dev Returns the CLB token contract for the market.\\n     * @return The CLB token contract.\\n     */\\n    function clbToken() external view returns (ICLBToken);\\n\\n    /**\\n     * @dev Returns the liquidator contract for the market.\\n     * @return The liquidator contract.\\n     */\\n    function liquidator() external view returns (ILiquidator);\\n\\n    /**\\n     * @dev Returns the vault contract for the market.\\n     * @return The vault contract.\\n     */\\n    function vault() external view returns (IChromaticVault);\\n\\n    /**\\n     * @dev Returns the keeper fee payer contract for the market.\\n     * @return The keeper fee payer contract.\\n     */\\n    function keeperFeePayer() external view returns (IKeeperFeePayer);\\n\\n    /**\\n     * @notice Returns the denominator of the protocol's % share of the fees\\n     * @return The protocol fee for the market\\n     */\\n    function feeProtocol() external view returns (uint8);\\n\\n    /**\\n     * @notice Set the denominator of the protocol's % share of the fees\\n     * @param _feeProtocol new protocol fee for the market\\n     */\\n    function setFeeProtocol(uint8 _feeProtocol) external;\\n}\\n\",\"keccak256\":\"0x44f02e1b718c0d3aa70b9bad2d5d3e77561446433a2fdc23e7afc2e7a41c9584\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/market/IMarketTrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\nimport {OpenPositionInfo, ClosePositionInfo} from \\\"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\\\";\\n\\n/**\\n * @title IMarketTrade\\n * @dev Interface for trading positions in a market.\\n */\\ninterface IMarketTrade {\\n    /**\\n     * @dev Emitted when a position is opened.\\n     * @param account The address of the account opening the position.\\n     * @param position The opened position.\\n     */\\n    event OpenPosition(address indexed account, Position position);\\n\\n    /**\\n     * @dev Emitted when a position is closed.\\n     * @param account The address of the account closing the position.\\n     * @param position The closed position.\\n     */\\n    event ClosePosition(address indexed account, Position position);\\n\\n    /**\\n     * @dev Emitted when a position is claimed.\\n     * @param account The address of the account claiming the position.\\n     * @param pnl The profit or loss of the claimed position.\\n     * @param interest The interest paid for the claimed position.\\n     * @param position The claimed position.\\n     */\\n    event ClaimPosition(\\n        address indexed account,\\n        int256 indexed pnl,\\n        uint256 indexed interest,\\n        Position position\\n    );\\n\\n    /**\\n     * @dev Emitted when protocol fees are transferred.\\n     * @param positionId The ID of the position for which the fees are transferred.\\n     * @param amount The amount of fees transferred.\\n     */\\n    event TransferProtocolFee(uint256 indexed positionId, uint256 indexed amount);\\n\\n    /**\\n     * @dev Opens a new position in the market.\\n     * @param qty The quantity of the position.\\n     * @param takerMargin The margin amount provided by the taker.\\n     * @param makerMargin The margin amount provided by the maker.\\n     * @param maxAllowableTradingFee The maximum allowable trading fee for the position.\\n     * @param data Additional data for the position callback.\\n     * @return The opened position.\\n     */\\n    function openPosition(\\n        int256 qty,\\n        uint256 takerMargin,\\n        uint256 makerMargin,\\n        uint256 maxAllowableTradingFee,\\n        bytes calldata data\\n    ) external returns (OpenPositionInfo memory);\\n\\n    /**\\n     * @dev Closes a position in the market.\\n     * @param positionId The ID of the position to close.\\n     * @return The closed position.\\n     */\\n    function closePosition(uint256 positionId) external returns (ClosePositionInfo memory);\\n\\n    /**\\n     * @dev Claims a closed position in the market.\\n     * @param positionId The ID of the position to claim.\\n     * @param recipient The address of the recipient of the claimed position.\\n     * @param data Additional data for the claim callback.\\n     */\\n    function claimPosition(\\n        uint256 positionId,\\n        address recipient, // EOA or account contract\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5c31415599533f50d3a2cd56674be48be1eae0c52d8699f2fa969d0a395d2039\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nbytes4 constant CLAIM_USER = \\\"UC\\\";\\nbytes4 constant CLAIM_KEEPER = \\\"KC\\\";\\nbytes4 constant CLAIM_TP = \\\"TP\\\";\\nbytes4 constant CLAIM_SL = \\\"SL\\\";\\n\\n/**\\n * @dev The OpenPositionInfo struct represents a opened trading position.\\n * @param id The position identifier\\n * @param openVersion The version of the oracle when the position was opened\\n * @param qty The quantity of the position\\n * @param openTimestamp The timestamp when the position was opened\\n * @param takerMargin The amount of collateral that a trader must provide\\n * @param makerMargin The margin amount provided by the maker.\\n * @param tradingFee The trading fee associated with the position.\\n */\\nstruct OpenPositionInfo {\\n    uint256 id;\\n    uint256 openVersion;\\n    int256 qty;\\n    uint256 openTimestamp;\\n    uint256 takerMargin;\\n    uint256 makerMargin;\\n    uint256 tradingFee;\\n}\\n\\n/**\\n * @dev The ClosePositionInfo struct represents a closed trading position.\\n * @param id The position identifier\\n * @param closeVersion The version of the oracle when the position was closed\\n * @param closeTimestamp The timestamp when the position was closed\\n */\\nstruct ClosePositionInfo {\\n    uint256 id;\\n    uint256 closeVersion;\\n    uint256 closeTimestamp;\\n}\\n\\n/**\\n * @dev The ClaimPositionInfo struct represents a claimed position information.\\n * @param id The position identifier\\n * @param entryPrice The entry price of the position\\n * @param exitPrice The exit price of the position\\n * @param realizedPnl The profit or loss of the claimed position.\\n * @param interest The interest paid for the claimed position.\\n * @param cause The description of being claimed.\\n */\\nstruct ClaimPositionInfo {\\n    uint256 id;\\n    uint256 entryPrice;\\n    uint256 exitPrice;\\n    int256 realizedPnl;\\n    uint256 interest;\\n    bytes4 cause;\\n}\\n\\n/**\\n * @dev Represents a pending position within the LiquidityBin\\n * @param openVersion The oracle version when the position was opened.\\n * @param totalQty The total quantity of the pending position.\\n * @param totalMakerMargin The total maker margin of the pending position.\\n * @param totalTakerMargin The total taker margin of the pending position.\\n */\\nstruct PendingPosition {\\n    uint256 openVersion;\\n    int256 totalQty;\\n    uint256 totalMakerMargin;\\n    uint256 totalTakerMargin;\\n}\\n\\n/**\\n * @dev Represents the closing position within an LiquidityBin.\\n * @param closeVersion The oracle version when the position was closed.\\n * @param totalQty The total quantity of the closing position.\\n * @param totalEntryAmount The total entry amount of the closing position.\\n * @param totalMakerMargin The total maker margin of the closing position.\\n * @param totalTakerMargin The total taker margin of the closing position.\\n */\\nstruct ClosingPosition {\\n    uint256 closeVersion;\\n    int256 totalQty;\\n    uint256 totalEntryAmount;\\n    uint256 totalMakerMargin;\\n    uint256 totalTakerMargin;\\n}\\n\\n/**\\n * @dev A struct representing pending liquidity information.\\n * @param oracleVersion The oracle version of pending liqudity.\\n * @param mintingTokenAmountRequested The amount of settlement tokens requested for minting.\\n * @param burningCLBTokenAmountRequested The amount of CLB tokens requested for burning.\\n */\\nstruct PendingLiquidity {\\n    uint256 oracleVersion;\\n    uint256 mintingTokenAmountRequested;\\n    uint256 burningCLBTokenAmountRequested;\\n}\\n\\n/**\\n * @dev A struct representing claimable liquidity information.\\n * @param mintingTokenAmountRequested The amount of settlement tokens requested for minting.\\n * @param mintingCLBTokenAmount The actual amount of CLB tokens minted.\\n * @param burningCLBTokenAmountRequested The amount of CLB tokens requested for burning.\\n * @param burningCLBTokenAmount The actual amount of CLB tokens burned.\\n * @param burningTokenAmount The amount of settlement tokens equal in value to the burned CLB tokens.\\n */\\nstruct ClaimableLiquidity {\\n    uint256 mintingTokenAmountRequested;\\n    uint256 mintingCLBTokenAmount;\\n    uint256 burningCLBTokenAmountRequested;\\n    uint256 burningCLBTokenAmount;\\n    uint256 burningTokenAmount;\\n}\\n\\n/**\\n * @dev A struct representing status of the liquidity bin.\\n * @param liquidity The total liquidity amount in the bin\\n * @param freeLiquidity The amount of free liquidity available in the bin.\\n * @param binValue The current value of the bin.\\n * @param tradingFeeRate The trading fee rate for the liquidity.\\n */\\nstruct LiquidityBinStatus {\\n    uint256 liquidity;\\n    uint256 freeLiquidity;\\n    uint256 binValue;\\n    int16 tradingFeeRate;\\n}\\n\\n/**\\n * @dev A struct representing value of the liquidity bin.\\n * @param binValue The value of liquidity bin expressed in amount of settlement token.\\n * @param clbTokenTotalSupply The total supply amount of the CLB token.\\n */\\nstruct LiquidityBinValue {\\n    uint256 binValue;\\n    uint256 clbTokenTotalSupply;\\n}\\n\",\"keccak256\":\"0x7309969923c8c698e627bbad715cfe373a7e40f365de33673c0be8ba1a758dd9\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/vault/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title ILendingPool\\n * @dev Interface for a lending pool contract.\\n */\\ninterface ILendingPool {\\n    /**\\n     * @notice Emitted when a flash loan is executed.\\n     * @param sender The address initiating the flash loan.\\n     * @param recipient The address receiving the flash loan.\\n     * @param amount The amount of the flash loan.\\n     * @param paid The amount paid back after the flash loan.\\n     * @param paidToTakerPool The amount paid to the taker pool after the flash loan.\\n     * @param paidToMakerPool The amount paid to the maker pool after the flash loan.\\n     */\\n    event FlashLoan(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed amount,\\n        uint256 paid,\\n        uint256 paidToTakerPool,\\n        uint256 paidToMakerPool\\n    );\\n\\n    /**\\n     * @notice Executes a flash loan.\\n     * @param token The address of the token for the flash loan.\\n     * @param amount The amount of the flash loan.\\n     * @param recipient The address to receive the flash loan.\\n     * @param data Additional data for the flash loan.\\n     */\\n    function flashLoan(\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the pending share of earnings for a specific bin (subset) of funds in a market.\\n     * @param market The address of the market.\\n     * @param settlementToken The settlement token address.\\n     * @param binBalance The balance of funds in the bin.\\n     * @return The pending share of earnings for the specified bin.\\n     */\\n    function getPendingBinShare(\\n        address market,\\n        address settlementToken,\\n        uint256 binBalance\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6ff7f0f07254c591dda3c052cc6d02b89e4bcd4e9efe79f3f483ad067cfb9906\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/interfaces/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IVault\\n * @dev Interface for the Vault contract, responsible for managing positions and liquidity.\\n */\\ninterface IVault {\\n    /**\\n     * @notice Emitted when a position is opened.\\n     * @param market The address of the market.\\n     * @param positionId The ID of the opened position.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param tradingFee The trading fee associated with the position.\\n     * @param protocolFee The protocol fee associated with the position.\\n     */\\n    event OnOpenPosition(\\n        address indexed market,\\n        uint256 indexed positionId,\\n        uint256 indexed takerMargin,\\n        uint256 tradingFee,\\n        uint256 protocolFee\\n    );\\n\\n    /**\\n     * @notice Emitted when a position is claimed.\\n     * @param market The address of the market.\\n     * @param positionId The ID of the claimed position.\\n     * @param recipient The address of the recipient of the settlement amount.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param settlementAmount The settlement amount received by the recipient.\\n     */\\n    event OnClaimPosition(\\n        address indexed market,\\n        uint256 indexed positionId,\\n        address indexed recipient,\\n        uint256 takerMargin,\\n        uint256 settlementAmount\\n    );\\n\\n    /**\\n     * @notice Emitted when liquidity is added to the vault.\\n     * @param market The address of the market.\\n     * @param amount The amount of liquidity added.\\n     */\\n    event OnAddLiquidity(address indexed market, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when pending liquidity is settled.\\n     * @param market The address of the market.\\n     * @param pendingDeposit The amount of pending deposit being settled.\\n     * @param pendingWithdrawal The amount of pending withdrawal being settled.\\n     */\\n    event OnSettlePendingLiquidity(\\n        address indexed market,\\n        uint256 indexed pendingDeposit,\\n        uint256 indexed pendingWithdrawal\\n    );\\n\\n    /**\\n     * @notice Emitted when liquidity is withdrawn from the vault.\\n     * @param market The address of the market.\\n     * @param amount The amount of liquidity withdrawn.\\n     * @param recipient The address of the recipient of the withdrawn liquidity.\\n     */\\n    event OnWithdrawLiquidity(\\n        address indexed market,\\n        uint256 indexed amount,\\n        address indexed recipient\\n    );\\n\\n    /**\\n     * @notice Emitted when the keeper fee is transferred.\\n     * @param fee The amount of the transferred keeper fee as native token.\\n     * @param amount The amount of settlement token to be used for paying keeper fee.\\n     */\\n    event TransferKeeperFee(uint256 indexed fee, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when the keeper fee is transferred for a specific market.\\n     * @param market The address of the market.\\n     * @param fee The amount of the transferred keeper fee as native token.\\n     * @param amount The amount of settlement token to be used for paying keeper fee.\\n     */\\n    event TransferKeeperFee(address indexed market, uint256 indexed fee, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when the protocol fee is transferred for a specific position.\\n     * @param market The address of the market.\\n     * @param positionId The ID of the position.\\n     * @param amount The amount of the transferred fee.\\n     */\\n    event TransferProtocolFee(\\n        address indexed market,\\n        uint256 indexed positionId,\\n        uint256 indexed amount\\n    );\\n\\n    /**\\n     * @notice Called when a position is opened by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param positionId The ID of the opened position.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param tradingFee The trading fee associated with the position.\\n     * @param protocolFee The protocol fee associated with the position.\\n     */\\n    function onOpenPosition(\\n        address settlementToken,\\n        uint256 positionId,\\n        uint256 takerMargin,\\n        uint256 tradingFee,\\n        uint256 protocolFee\\n    ) external;\\n\\n    /**\\n     * @notice Called when a position is claimed by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param positionId The ID of the claimed position.\\n     * @param recipient The address that will receive the settlement amount.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param settlementAmount The amount to be settled for the position.\\n     */\\n    function onClaimPosition(\\n        address settlementToken,\\n        uint256 positionId,\\n        address recipient,\\n        uint256 takerMargin,\\n        uint256 settlementAmount\\n    ) external;\\n\\n    /**\\n     * @notice Called when liquidity is added to the vault by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param amount The amount of liquidity being added.\\n     */\\n    function onAddLiquidity(address settlementToken, uint256 amount) external;\\n\\n    /**\\n     * @notice Called when pending liquidity is settled in the vault by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param pendingDeposit The amount of pending deposits being settled.\\n     * @param pendingWithdrawal The amount of pending withdrawals being settled.\\n     */\\n    function onSettlePendingLiquidity(\\n        address settlementToken,\\n        uint256 pendingDeposit,\\n        uint256 pendingWithdrawal\\n    ) external;\\n\\n    /**\\n     * @notice Called when liquidity is withdrawn from the vault by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param recipient The address that will receive the withdrawn liquidity.\\n     * @param amount The amount of liquidity to be withdrawn.\\n     */\\n    function onWithdrawLiquidity(\\n        address settlementToken,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Transfers the keeper fee from the market to the specified keeper.\\n     * @param settlementToken The settlement token address.\\n     * @param keeper The address of the keeper to receive the fee.\\n     * @param fee The amount of the fee to transfer as native token.\\n     * @param margin The margin amount used for the fee payment.\\n     * @return usedFee The actual settlement token amount of fee used for the transfer.\\n     */\\n    function transferKeeperFee(\\n        address settlementToken,\\n        address keeper,\\n        uint256 fee,\\n        uint256 margin\\n    ) external returns (uint256 usedFee);\\n}\\n\",\"keccak256\":\"0x3a3d8c5034d3a473347b2fe53a7973deeab827a88f6e83fc0ab2b0a85e45e429\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/libraries/BinMargin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @dev The BinMargin struct represents the margin information for an LP bin.\\n * @param tradingFeeRate The trading fee rate associated with the LP bin\\n * @param amount The maker margin amount specified for the LP bin\\n */\\nstruct BinMargin {\\n    uint16 tradingFeeRate;\\n    uint256 amount;\\n}\\n\\nusing BinMarginLib for BinMargin global;\\n\\n/**\\n * @title BinMarginLib\\n * @dev The BinMarginLib library provides functions to operate on BinMargin structs.\\n */\\nlibrary BinMarginLib {\\n    using Math for uint256;\\n\\n    uint256 constant TRADING_FEE_RATE_PRECISION = 10000;\\n\\n    /**\\n     * @notice Calculates the trading fee based on the margin amount and the trading fee rate.\\n     * @param self The BinMargin struct\\n     * @param _feeProtocol The protocol fee for the market\\n     * @return The trading fee amount\\n     */\\n    function tradingFee(BinMargin memory self, uint8 _feeProtocol) internal pure returns (uint256) {\\n        uint256 _tradingFee = self.amount.mulDiv(self.tradingFeeRate, TRADING_FEE_RATE_PRECISION);\\n        return _tradingFee - _protocolFee(_tradingFee, _feeProtocol);\\n    }\\n\\n    /**\\n     * @notice Calculates the protocol fee based on the margin amount and the trading fee rate.\\n     * @param self The BinMargin struct\\n     * @param _feeProtocol The protocol fee for the market\\n     * @return The protocol fee amount\\n     */\\n    function protocolFee(\\n        BinMargin memory self,\\n        uint8 _feeProtocol\\n    ) internal pure returns (uint256) {\\n        return\\n            _protocolFee(\\n                self.amount.mulDiv(self.tradingFeeRate, TRADING_FEE_RATE_PRECISION),\\n                _feeProtocol\\n            );\\n    }\\n\\n    function _protocolFee(uint256 _tradingFee, uint8 _feeProtocol) private pure returns (uint256) {\\n        return _feeProtocol != 0 ? _tradingFee / _feeProtocol : 0;\\n    }\\n}\\n\",\"keccak256\":\"0xb07cb55836319b7414a9feacba79ad5bdc44bbea8abf5d2ee25d1c4aefa4a8d9\",\"license\":\"BUSL-1.1\"},\"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {FEE_RATES_LENGTH} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\n\\n/**\\n * @title CLBTokenLib\\n * @notice Provides utility functions for working with CLB tokens.\\n */\\nlibrary CLBTokenLib {\\n    using SignedMath for int256;\\n    using SafeCast for uint256;\\n\\n    uint256 private constant DIRECTION_PRECISION = 10 ** 10;\\n    uint16 private constant MIN_FEE_RATE = 1;\\n\\n    /**\\n     * @notice Encode the CLB token ID of ERC1155 token type\\n     * @dev If `tradingFeeRate` is negative, it adds `DIRECTION_PRECISION` to the absolute fee rate.\\n     *      Otherwise it returns the fee rate directly.\\n     * @return id The ID of ERC1155 token\\n     */\\n    function encodeId(int16 tradingFeeRate) internal pure returns (uint256) {\\n        bool long = tradingFeeRate > 0;\\n        return _encodeId(uint16(long ? tradingFeeRate : -tradingFeeRate), long);\\n    }\\n\\n    /**\\n     * @notice Decode the trading fee rate from the CLB token ID of ERC1155 token type\\n     * @dev If `id` is greater than or equal to `DIRECTION_PRECISION`,\\n     *      then it substracts `DIRECTION_PRECISION` from `id`\\n     *      and returns the negation of the substracted value.\\n     *      Otherwise it returns `id` directly.\\n     * @return tradingFeeRate The trading fee rate\\n     */\\n    function decodeId(uint256 id) internal pure returns (int16 tradingFeeRate) {\\n        if (id >= DIRECTION_PRECISION) {\\n            tradingFeeRate = -int16((id - DIRECTION_PRECISION).toUint16());\\n        } else {\\n            tradingFeeRate = int16(id.toUint16());\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the array of supported trading fee rates.\\n     * @dev This function returns the array of supported trading fee rates,\\n     *      ranging from the minimum fee rate to the maximum fee rate with step increments.\\n     * @return tradingFeeRates The array of supported trading fee rates.\\n     */\\n    function tradingFeeRates() internal pure returns (uint16[FEE_RATES_LENGTH] memory) {\\n        // prettier-ignore\\n        return [\\n            MIN_FEE_RATE, 2, 3, 4, 5, 6, 7, 8, 9, // 0.01% ~ 0.09%, step 0.01%\\n            10, 20, 30, 40, 50, 60, 70, 80, 90, // 0.1% ~ 0.9%, step 0.1%\\n            100, 200, 300, 400, 500, 600, 700, 800, 900, // 1% ~ 9%, step 1%\\n            1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000 // 10% ~ 50%, step 5%\\n        ];\\n    }\\n\\n    function tokenIds() internal pure returns (uint256[] memory) {\\n        uint16[FEE_RATES_LENGTH] memory feeRates = tradingFeeRates();\\n\\n        uint256[] memory ids = new uint256[](FEE_RATES_LENGTH * 2);\\n        for (uint256 i; i < FEE_RATES_LENGTH; ) {\\n            ids[i] = _encodeId(feeRates[i], true);\\n            ids[i + FEE_RATES_LENGTH] = _encodeId(feeRates[i], false);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return ids;\\n    }\\n\\n    function _encodeId(uint16 tradingFeeRate, bool long) private pure returns (uint256 id) {\\n        id = long ? tradingFeeRate : tradingFeeRate + DIRECTION_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0xbd995bde42a6162c1281d42e52a2def3bf74abbc97e12850d0577e405219ddca\",\"license\":\"BUSL-1.1\"},\"@chromatic-protocol/contracts/core/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nuint256 constant BPS = 10000;\\nuint256 constant FEE_RATES_LENGTH = 36;\\nuint256 constant PRICE_PRECISION = 1e18;\",\"keccak256\":\"0xd14bb41459e61008626b00dd6f5eebd6669d20a280e3d1ffcb043dd401922c7c\",\"license\":\"BUSL-1.1\"},\"@chromatic-protocol/contracts/core/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title Errors\\n * @dev This library provides a set of error codes as string constants for handling exceptions and revert messages in the library.\\n */\\nlibrary Errors {\\n    /**\\n     * @dev Error code indicating that there is not enough free liquidity available in liquidity pool when open a new poisition.\\n     */\\n    string constant NOT_ENOUGH_FREE_LIQUIDITY = \\\"NEFL\\\";\\n\\n    /**\\n     * @dev Error code indicating that the specified amount is too small when add liquidity to each bin.\\n     */\\n    string constant TOO_SMALL_AMOUNT = \\\"TSA\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided oracle version is invalid or unsupported.\\n     */\\n    string constant INVALID_ORACLE_VERSION = \\\"IOV\\\";\\n\\n    /**\\n     * @dev Error code indicating that the specified value exceeds the allowed margin range when claim a position.\\n     */\\n    string constant EXCEED_MARGIN_RANGE = \\\"IOV\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided trading fee rate is not supported.\\n     */\\n    string constant UNSUPPORTED_TRADING_FEE_RATE = \\\"UTFR\\\";\\n\\n    /**\\n     * @dev Error code indicating that the oracle provider is already registered.\\n     */\\n    string constant ALREADY_REGISTERED_ORACLE_PROVIDER = \\\"ARO\\\";\\n\\n    /**\\n     * @dev Error code indicating that the settlement token is already registered.\\n     */\\n    string constant ALREADY_REGISTERED_TOKEN = \\\"ART\\\";\\n\\n    /**\\n     * @dev Error code indicating that the settlement token is not registered.\\n     */\\n    string constant UNREGISTERED_TOKEN = \\\"URT\\\";\\n\\n    /**\\n     * @dev Error code indicating that the interest rate has not been initialized.\\n     */\\n    string constant INTEREST_RATE_NOT_INITIALIZED = \\\"IRNI\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided interest rate exceeds the maximum allowed rate.\\n     */\\n    string constant INTEREST_RATE_OVERFLOW = \\\"IROF\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided timestamp for an interest rate is in the past.\\n     */\\n    string constant INTEREST_RATE_PAST_TIMESTAMP = \\\"IRPT\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided interest rate record cannot be appended to the existing array.\\n     */\\n    string constant INTEREST_RATE_NOT_APPENDABLE = \\\"IRNA\\\";\\n\\n    /**\\n     * @dev Error code indicating that an interest rate has already been applied and cannot be modified further.\\n     */\\n    string constant INTEREST_RATE_ALREADY_APPLIED = \\\"IRAA\\\";\\n\\n    /**\\n     * @dev Error code indicating that the position is unsettled.\\n     */\\n    string constant UNSETTLED_POSITION = \\\"USP\\\";\\n\\n    /**\\n     * @dev Error code indicating that the position quantity is invalid.\\n     */\\n    string constant INVALID_POSITION_QTY = \\\"IPQ\\\";\\n\\n    /**\\n     * @dev Error code indicating that the oracle price is not positive.\\n     */\\n    string constant NOT_POSITIVE_PRICE = \\\"NPP\\\";\\n}\\n\",\"keccak256\":\"0x2243516d87f4b064250fa810fef1caaf62544e651556c3d5326ea2f7406d1787\",\"license\":\"BUSL-1.1\"},\"@chromatic-protocol/contracts/core/libraries/InterestRate.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {BPS} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title InterestRate\\n * @notice Provides functions for managing interest rates.\\n * @dev The library allows for the initialization, appending, and removal of interest rate records,\\n *      as well as calculating interest based on these records.\\n */\\nlibrary InterestRate {\\n    using Math for uint256;\\n\\n    /**\\n     * @dev Record type\\n     * @param annualRateBPS Annual interest rate in BPS\\n     * @param beginTimestamp Timestamp when the interest rate becomes effective\\n     */\\n    struct Record {\\n        uint256 annualRateBPS;\\n        uint256 beginTimestamp;\\n    }\\n\\n    uint256 private constant MAX_RATE_BPS = BPS; // max interest rate is 100%\\n    uint256 private constant YEAR = 365 * 24 * 3600;\\n\\n    /**\\n     * @dev Ensure that the interest rate records have been initialized before certain functions can be called.\\n     *      It checks whether the length of the Record array is greater than 0.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty (it indicates that the interest rate has not been initialized).\\n     */\\n    modifier initialized(Record[] storage self) {\\n        require(self.length != 0, Errors.INTEREST_RATE_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the interest rate records.\\n     * @param self The stored record array\\n     * @param initialInterestRate The initial interest rate\\n     */\\n    function initialize(Record[] storage self, uint256 initialInterestRate) internal {\\n        self.push(Record({annualRateBPS: initialInterestRate, beginTimestamp: 0}));\\n    }\\n\\n    /**\\n     * @notice Add a new interest rate record to the array.\\n     * @dev Annual rate is not greater than the maximum rate and that the begin timestamp is in the future,\\n     *      and the new record's begin timestamp is greater than the previous record's timestamp.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_OVERFLOW` if the rate exceed the maximum allowed rate (100%).\\n     *      Throws an error with the code `Errors.INTEREST_RATE_PAST_TIMESTAMP` if the timestamp is in the past, ensuring that the interest rate period has not already started.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_APPENDABLE` if the timestamp is greater than the last recorded timestamp, ensuring that the new record is appended in chronological order.\\n     * @param self The stored record array\\n     * @param annualRateBPS The annual interest rate in BPS\\n     * @param beginTimestamp Begin timestamp of this record\\n     */\\n    function appendRecord(\\n        Record[] storage self,\\n        uint256 annualRateBPS,\\n        uint256 beginTimestamp\\n    ) internal initialized(self) {\\n        require(annualRateBPS <= MAX_RATE_BPS, Errors.INTEREST_RATE_OVERFLOW);\\n        //slither-disable-next-line timestamp\\n        require(beginTimestamp > block.timestamp, Errors.INTEREST_RATE_PAST_TIMESTAMP);\\n\\n        Record memory lastRecord = self[self.length - 1];\\n        require(beginTimestamp > lastRecord.beginTimestamp, Errors.INTEREST_RATE_NOT_APPENDABLE);\\n\\n        self.push(Record({annualRateBPS: annualRateBPS, beginTimestamp: beginTimestamp}));\\n    }\\n\\n    /**\\n     * @notice Remove the last interest rate record from the array.\\n     * @dev The current time must be less than the begin timestamp of the last record.\\n     *      If the array has only one record, it returns false along with an empty record.\\n     *      Otherwise, it removes the last record from the array and returns true along with the removed record.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_ALREADY_APPLIED` if the `beginTimestamp` of the last record is not in the future.\\n     * @param self The stored record array\\n     * @return removed Whether the last record is removed\\n     * @return record The removed record\\n     */\\n    function removeLastRecord(\\n        Record[] storage self\\n    ) internal initialized(self) returns (bool removed, Record memory record) {\\n        if (self.length <= 1) {\\n            // empty\\n            return (false, Record(0, 0));\\n        }\\n\\n        Record memory lastRecord = self[self.length - 1];\\n        //slither-disable-next-line timestamp\\n        require(block.timestamp < lastRecord.beginTimestamp, Errors.INTEREST_RATE_ALREADY_APPLIED);\\n\\n        self.pop();\\n\\n        return (true, lastRecord);\\n    }\\n\\n    /**\\n     * @notice Find the interest rate record that applies to a given timestamp.\\n     * @dev It iterates through the array from the end to the beginning\\n     *      and returns the first record with a begin timestamp less than or equal to the provided timestamp.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     * @param self The stored record array\\n     * @param timestamp Given timestamp\\n     * @return interestRate The record which is found\\n     * @return index The index of record\\n     */\\n    function findRecordAt(\\n        Record[] storage self,\\n        uint256 timestamp\\n    ) internal view initialized(self) returns (Record memory interestRate, uint256 index) {\\n        for (uint256 i = self.length; i != 0; ) {\\n            unchecked {\\n                index = i - 1;\\n            }\\n            interestRate = self[index];\\n\\n            if (interestRate.beginTimestamp <= timestamp) {\\n                return (interestRate, index);\\n            }\\n\\n            unchecked {\\n                i--;\\n            }\\n        }\\n\\n        return (self[0], 0); // empty result (this line is not reachable)\\n    }\\n\\n    /**\\n     * @notice Calculate the interest\\n     * @dev Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     * @param self The stored record array\\n     * @param amount Token amount\\n     * @param from Begin timestamp (inclusive)\\n     * @param to End timestamp (exclusive)\\n     */\\n    function calculateInterest(\\n        Record[] storage self,\\n        uint256 amount,\\n        uint256 from, // timestamp (inclusive)\\n        uint256 to // timestamp (exclusive)\\n    ) internal view initialized(self) returns (uint256) {\\n        if (from >= to) {\\n            return 0;\\n        }\\n\\n        uint256 interest = 0;\\n\\n        uint256 endTimestamp = type(uint256).max;\\n        for (uint256 idx = self.length; idx != 0; ) {\\n            Record memory record = self[idx - 1];\\n            if (endTimestamp <= from) {\\n                break;\\n            }\\n\\n            interest += _interest(\\n                amount,\\n                record.annualRateBPS,\\n                Math.min(to, endTimestamp) - Math.max(from, record.beginTimestamp)\\n            );\\n            endTimestamp = record.beginTimestamp;\\n\\n            unchecked {\\n                idx--;\\n            }\\n        }\\n        return interest;\\n    }\\n\\n    function _interest(\\n        uint256 amount,\\n        uint256 rateBPS, // annual rate\\n        uint256 period // in seconds\\n    ) private pure returns (uint256) {\\n        return amount.mulDiv(rateBPS * period, BPS * YEAR, Math.Rounding.Up);\\n    }\\n}\\n\",\"keccak256\":\"0x1ba597a94b3e70bc851d88e7340609e46e3f56cc971f5969a62c2a1264adab0a\",\"license\":\"BUSL-1.1\"},\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {IInterestCalculator} from \\\"@chromatic-protocol/contracts/core/interfaces/IInterestCalculator.sol\\\";\\nimport {IChromaticVault} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticVault.sol\\\";\\nimport {ICLBToken} from \\\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\\\";\\n\\n/**\\n * @dev Represents the context information required for LP bin operations.\\n * @param oracleProvider The Oracle Provider contract used for price feed\\n * @param interestCalculator The Interest Calculator contract used for interest calculations\\n * @param vault The Chromatic Vault contract responsible for managing liquidity and margin\\n * @param clbToken The CLB token contract that represents LP ownership in the pool\\n * @param market The address of market contract\\n * @param settlementToken The address of the settlement token used in the market\\n * @param tokenPrecision The precision of the settlement token used in the market\\n * @param _currentVersionCache Cached instance of the current oracle version\\n */\\nstruct LpContext {\\n    IOracleProvider oracleProvider;\\n    IInterestCalculator interestCalculator;\\n    IChromaticVault vault;\\n    ICLBToken clbToken;\\n    address market;\\n    address settlementToken;\\n    uint256 tokenPrecision;\\n    IOracleProvider.OracleVersion _currentVersionCache;\\n}\\n\\nusing LpContextLib for LpContext global;\\n\\n/**\\n * @title LpContextLib\\n * @notice Provides functions that operate on the `LpContext` struct\\n */\\nlibrary LpContextLib {\\n    /**\\n     * @notice Syncs the oracle version used by the market.\\n     * @param self The memory instance of `LpContext` struct\\n     */\\n    function syncOracleVersion(LpContext memory self) internal {\\n        self._currentVersionCache = self.oracleProvider.sync();\\n    }\\n\\n    /**\\n     * @notice Retrieves the current oracle version used by the market\\n     * @dev If the `_currentVersionCache` has been initialized, then returns it.\\n     *      If not, it calls the `currentVersion` function on the `oracleProvider of the market\\n     *      to fetch the current version and stores it in the cache,\\n     *      and then returns the current version.\\n     * @param self The memory instance of `LpContext` struct\\n     * @return OracleVersion The current oracle version\\n     */\\n    function currentOracleVersion(\\n        LpContext memory self\\n    ) internal view returns (IOracleProvider.OracleVersion memory) {\\n        if (self._currentVersionCache.version == 0) {\\n            //slither-disable-next-line calls-loop\\n            self._currentVersionCache = self.oracleProvider.currentVersion();\\n        }\\n\\n        return self._currentVersionCache;\\n    }\\n\\n    /**\\n     * @notice Retrieves the oracle version at a specific version number\\n     * @dev If the `_currentVersionCache` matches the requested version, then returns it.\\n     *      Otherwise, it calls the `atVersion` function on the `oracleProvider` of the market\\n     *      to fetch the desired version.\\n     * @param self The memory instance of `LpContext` struct\\n     * @param version The requested version number\\n     * @return OracleVersion The oracle version at the requested version number\\n     */\\n    function oracleVersionAt(\\n        LpContext memory self,\\n        uint256 version\\n    ) internal view returns (IOracleProvider.OracleVersion memory) {\\n        if (self._currentVersionCache.version == version) {\\n            return self._currentVersionCache;\\n        }\\n        return self.oracleProvider.atVersion(version);\\n    }\\n\\n    /**\\n     * @notice Calculates the interest accrued for a given amount of settlement tokens\\n               within a specified time range.\\n     * @dev This function internally calls the `calculateInterest` function on the `interestCalculator` contract.\\n     * @param self The memory instance of the `LpContext` struct.\\n     * @param amount The amount of settlement tokens for which the interest needs to be calculated.\\n     * @param from The starting timestamp of the time range (inclusive).\\n     * @param to The ending timestamp of the time range (exclusive).\\n     * @return The accrued interest as a `uint256` value.\\n     */\\n    function calculateInterest(\\n        LpContext memory self,\\n        uint256 amount,\\n        uint256 from,\\n        uint256 to\\n    ) internal view returns (uint256) {\\n        //slither-disable-next-line calls-loop\\n        return\\n            amount == 0 || from >= to\\n                ? 0\\n                : self.interestCalculator.calculateInterest(self.settlementToken, amount, from, to);\\n    }\\n\\n    /**\\n     * @notice Checks if an oracle version is in the past.\\n     * @param self The memory instance of the `LpContext` struct.\\n     * @param oracleVersion The oracle version to check.\\n     * @return A boolean value indicating whether the oracle version is in the past.\\n     */\\n    function isPastVersion(\\n        LpContext memory self,\\n        uint256 oracleVersion\\n    ) internal view returns (bool) {\\n        return oracleVersion != 0 && oracleVersion < self.currentOracleVersion().version;\\n    }\\n}\\n\",\"keccak256\":\"0x56ff062a6341949cf9ca971571c279b23f843646855699550c6bd0ea85f6e5ec\",\"license\":\"BUSL-1.1\"},\"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {CLBTokenLib} from \\\"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\\\";\\n\\n/**\\n * @dev The LpAction enum represents the types of LP actions that can be performed.\\n */\\nenum LpAction {\\n    ADD_LIQUIDITY,\\n    REMOVE_LIQUIDITY\\n}\\n\\n/**\\n * @dev The LpReceipt struct represents a receipt of an LP action performed.\\n * @param id An identifier for the receipt\\n * @param oracleVersion The oracle version associated with the action\\n * @param amount The amount involved in the action,\\n *        when the action is `ADD_LIQUIDITY`, this value represents the amount of settlement tokens\\n *        when the action is `REMOVE_LIQUIDITY`, this value represents the amount of CLB tokens\\n * @param recipient The address of the recipient of the action\\n * @param action An enumeration representing the type of LP action performed (ADD_LIQUIDITY or REMOVE_LIQUIDITY)\\n * @param tradingFeeRate The trading fee rate associated with the LP action\\n */\\nstruct LpReceipt {\\n    uint256 id;\\n    uint256 oracleVersion;\\n    uint256 amount;\\n    address recipient;\\n    LpAction action;\\n    int16 tradingFeeRate;\\n}\\n\\nusing LpReceiptLib for LpReceipt global;\\n\\n/**\\n * @title LpReceiptLib\\n * @notice Provides functions that operate on the `LpReceipt` struct\\n */\\nlibrary LpReceiptLib {\\n    /**\\n     * @notice Computes the ID of the CLBToken contract based on the trading fee rate.\\n     * @param self The LpReceipt struct.\\n     * @return The ID of the CLBToken contract.\\n     */\\n    function clbTokenId(LpReceipt memory self) internal pure returns (uint256) {\\n        return CLBTokenLib.encodeId(self.tradingFeeRate);\\n    }\\n}\\n\",\"keccak256\":\"0x5c4f467639892f5005338012d3f961edb6d46f15003a0ce12c89a9c40286426b\",\"license\":\"BUSL-1.1\"},\"@chromatic-protocol/contracts/core/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {PositionUtil} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {BinMargin} from \\\"@chromatic-protocol/contracts/core/libraries/BinMargin.sol\\\";\\n\\n/**\\n * @dev The Position struct represents a trading position.\\n * @param id The position identifier\\n * @param openVersion The version of the oracle when the position was opened\\n * @param closeVersion The version of the oracle when the position was closed\\n * @param qty The quantity of the position\\n * @param openTimestamp The timestamp when the position was opened\\n * @param closeTimestamp The timestamp when the position was closed\\n * @param takerMargin The amount of collateral that a trader must provide\\n * @param owner The owner of the position, usually it is the account address of trader\\n * @param _binMargins The bin margins for the position, it represents the amount of collateral for each bin\\n * @param _feeProtocol The protocol fee for the market\\n */\\nstruct Position {\\n    uint256 id;\\n    uint256 openVersion;\\n    uint256 closeVersion;\\n    int256 qty;\\n    uint256 openTimestamp;\\n    uint256 closeTimestamp;\\n    uint256 takerMargin;\\n    address owner;\\n    BinMargin[] _binMargins;\\n    uint8 _feeProtocol;\\n}\\n\\nusing PositionLib for Position global;\\n\\n/**\\n * @title PositionLib\\n * @notice Provides functions that operate on the `Position` struct\\n */\\nlibrary PositionLib {\\n    // using Math for uint256;\\n    // using SafeCast for uint256;\\n    // using SignedMath for int256;\\n\\n    /**\\n     * @notice Calculates the entry price of the position based on the position's open oracle version\\n     * @dev It fetches oracle price from `IOracleProvider`\\n     *      at the settle version calculated based on the position's open oracle version\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return uint256 The entry price\\n     */\\n    function entryPrice(\\n        Position memory self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return PositionUtil.settlePrice(ctx.oracleProvider, self.openVersion);\\n    }\\n\\n    /**\\n     * @notice Calculates the exit price of the position based on the position's close oracle version\\n     * @dev It fetches oracle price from `IOracleProvider`\\n     *      at the settle version calculated based on the position's close oracle version\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return uint256 The exit price\\n     */\\n    function exitPrice(Position memory self, LpContext memory ctx) internal view returns (uint256) {\\n        return PositionUtil.settlePrice(ctx.oracleProvider, self.closeVersion);\\n    }\\n\\n    /**\\n     * @notice Calculates the profit or loss of the position based on the close oracle version and the qty\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return int256 The profit or loss\\n     */\\n    function pnl(Position memory self, LpContext memory ctx) internal view returns (int256) {\\n        return\\n            self.closeVersion > self.openVersion\\n                ? PositionUtil.pnl(self.qty, self.entryPrice(ctx), self.exitPrice(ctx))\\n                : int256(0);\\n    }\\n\\n    /**\\n     * @notice Calculates the total margin required for the makers of the position\\n     * @dev The maker margin is calculated by summing up the amounts of all bin margins\\n     *      in the `_binMargins` array\\n     * @param self The memory instance of the `Position` struct\\n     * @return margin The maker margin\\n     */\\n    function makerMargin(Position memory self) internal pure returns (uint256 margin) {\\n        for (uint256 i; i < self._binMargins.length; ) {\\n            margin += self._binMargins[i].amount;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the total trading fee for the position\\n     * @dev The trading fee is calculated by summing up the trading fees of all bin margins\\n     *      in the `_binMargins` array\\n     * @param self The memory instance of the `Position` struct\\n     * @return fee The trading fee\\n     */\\n    function tradingFee(Position memory self) internal pure returns (uint256 fee) {\\n        for (uint256 i; i < self._binMargins.length; ) {\\n            fee += self._binMargins[i].tradingFee(self._feeProtocol);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the total protocol fee for a position.\\n     * @param self The Position struct representing the position.\\n     * @return fee The total protocol fee amount.\\n     */\\n    function protocolFee(Position memory self) internal pure returns (uint256 fee) {\\n        for (uint256 i; i < self._binMargins.length; ) {\\n            fee += self._binMargins[i].protocolFee(self._feeProtocol);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns an array of BinMargin instances\\n     *         representing the bin margins for the position\\n     * @param self The memory instance of the `Position` struct\\n     * @return margins The bin margins for the position\\n     */\\n    function binMargins(Position memory self) internal pure returns (BinMargin[] memory margins) {\\n        margins = self._binMargins;\\n    }\\n\\n    /**\\n     * @notice Sets the `_binMargins` array for the position\\n     * @param self The memory instance of the `Position` struct\\n     * @param margins The bin margins for the position\\n     */\\n    function setBinMargins(Position memory self, BinMargin[] memory margins) internal pure {\\n        self._binMargins = margins;\\n    }\\n}\\n\",\"keccak256\":\"0xfa0b2e17eaa80a58d912e308a5ec635c854ae47feff1fb40d8ae584dd029e589\",\"license\":\"BUSL-1.1\"},\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {PRICE_PRECISION} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title PositionUtil\\n * @notice Provides utility functions for managing positions\\n */\\nlibrary PositionUtil {\\n    using Math for uint256;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n\\n    /**\\n     * @notice Returns next oracle version to settle\\n     * @dev It adds 1 to the `oracleVersion`\\n     *      and ensures that the `oracleVersion` is greater than 0 using a require statement.\\n     *      Throws an error with the code `Errors.INVALID_ORACLE_VERSION` if the `oracleVersion` is not valid.\\n     * @param oracleVersion Input oracle version\\n     * @return uint256 Next oracle version to settle\\n     */\\n    function settleVersion(uint256 oracleVersion) internal pure returns (uint256) {\\n        require(oracleVersion != 0, Errors.INVALID_ORACLE_VERSION);\\n        return oracleVersion + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates the price of the position based on the `oracleVersion` to settle\\n     * @dev It calls another overloaded `settlePrice` function\\n     *      with an additional `OracleVersion` parameter,\\n     *      passing the `currentVersion` obtained from the `provider`\\n     * @param provider The oracle provider\\n     * @param oracleVersion The oracle version of position\\n     * @return uint256 The calculated price to settle\\n     */\\n    function settlePrice(\\n        IOracleProvider provider,\\n        uint256 oracleVersion\\n    ) internal view returns (uint256) {\\n        return settlePrice(provider, oracleVersion, provider.currentVersion());\\n    }\\n\\n    /**\\n     * @notice Calculates the price of the position based on the `oracleVersion` to settle\\n     * @dev It calculates the price by considering the `settleVersion`\\n     *      and the `currentVersion` obtained from the `IOracleProvider`.\\n     *      It ensures that the settle version is not greater than the current version;\\n     *      otherwise, it triggers an error with the message `Errors.UNSETTLED_POSITION`.\\n     *      It retrieves the corresponding `OracleVersion` using `atVersion` from the `IOracleProvider`,\\n     *      and then calls `oraclePrice` to obtain the price.\\n     * @param provider The oracle provider\\n     * @param oracleVersion The oracle version of position\\n     * @param currentVersion The current oracle version\\n     * @return uint256 The calculated entry price to settle\\n     */\\n    function settlePrice(\\n        IOracleProvider provider,\\n        uint256 oracleVersion,\\n        IOracleProvider.OracleVersion memory currentVersion\\n    ) internal view returns (uint256) {\\n        uint256 _settleVersion = settleVersion(oracleVersion);\\n        require(_settleVersion <= currentVersion.version, Errors.UNSETTLED_POSITION);\\n\\n        //slither-disable-next-line calls-loop\\n        IOracleProvider.OracleVersion memory _oracleVersion = _settleVersion ==\\n            currentVersion.version\\n            ? currentVersion\\n            : provider.atVersion(_settleVersion);\\n        return oraclePrice(_oracleVersion);\\n    }\\n\\n    /**\\n     * @notice Extracts the price value from an `OracleVersion` struct\\n     * @dev If the price is not positive value, it triggers an error with the message `Errors.NOT_POSITIVE_PRICE`.\\n     * @param oracleVersion The memory instance of `OracleVersion` struct\\n     * @return uint256 The price value of `oracleVersion`\\n     */\\n    function oraclePrice(\\n        IOracleProvider.OracleVersion memory oracleVersion\\n    ) internal pure returns (uint256) {\\n        require(oracleVersion.price > 0, Errors.NOT_POSITIVE_PRICE);\\n        return oracleVersion.price.abs();\\n    }\\n\\n    /**\\n     * @notice Calculates the profit or loss (PnL) for a position based on the quantity, entry price, and exit price\\n     * @dev It first calculates the price difference (`delta`) between the exit price and the entry price.\\n     *      If the quantity is negative, indicating short position, it adjusts the `delta` to reflect a negative change.\\n     *      The function then calculates the absolute PnL by multiplying the absolute value of the quantity\\n     *          with the absolute value of the `delta`, divided by the entry price.\\n     *      Finally, if `delta` is negative, indicating a loss, the absolute PnL is negated to represent a negative value.\\n     * @param qty The quantity of the position\\n     * @param _entryPrice The entry price of the position\\n     * @param _exitPrice The exit price of the position\\n     * @return int256 The profit or loss\\n     */\\n    function pnl(\\n        int256 qty, // as token precision\\n        uint256 _entryPrice,\\n        uint256 _exitPrice\\n    ) internal pure returns (int256) {\\n        if (qty == 0 || _entryPrice == _exitPrice) return 0;\\n\\n        int256 delta = _exitPrice > _entryPrice\\n            ? (_exitPrice - _entryPrice).toInt256()\\n            : -(_entryPrice - _exitPrice).toInt256();\\n        if (qty < 0) delta *= -1;\\n\\n        int256 absPnl = qty.abs().mulDiv(delta.abs(), _entryPrice).toInt256();\\n\\n        return delta < 0 ? -absPnl : absPnl;\\n    }\\n\\n    /**\\n     * @notice Verifies the validity of a position quantity added to the bin\\n     * @dev It ensures that the sign of the current quantity of the bin's position\\n     *      and the added quantity are same or zero.\\n     *      If the condition is not met, it triggers an error with the message `Errors.INVALID_POSITION_QTY`.\\n     * @param currentQty The current quantity of the bin's pending position\\n     * @param addedQty The position quantity added\\n     */\\n    function checkAddPositionQty(int256 currentQty, int256 addedQty) internal pure {\\n        require(\\n            !((currentQty > 0 && addedQty <= 0) || (currentQty < 0 && addedQty >= 0)),\\n            Errors.INVALID_POSITION_QTY\\n        );\\n    }\\n\\n    /**\\n     * @notice Verifies the validity of a position quantity removed from the bin\\n     * @dev It ensures that the sign of the current quantity of the bin's position\\n     *      and the removed quantity are same or zero,\\n     *      and the absolute removed quantity is not greater than the absolute current quantity.\\n     *      If the condition is not met, it triggers an error with the message `Errors.INVALID_POSITION_QTY`.\\n     * @param currentQty The current quantity of the bin's position\\n     * @param removeQty The position quantity removed\\n     */\\n    function checkRemovePositionQty(int256 currentQty, int256 removeQty) internal pure {\\n        require(\\n            !((currentQty == 0) ||\\n                (removeQty == 0) ||\\n                (currentQty > 0 && removeQty > currentQty) ||\\n                (currentQty < 0 && removeQty < currentQty)),\\n            Errors.INVALID_POSITION_QTY\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the transaction amount based on the quantity and price\\n     * @param qty The quantity of the position\\n     * @param price The price of the position\\n     * @return uint256 The transaction amount\\n     */\\n    function transactionAmount(int256 qty, uint256 price) internal pure returns (uint256) {\\n        return qty.abs().mulDiv(price, PRICE_PRECISION);\\n    }\\n}\\n\",\"keccak256\":\"0xd65fc99fdb27f0d40c91906514029f9ebc9a658ed45e754266c76151ec6dbefe\",\"license\":\"BUSL-1.1\"},\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IOracleProvider {\\n    /// @dev Error for invalid oracle round\\n    error InvalidOracleRound();\\n\\n    /**\\n     * @dev A singular oracle version with its corresponding data\\n     * @param version The iterative version\\n     * @param timestamp the timestamp of the oracle update\\n     * @param price The oracle price of the corresponding version\\n     */\\n    struct OracleVersion {\\n        uint256 version;\\n        uint256 timestamp;\\n        int256 price;\\n    }\\n\\n    /**\\n     * @notice Checks for a new price and updates the internal phase annotation state accordingly\\n     * @dev `sync` is expected to be called soon after a phase update occurs in the underlying proxy.\\n     *      Phase updates should be detected using off-chain mechanism and should trigger a `sync` call\\n     *      This is feasible in the short term due to how infrequent phase updates are, but phase update\\n     *      and roundCount detection should eventually be implemented at the contract level.\\n     *      Reverts if there is more than 1 phase to update in a single sync because we currently cannot\\n     *      determine the startingRoundId for the intermediary phase.\\n     * @return The current oracle version after sync\\n     */\\n    function sync() external returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Returns the current oracle version\\n     * @return oracleVersion Current oracle version\\n     */\\n    function currentVersion() external view returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Returns the current oracle version\\n     * @param version The version of which to lookup\\n     * @return oracleVersion Oracle version at version `version`\\n     */\\n    function atVersion(uint256 version) external view returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Retrieves the description of the Oracle Provider.\\n     * @return A string representing the description of the Oracle Provider.\\n     */\\n    function description() external view returns (string memory);\\n\\n    /**\\n     * @notice Retrieves the name of the Oracle Provider.\\n     * @return A string representing the name of the Oracle Provider.\\n     */\\n    function oracleProviderName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7578ac3fc7a41e93a3e3d0c8eebebd559a0a34f8464079914e9f4f5cf39e427d\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x10a6688bc4154b1b76268dbaf497bd8b24f77525ecb9cf829bd3cccec98eefc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\",\"keccak256\":\"0x8b4a492c14765d24f935516cb3437a1b39fbd65f20fc8828e7880fb1bdcfba86\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155Receiver.sol\\\";\\n\",\"keccak256\":\"0xdffd96e40500212217d1267d1fa5eb294fe72ce5419638d6801996e0485580b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/lp/base/ChromaticLPStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IChromaticMarket} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarket.sol\\\";\\n\\nimport {ChromaticLPReceipt, ChromaticLPAction} from \\\"~/lp/libraries/ChromaticLPReceipt.sol\\\";\\nimport {IChromaticLPLens, ValueInfo} from \\\"~/lp/interfaces/IChromaticLPLens.sol\\\";\\nimport {IChromaticLPEvents} from \\\"~/lp/interfaces/IChromaticLPEvents.sol\\\";\\nimport {IChromaticLPErrors} from \\\"~/lp/interfaces/IChromaticLPErrors.sol\\\";\\n\\nabstract contract ChromaticLPStorage is\\n    ERC20,\\n    IChromaticLPLens,\\n    IChromaticLPEvents,\\n    IChromaticLPErrors\\n{\\n    using Math for uint256;\\n\\n    uint16 constant BPS = 10000;\\n\\n    struct LPMeta {\\n        string lpName;\\n        string tag;\\n    }\\n\\n    struct Config {\\n        IChromaticMarket market;\\n        uint16 utilizationTargetBPS;\\n        uint16 rebalanceBPS;\\n        uint256 rebalanceCheckingInterval;\\n        uint256 settleCheckingInterval;\\n    }\\n\\n    struct State {\\n        int16[] feeRates;\\n        mapping(int16 => uint16) distributionRates;\\n        uint256[] clbTokenIds;\\n        mapping(uint256 => ChromaticLPReceipt) receipts; // receiptId => receipt\\n        mapping(uint256 => EnumerableSet.UintSet) lpReceiptMap; // receiptId => lpReceiptIds\\n        mapping(uint256 => address) providerMap; // receiptId => provider\\n        mapping(address => EnumerableSet.UintSet) providerReceiptIds; // provider => receiptIds\\n        uint256 pendingAddAmount; // in settlement token\\n        mapping(int16 => uint256) pendingRemoveClbAmounts; // feeRate => pending remove\\n        uint256 receiptId;\\n    }\\n\\n    LPMeta internal s_meta;\\n    Config internal s_config;\\n    State internal s_state;\\n\\n    constructor() ERC20(\\\"\\\", \\\"\\\") {}\\n\\n    function utilization() public view override returns (uint16 currentUtility) {\\n        ValueInfo memory value = valueInfo();\\n        if (value.total == 0) return 0;\\n        currentUtility = uint16(\\n            uint256(value.total - (value.holding + value.pendingClb)).mulDiv(BPS, value.total)\\n        );\\n    }\\n\\n    function totalValue() public view override returns (uint256 value) {\\n        value = (holdingValue() + pendingValue() + totalClbValue());\\n    }\\n\\n    function valueInfo() public view override returns (ValueInfo memory info) {\\n        info = ValueInfo({\\n            total: 0,\\n            holding: holdingValue(),\\n            pending: pendingValue(),\\n            holdingClb: holdingClbValue(),\\n            pendingClb: pendingClbValue()\\n        });\\n        info.total = info.holding + info.pending + info.holdingClb + info.pendingClb;\\n    }\\n\\n    function holdingValue() public view override returns (uint256) {\\n        return IERC20(s_config.market.settlementToken()).balanceOf(address(this));\\n    }\\n\\n    function pendingValue() public view override returns (uint256) {\\n        return s_state.pendingAddAmount;\\n    }\\n\\n    function holdingClbValue() public view override returns (uint256 value) {\\n        uint256[] memory clbSupplies = s_config.market.clbToken().totalSupplyBatch(\\n            s_state.clbTokenIds\\n        );\\n        uint256[] memory binValues = s_config.market.getBinValues(s_state.feeRates);\\n        uint256[] memory clbTokenAmounts = clbTokenBalances();\\n        for (uint256 i; i < binValues.length; ) {\\n            uint256 clbAmount = clbTokenAmounts[i];\\n            value += clbAmount == 0 ? 0 : clbAmount.mulDiv(binValues[i], clbSupplies[i]);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function pendingClbValue() public view override returns (uint256 value) {\\n        uint256[] memory clbSupplies = s_config.market.clbToken().totalSupplyBatch(\\n            s_state.clbTokenIds\\n        );\\n        uint256[] memory binValues = s_config.market.getBinValues(s_state.feeRates);\\n        for (uint256 i; i < binValues.length; ) {\\n            uint256 clbAmount = s_state.pendingRemoveClbAmounts[s_state.feeRates[i]];\\n            value += clbAmount == 0 ? 0 : clbAmount.mulDiv(binValues[i], clbSupplies[i]);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function totalClbValue() public view override returns (uint256 value) {\\n        uint256[] memory clbSupplies = s_config.market.clbToken().totalSupplyBatch(\\n            s_state.clbTokenIds\\n        );\\n        uint256[] memory binValues = s_config.market.getBinValues(s_state.feeRates);\\n        uint256[] memory clbTokenAmounts = clbTokenBalances();\\n        for (uint256 i; i < binValues.length; ) {\\n            uint256 clbAmount = clbTokenAmounts[i] +\\n                s_state.pendingRemoveClbAmounts[s_state.feeRates[i]];\\n            value += clbAmount == 0 ? 0 : clbAmount.mulDiv(binValues[i], clbSupplies[i]);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function feeRates() external view override returns (int16[] memory) {\\n        return s_state.feeRates;\\n    }\\n\\n    function clbTokenIds() external view override returns (uint256[] memory) {\\n        return s_state.clbTokenIds;\\n    }\\n\\n    function clbTokenBalances() public view override returns (uint256[] memory _clbTokenBalances) {\\n        address[] memory _owners = new address[](s_state.feeRates.length);\\n        for (uint256 i; i < s_state.feeRates.length; ) {\\n            _owners[i] = address(this);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        _clbTokenBalances = IERC1155(s_config.market.clbToken()).balanceOfBatch(\\n            _owners,\\n            s_state.clbTokenIds\\n        );\\n    }\\n\\n    function _getFeeInfo() internal view virtual returns (uint256 fee, address feePayee);\\n}\\n\",\"keccak256\":\"0x17684b1b9c0c1470a843286b7eebb3343ac5a6d8bbea0610af88bd32cd8ce62e\",\"license\":\"MIT\"},\"contracts/lp/base/gelato/ChromaticLPBaseGelato.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {CLBTokenLib} from \\\"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\n\\nimport {ChromaticLPReceipt, ChromaticLPAction} from \\\"~/lp/libraries/ChromaticLPReceipt.sol\\\";\\nimport {ChromaticLPStorageGelato} from \\\"~/lp/base/gelato/ChromaticLPStorageGelato.sol\\\";\\nimport {ValueInfo} from \\\"~/lp/interfaces/IChromaticLPLens.sol\\\";\\nimport {TrimAddress} from \\\"~/lp/libraries/TrimAddress.sol\\\";\\n\\nabstract contract ChromaticLPBaseGelato is ChromaticLPStorageGelato {\\n    using Math for uint256;\\n\\n    address _owner;\\n    modifier onlyOwner() virtual {\\n        if (msg.sender != _owner) revert OnlyAccessableByOwner();\\n        _;\\n    }\\n\\n    constructor(AutomateParam memory automateParam) ChromaticLPStorageGelato(automateParam) {\\n        _owner = msg.sender;\\n    }\\n\\n    function _initialize(\\n        LPMeta memory meta,\\n        Config memory config,\\n        int16[] memory _feeRates,\\n        uint16[] memory distributionRates\\n    ) internal {\\n        _validateConfig(\\n            config.utilizationTargetBPS,\\n            config.rebalanceBPS,\\n            _feeRates,\\n            distributionRates\\n        );\\n        s_meta = LPMeta({lpName: meta.lpName, tag: meta.tag});\\n        s_config = Config({\\n            market: config.market,\\n            utilizationTargetBPS: config.utilizationTargetBPS,\\n            rebalanceBPS: config.rebalanceBPS,\\n            rebalanceCheckingInterval: config.rebalanceCheckingInterval,\\n            settleCheckingInterval: config.settleCheckingInterval\\n        });\\n        _setupState(_feeRates, distributionRates);\\n    }\\n\\n    function _validateConfig(\\n        uint16 utilizationTargetBPS,\\n        uint16 rebalanceBPS,\\n        int16[] memory _feeRates,\\n        uint16[] memory distributionRates\\n    ) private pure {\\n        if (utilizationTargetBPS > BPS) revert InvalidUtilizationTarget(utilizationTargetBPS);\\n        if (_feeRates.length != distributionRates.length)\\n            revert NotMatchDistributionLength(_feeRates.length, distributionRates.length);\\n\\n        if (utilizationTargetBPS <= rebalanceBPS) revert InvalidRebalanceBPS();\\n    }\\n\\n    function _setupState(int16[] memory _feeRates, uint16[] memory distributionRates) private {\\n        uint16 totalRate;\\n        for (uint256 i; i < distributionRates.length; ) {\\n            s_state.distributionRates[_feeRates[i]] = distributionRates[i];\\n            totalRate += distributionRates[i];\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        if (totalRate != BPS) revert InvalidDistributionSum();\\n        s_state.feeRates = _feeRates;\\n\\n        _setupClbTokenIds(_feeRates);\\n    }\\n\\n    function _setupClbTokenIds(int16[] memory _feeRates) private {\\n        s_state.clbTokenIds = new uint256[](_feeRates.length);\\n        for (uint256 i; i < _feeRates.length; ) {\\n            s_state.clbTokenIds[i] = CLBTokenLib.encodeId(_feeRates[i]);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ERC20\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return string(abi.encodePacked(\\\"ChromaticLP - \\\", _tokenSymbol(), \\\" - \\\", _indexName()));\\n    }\\n\\n    /**\\n     * @inheritdoc ERC20\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"CLP-\\\",\\n                    TrimAddress.trimAddress(address(s_config.market), 4),\\n                    \\\"-\\\",\\n                    bytes(s_meta.tag)[0]\\n                )\\n            );\\n    }\\n\\n    function _tokenSymbol() internal view returns (string memory) {\\n        return s_config.market.settlementToken().symbol();\\n    }\\n\\n    function _indexName() internal view returns (string memory) {\\n        return s_config.market.oracleProvider().description();\\n    }\\n\\n    function _resolveRebalance(\\n        function() external _rebalance\\n    ) internal view returns (bool, bytes memory) {\\n        ValueInfo memory value = valueInfo();\\n\\n        if (value.total == 0) return (false, bytes(\\\"\\\"));\\n\\n        uint256 currentUtility = (value.holdingClb + value.pending - value.pendingClb).mulDiv(\\n            BPS,\\n            value.total\\n        );\\n\\n        if (uint256(s_config.utilizationTargetBPS + s_config.rebalanceBPS) < currentUtility) {\\n            return (true, abi.encodeCall(_rebalance, ()));\\n        } else if (\\n            uint256(s_config.utilizationTargetBPS - s_config.rebalanceBPS) > currentUtility\\n        ) {\\n            return (true, abi.encodeCall(_rebalance, ()));\\n        }\\n        return (false, bytes(\\\"\\\"));\\n    }\\n\\n    function _resolveSettle(\\n        uint256 receiptId,\\n        function(uint256) external settleTask\\n    ) internal view returns (bool, bytes memory) {\\n        IOracleProvider.OracleVersion memory currentOracle = s_config\\n            .market\\n            .oracleProvider()\\n            .currentVersion();\\n\\n        ChromaticLPReceipt memory receipt = s_state.receipts[receiptId];\\n        if (receipt.id > 0 && receipt.oracleVersion < currentOracle.version) {\\n            return (true, abi.encodeCall(settleTask, (receiptId)));\\n        }\\n\\n        // for pending add/remove by user and by self\\n        return (false, bytes(\\\"\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0x6b9947ba88178468deba89ca5c3d1ab030957f96ecd835cdcc8c6e5c0338616c\",\"license\":\"MIT\"},\"contracts/lp/base/gelato/ChromaticLPLogicBaseGelato.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/interfaces/IERC1155Receiver.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IChromaticMarket} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarket.sol\\\";\\nimport {IChromaticLiquidityCallback} from \\\"@chromatic-protocol/contracts/core/interfaces/callback/IChromaticLiquidityCallback.sol\\\";\\nimport {LpReceipt} from \\\"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\\\";\\nimport {CLBTokenLib} from \\\"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\\\";\\nimport {IAutomate, Module, ModuleData} from \\\"@chromatic-protocol/contracts/core/automation/gelato/Types.sol\\\";\\nimport {AutomateReady} from \\\"@chromatic-protocol/contracts/core/automation/gelato/AutomateReady.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {IChromaticMarketFactory} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarketFactory.sol\\\";\\nimport {IKeeperFeePayer} from \\\"@chromatic-protocol/contracts/core/interfaces/IKeeperFeePayer.sol\\\";\\n\\nimport {IChromaticLP} from \\\"~/lp/interfaces/IChromaticLP.sol\\\";\\nimport {ChromaticLPReceipt, ChromaticLPAction} from \\\"~/lp/libraries/ChromaticLPReceipt.sol\\\";\\nimport {ChromaticLPStorageGelato} from \\\"~/lp/base/gelato/ChromaticLPStorageGelato.sol\\\";\\nimport {ValueInfo} from \\\"~/lp/interfaces/IChromaticLPLens.sol\\\";\\n\\nabstract contract ChromaticLPLogicBaseGelato is ChromaticLPStorageGelato {\\n    using Math for uint256;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct AddLiquidityBatchCallbackData {\\n        address provider;\\n        uint256 liquidityAmount;\\n        uint256 holdingAmount;\\n    }\\n\\n    struct RemoveLiquidityBatchCallbackData {\\n        address provider;\\n        uint256 lpTokenAmount;\\n        uint256[] clbTokenAmounts;\\n    }\\n\\n    modifier verifyCallback() virtual {\\n        if (address(s_config.market) != msg.sender) revert NotMarket();\\n        _;\\n    }\\n    modifier onlyAutomation() virtual {\\n        if (msg.sender != dedicatedMsgSender) revert NotAutomationCalled();\\n        _;\\n    }\\n\\n    constructor(AutomateParam memory automateParam) ChromaticLPStorageGelato(automateParam) {}\\n\\n    function nextReceiptId() internal returns (uint256 id) {\\n        id = ++s_state.receiptId;\\n    }\\n\\n    function cancelRebalanceTask() external {\\n        if (s_task.rebalanceTaskId != 0) {\\n            automate.cancelTask(s_task.rebalanceTaskId);\\n            s_task.rebalanceTaskId = 0;\\n        }\\n    }\\n\\n    function createSettleTask(uint256 receiptId) internal {\\n        if (s_task.settleTasks[receiptId] == 0) {\\n            s_task.settleTasks[receiptId] = _createTask(\\n                abi.encodeCall(this.resolveSettle, (receiptId)),\\n                abi.encodeCall(this.settleTask, (receiptId)),\\n                s_config.settleCheckingInterval\\n            );\\n        }\\n    }\\n\\n    function cancelSettleTask(uint256 receiptId) internal {\\n        if (s_task.settleTasks[receiptId] != 0) {\\n            automate.cancelTask(s_task.settleTasks[receiptId]);\\n            delete s_task.settleTasks[receiptId];\\n        }\\n    }\\n\\n    function settleTask(uint256 receiptId) external onlyAutomation {\\n        if (s_task.settleTasks[receiptId] != 0) {\\n            uint256 feeMax = _getMaxPayableFeeInSettlement(receiptId);\\n            if (_settle(receiptId)) {\\n                _payKeeperFee(feeMax);\\n            }\\n        } // TODO else revert\\n    }\\n\\n    function _getMaxPayableFeeInSettlement(\\n        uint256 receiptId\\n    ) internal view returns (uint256 maxFee) {\\n        ChromaticLPReceipt memory receipt = s_state.receipts[receiptId];\\n        if (receipt.action == ChromaticLPAction.ADD_LIQUIDITY) {\\n            maxFee = receipt.amount - receipt.amount.mulDiv(s_config.utilizationTargetBPS, BPS);\\n        } else {\\n            uint256 balance = IERC20(s_config.market.settlementToken()).balanceOf(address(this));\\n            maxFee = balance.mulDiv(receipt.amount, totalSupply());\\n        }\\n    }\\n\\n    function _payKeeperFee(uint256 maxFeeInSettlementToken) internal virtual {\\n        (uint256 fee, address feePayee) = _getFeeInfo();\\n        IKeeperFeePayer payer = IKeeperFeePayer(s_config.market.factory().keeperFeePayer());\\n\\n        address token = address(s_config.market.settlementToken());\\n        SafeERC20.safeTransfer(IERC20(token), address(payer), maxFeeInSettlementToken);\\n\\n        payer.payKeeperFee(address(s_config.market.settlementToken()), fee, feePayee);\\n    }\\n\\n    function _settle(uint256 receiptId) internal returns (bool) {\\n        ChromaticLPReceipt memory receipt = s_state.receipts[receiptId];\\n        IOracleProvider.OracleVersion memory currentOracle = s_config\\n            .market\\n            .oracleProvider()\\n            .currentVersion();\\n        // TODO check receipt\\n        if (receipt.oracleVersion < currentOracle.version) {\\n            if (receipt.action == ChromaticLPAction.ADD_LIQUIDITY) {\\n                _settleAddLiquidity(receipt);\\n            } else if (receipt.action == ChromaticLPAction.REMOVE_LIQUIDITY) {\\n                _settleRemoveLiquidity(receipt);\\n            } else {\\n                revert UnknownLPAction();\\n            }\\n            // finally remove settle task\\n            cancelSettleTask(receiptId);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _settleAddLiquidity(ChromaticLPReceipt memory receipt) internal {\\n        // pass ChromaticLPReceipt as calldata\\n        // mint and transfer lp pool token to provider in callback\\n        s_config.market.claimLiquidityBatch(\\n            s_state.lpReceiptMap[receipt.id].values(),\\n            abi.encode(receipt)\\n        );\\n\\n        _removeReceipt(receipt.id);\\n    }\\n\\n    function _settleRemoveLiquidity(ChromaticLPReceipt memory receipt) internal {\\n        // do claim\\n        // pass ChromaticLPReceipt as calldata\\n        s_config.market.withdrawLiquidityBatch(\\n            s_state.lpReceiptMap[receipt.id].values(),\\n            abi.encode(receipt)\\n        );\\n\\n        _removeReceipt(receipt.id);\\n    }\\n\\n    function _distributeAmount(\\n        uint256 amount\\n    ) internal view returns (uint256[] memory amounts, uint256 totalAmount) {\\n        amounts = new uint256[](s_state.feeRates.length);\\n        for (uint256 i = 0; i < s_state.feeRates.length; ) {\\n            uint256 _amount = amount.mulDiv(s_state.distributionRates[s_state.feeRates[i]], BPS);\\n\\n            amounts[i] = _amount;\\n            totalAmount += _amount;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function _addReceipt(\\n        ChromaticLPReceipt memory receipt,\\n        LpReceipt[] memory lpReceipts\\n    ) internal {\\n        s_state.receipts[receipt.id] = receipt;\\n        EnumerableSet.UintSet storage lpReceiptIdSet = s_state.lpReceiptMap[receipt.id];\\n        for (uint256 i; i < lpReceipts.length; ) {\\n            lpReceiptIdSet.add(lpReceipts[i].id);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        s_state.providerMap[receipt.id] = msg.sender;\\n        EnumerableSet.UintSet storage receiptIdSet = s_state.providerReceiptIds[msg.sender];\\n        receiptIdSet.add(receipt.id);\\n    }\\n\\n    function _removeReceipt(uint256 receiptId) internal {\\n        delete s_state.receipts[receiptId];\\n        delete s_state.lpReceiptMap[receiptId];\\n\\n        address provider = s_state.providerMap[receiptId];\\n        EnumerableSet.UintSet storage receiptIdSet = s_state.providerReceiptIds[provider];\\n        receiptIdSet.remove(receiptId);\\n        delete s_state.providerMap[receiptId];\\n    }\\n\\n    function _calcRemoveClbAmounts(\\n        uint256 lpTokenAmount\\n    ) internal view returns (uint256[] memory clbTokenAmounts) {\\n        address[] memory _owners = new address[](s_state.feeRates.length);\\n        for (uint256 i; i < s_state.feeRates.length; ) {\\n            _owners[i] = address(this);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        uint256[] memory _clbTokenBalances = IERC1155(s_config.market.clbToken()).balanceOfBatch(\\n            _owners,\\n            s_state.clbTokenIds\\n        );\\n\\n        clbTokenAmounts = new uint256[](_clbTokenBalances.length);\\n        for (uint256 i; i < _clbTokenBalances.length; ) {\\n            clbTokenAmounts[i] = _clbTokenBalances[i].mulDiv(\\n                lpTokenAmount,\\n                totalSupply(),\\n                Math.Rounding.Up\\n            );\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function _increasePendingClb(LpReceipt[] memory lpReceipts) internal {\\n        for (uint256 i; i < lpReceipts.length; ) {\\n            s_state.pendingRemoveClbAmounts[lpReceipts[i].tradingFeeRate] += lpReceipts[i].amount;\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function _decreasePendingClb(\\n        int16[] calldata _feeRates,\\n        uint256[] calldata burnedCLBTokenAmounts\\n    ) internal {\\n        for (uint256 i; i < _feeRates.length; ) {\\n            s_state.pendingRemoveClbAmounts[_feeRates[i]] -= burnedCLBTokenAmounts[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function resolveRebalance() external view virtual returns (bool, bytes memory) {\\n        revert NotImplementedInLogicContract();\\n    }\\n\\n    function resolveSettle(uint256 receiptId) external view virtual returns (bool, bytes memory) {\\n        revert NotImplementedInLogicContract();\\n    }\\n\\n    function rebalance() external virtual {}\\n\\n    function _addLiquidity(\\n        uint256 amount,\\n        address recipient\\n    ) internal returns (ChromaticLPReceipt memory receipt) {\\n        (uint256[] memory amounts, uint256 liquidityAmount) = _distributeAmount(\\n            amount.mulDiv(s_config.utilizationTargetBPS, BPS)\\n        );\\n\\n        LpReceipt[] memory lpReceipts = s_config.market.addLiquidityBatch(\\n            address(this),\\n            s_state.feeRates,\\n            amounts,\\n            abi.encode(\\n                AddLiquidityBatchCallbackData({\\n                    provider: msg.sender,\\n                    liquidityAmount: liquidityAmount,\\n                    holdingAmount: amount - liquidityAmount\\n                })\\n            )\\n        );\\n\\n        receipt = ChromaticLPReceipt({\\n            id: nextReceiptId(),\\n            oracleVersion: lpReceipts[0].oracleVersion,\\n            amount: amount,\\n            pendingLiquidity: liquidityAmount,\\n            recipient: recipient,\\n            action: ChromaticLPAction.ADD_LIQUIDITY\\n        });\\n\\n        _addReceipt(receipt, lpReceipts);\\n        s_state.pendingAddAmount += liquidityAmount;\\n\\n        createSettleTask(receipt.id);\\n    }\\n\\n    function _removeLiquidity(\\n        uint256[] memory clbTokenAmounts,\\n        uint256 lpTokenAmount,\\n        address recipient\\n    ) internal returns (ChromaticLPReceipt memory receipt) {\\n        LpReceipt[] memory lpReceipts = s_config.market.removeLiquidityBatch(\\n            address(this),\\n            s_state.feeRates,\\n            clbTokenAmounts,\\n            abi.encode(\\n                RemoveLiquidityBatchCallbackData({\\n                    provider: msg.sender,\\n                    lpTokenAmount: lpTokenAmount,\\n                    clbTokenAmounts: clbTokenAmounts\\n                })\\n            )\\n        );\\n\\n        receipt = ChromaticLPReceipt({\\n            id: nextReceiptId(),\\n            oracleVersion: lpReceipts[0].oracleVersion,\\n            amount: lpTokenAmount,\\n            pendingLiquidity: 0,\\n            recipient: recipient,\\n            action: ChromaticLPAction.REMOVE_LIQUIDITY\\n        });\\n\\n        _addReceipt(receipt, lpReceipts);\\n        _increasePendingClb(lpReceipts);\\n        createSettleTask(receipt.id);\\n    }\\n\\n    /**\\n     * @dev implementation of IChromaticLiquidityCallback\\n     */\\n    function addLiquidityBatchCallback(\\n        address settlementToken,\\n        address vault,\\n        bytes calldata data\\n    ) external verifyCallback {\\n        AddLiquidityBatchCallbackData memory callbackData = abi.decode(\\n            data,\\n            (AddLiquidityBatchCallbackData)\\n        );\\n        //slither-disable-next-line arbitrary-send-erc20\\n        SafeERC20.safeTransferFrom(\\n            IERC20(settlementToken),\\n            callbackData.provider,\\n            vault,\\n            callbackData.liquidityAmount\\n        );\\n\\n        if (callbackData.provider != address(this)) {\\n            SafeERC20.safeTransferFrom(\\n                IERC20(settlementToken),\\n                callbackData.provider,\\n                address(this),\\n                callbackData.holdingAmount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev implementation of IChromaticLiquidityCallback\\n     */\\n    function claimLiquidityBatchCallback(\\n        uint256[] calldata /* receiptIds */,\\n        int16[] calldata /* feeRates */,\\n        uint256[] calldata /* depositedAmounts */,\\n        uint256[] calldata /* mintedCLBTokenAmounts */,\\n        bytes calldata data\\n    ) external verifyCallback {\\n        ChromaticLPReceipt memory receipt = abi.decode(data, (ChromaticLPReceipt));\\n        s_state.pendingAddAmount -= receipt.pendingLiquidity;\\n\\n        if (receipt.recipient != address(this)) {\\n            uint256 total = totalValue();\\n\\n            uint256 lpTokenMint = totalSupply() == 0\\n                ? receipt.amount\\n                : receipt.amount.mulDiv(totalSupply(), total - receipt.amount);\\n            _mint(receipt.recipient, lpTokenMint);\\n            emit AddLiquiditySettled({\\n                receiptId: receipt.id,\\n                settlementAdded: receipt.amount,\\n                lpTokenAmount: lpTokenMint\\n            });\\n        } else {\\n            emit RebalanceSettled({receiptId: receipt.id});\\n        }\\n    }\\n\\n    /**\\n     * @dev implementation of IChromaticLiquidityCallback\\n     */\\n    function removeLiquidityBatchCallback(\\n        address clbToken,\\n        uint256[] calldata _clbTokenIds,\\n        bytes calldata data\\n    ) external {\\n        RemoveLiquidityBatchCallbackData memory callbackData = abi.decode(\\n            data,\\n            (RemoveLiquidityBatchCallbackData)\\n        );\\n        IERC1155(clbToken).safeBatchTransferFrom(\\n            address(this),\\n            msg.sender, // market\\n            _clbTokenIds,\\n            callbackData.clbTokenAmounts,\\n            bytes(\\\"\\\")\\n        );\\n\\n        if (callbackData.provider != address(this)) {\\n            SafeERC20.safeTransferFrom(\\n                IERC20(this),\\n                callbackData.provider,\\n                address(this),\\n                callbackData.lpTokenAmount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev implementation of IChromaticLiquidityCallback\\n     */\\n    function withdrawLiquidityBatchCallback(\\n        uint256[] calldata receiptIds,\\n        int16[] calldata _feeRates,\\n        uint256[] calldata withdrawnAmounts,\\n        uint256[] calldata burnedCLBTokenAmounts,\\n        bytes calldata data\\n    ) external verifyCallback {\\n        ChromaticLPReceipt memory receipt = abi.decode(data, (ChromaticLPReceipt));\\n\\n        _decreasePendingClb(_feeRates, burnedCLBTokenAmounts);\\n        // burn and transfer settlementToken\\n\\n        if (receipt.recipient != address(this)) {\\n            uint256 value = totalValue();\\n\\n            uint256 withdrawnAmount;\\n            for (uint256 i; i < receiptIds.length; ) {\\n                withdrawnAmount += withdrawnAmounts[i];\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n            // (tokenBalance - withdrawn) * (burningLP /totalSupplyLP) + withdrawn\\n            uint256 balance = IERC20(s_config.market.settlementToken()).balanceOf(address(this));\\n            uint256 withdrawAmount = (balance - withdrawnAmount).mulDiv(\\n                receipt.amount,\\n                totalSupply()\\n            ) + withdrawnAmount;\\n\\n            SafeERC20.safeTransfer(\\n                s_config.market.settlementToken(),\\n                receipt.recipient,\\n                withdrawAmount\\n            );\\n            // burningLP: withdrawAmount = totalSupply: totalValue\\n            // burningLP = withdrawAmount * totalSupply / totalValue\\n            // burn LPToken requested\\n            uint256 burningAmount = withdrawAmount.mulDiv(totalSupply(), value);\\n            _burn(address(this), burningAmount);\\n\\n            // transfer left lpTokens\\n            uint256 remainingAmount = receipt.amount - burningAmount;\\n            if (remainingAmount > 0) {\\n                SafeERC20.safeTransfer(IERC20(this), receipt.recipient, remainingAmount);\\n            }\\n\\n            emit RemoveLiquiditySettled({\\n                receiptId: receipt.id,\\n                burningAmount: burningAmount,\\n                witdrawnSettlementAmount: withdrawAmount,\\n                refundedAmount: remainingAmount\\n            });\\n        } else {\\n            emit RebalanceSettled({receiptId: receipt.id});\\n        }\\n    }\\n\\n    function _rebalance() internal returns (uint256) {\\n        // (uint256 total, uint256 clbValue, ) = _poolValue();\\n        ValueInfo memory value = valueInfo();\\n\\n        if (value.total == 0) return 0;\\n\\n        uint256 currentUtility = (value.holdingClb + value.pending - value.pendingClb).mulDiv(\\n            BPS,\\n            value.total\\n        );\\n        if (uint256(s_config.utilizationTargetBPS + s_config.rebalanceBPS) < currentUtility) {\\n            uint256[] memory _clbTokenBalances = clbTokenBalances();\\n            uint256[] memory clbTokenAmounts = new uint256[](s_state.feeRates.length);\\n            for (uint256 i; i < s_state.feeRates.length; i++) {\\n                clbTokenAmounts[i] = _clbTokenBalances[i].mulDiv(\\n                    s_config.rebalanceBPS,\\n                    currentUtility\\n                );\\n            }\\n            ChromaticLPReceipt memory receipt = _removeLiquidity(clbTokenAmounts, 0, address(this));\\n            return receipt.id;\\n        } else if (\\n            uint256(s_config.utilizationTargetBPS - s_config.rebalanceBPS) > currentUtility\\n        ) {\\n            ChromaticLPReceipt memory receipt = _addLiquidity(\\n                (value.total).mulDiv(s_config.rebalanceBPS, BPS),\\n                address(this)\\n            );\\n            return receipt.id;\\n        }\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xe5cae8936847861d991b7529b38cf158c46af54831945052fa143c9c58b36530\",\"license\":\"MIT\"},\"contracts/lp/base/gelato/ChromaticLPStorageGelato.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ChromaticLPStorage} from \\\"~/lp/base/ChromaticLPStorage.sol\\\";\\nimport {AutomateReady} from \\\"@chromatic-protocol/contracts/core/automation/gelato/AutomateReady.sol\\\";\\nimport {IAutomate, Module, ModuleData} from \\\"@chromatic-protocol/contracts/core/automation/gelato/Types.sol\\\";\\n\\nabstract contract ChromaticLPStorageGelato is ChromaticLPStorage, AutomateReady {\\n    struct AutomateParam {\\n        address automate;\\n        address opsProxyFactory;\\n    }\\n\\n    struct Tasks {\\n        bytes32 rebalanceTaskId;\\n        mapping(uint256 => bytes32) settleTasks;\\n    }\\n\\n    Tasks internal s_task;\\n\\n    constructor(\\n        AutomateParam memory automateParam\\n    )\\n        ChromaticLPStorage()\\n        AutomateReady(automateParam.automate, address(this), automateParam.opsProxyFactory)\\n    {}\\n\\n    function _createTask(\\n        bytes memory resolver,\\n        bytes memory execSelector,\\n        uint256 interval\\n    ) internal returns (bytes32) {\\n        ModuleData memory moduleData = ModuleData({modules: new Module[](3), args: new bytes[](3)});\\n        moduleData.modules[0] = Module.RESOLVER;\\n        moduleData.modules[1] = Module.TIME;\\n        moduleData.modules[2] = Module.PROXY;\\n        moduleData.args[0] = abi.encode(address(this), resolver); // abi.encodeCall(this.resolveRebalance, ()));\\n        moduleData.args[1] = abi.encode(uint128(block.timestamp + interval), uint128(interval));\\n        moduleData.args[2] = bytes(\\\"\\\");\\n\\n        return automate.createTask(address(this), execSelector, moduleData, ETH);\\n    }\\n\\n    function _getFeeInfo() internal view override returns (uint256 fee, address feePayee) {\\n        (fee, ) = _getFeeDetails();\\n        feePayee = automate.gelato();\\n    }\\n}\\n\",\"keccak256\":\"0xbc6ccae7033b63e9ec38e282b42c18c66023a8070a6f39628beb97e8d1ed50bc\",\"license\":\"MIT\"},\"contracts/lp/contracts/gelato/ChromaticLPGelato.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Proxy} from \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/interfaces/IERC1155Receiver.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IChromaticLP} from \\\"~/lp/interfaces/IChromaticLP.sol\\\";\\nimport {IChromaticLPAdmin} from \\\"~/lp/interfaces/IChromaticLPAdmin.sol\\\";\\nimport {IChromaticLPLiquidity} from \\\"~/lp/interfaces/IChromaticLPLiquidity.sol\\\";\\nimport {IChromaticLPMeta} from \\\"~/lp/interfaces/IChromaticLPMeta.sol\\\";\\nimport {ChromaticLPBaseGelato} from \\\"~/lp/base/gelato/ChromaticLPBaseGelato.sol\\\";\\nimport {ChromaticLPLogicGelato} from \\\"~/lp/contracts/gelato/ChromaticLPLogicGelato.sol\\\";\\nimport {IChromaticLiquidityCallback} from \\\"@chromatic-protocol/contracts/core/interfaces/callback/IChromaticLiquidityCallback.sol\\\";\\nimport {ChromaticLPReceipt} from \\\"~/lp/libraries/ChromaticLPReceipt.sol\\\";\\n\\nuint16 constant BPS = 10000;\\n\\ncontract ChromaticLPGelato is\\n    IChromaticLP,\\n    IChromaticLiquidityCallback,\\n    IERC1155Receiver,\\n    ChromaticLPBaseGelato,\\n    Proxy\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    address public immutable CHROMATIC_LP_LOGIC;\\n\\n    constructor(\\n        ChromaticLPLogicGelato lpLogic,\\n        LPMeta memory lpMeta,\\n        Config memory config,\\n        int16[] memory _feeRates,\\n        uint16[] memory distributionRates,\\n        AutomateParam memory automateParam\\n    ) ChromaticLPBaseGelato(automateParam) {\\n        CHROMATIC_LP_LOGIC = address(lpLogic);\\n\\n        _initialize(lpMeta, config, _feeRates, distributionRates);\\n        createRebalanceTask();\\n    }\\n\\n    function createRebalanceTask() public onlyOwner {\\n        if (s_task.rebalanceTaskId != 0) revert AlreadyRebalanceTaskExist();\\n        s_task.rebalanceTaskId = _createTask(\\n            abi.encodeCall(this.resolveRebalance, ()),\\n            abi.encodeCall(this.rebalance, ()),\\n            s_config.rebalanceCheckingInterval\\n        );\\n    }\\n\\n    function cancelRebalanceTask() external onlyOwner {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev This is the address to which proxy functions are delegated to\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return CHROMATIC_LP_LOGIC;\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLPLiquidity\\n     */\\n    function addLiquidity(\\n        uint256 /* amount */,\\n        address /* recipient */\\n    ) external override returns (ChromaticLPReceipt memory /* receipt */) {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLPLiquidity\\n     */\\n    function removeLiquidity(\\n        uint256 /* lpTokenAmount */,\\n        address /* recipient */\\n    ) external override returns (ChromaticLPReceipt memory /* receipt */) {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLPLiquidity\\n     */\\n    function settle(uint256 /* receiptId */) external override returns (bool) {\\n        _fallback();\\n    }\\n\\n    function resolveSettle(\\n        uint256 receiptId\\n    ) external view override(IChromaticLPAdmin) returns (bool, bytes memory) {\\n        return _resolveSettle(receiptId, this.settleTask);\\n    }\\n\\n    function resolveRebalance()\\n        external\\n        view\\n        override(IChromaticLPAdmin)\\n        returns (bool, bytes memory)\\n    {\\n        return _resolveRebalance(this.rebalance);\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLPMeta\\n     */\\n    function lpName() external view override returns (string memory) {\\n        return s_meta.lpName;\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLP\\n     */\\n    function market() external view override returns (address) {\\n        return address(s_config.market);\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLP\\n     */\\n    function settlementToken() external view override returns (address) {\\n        return address(s_config.market.settlementToken());\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLP\\n     */\\n    function lpToken() external view override returns (address) {\\n        return address(this);\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLPLiquidity\\n     */\\n    function getReceiptIdsOf(\\n        address owner\\n    ) external view override returns (uint256[] memory receiptIds) {\\n        return s_state.providerReceiptIds[owner].values();\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLPLiquidity\\n     */\\n    function getReceipt(\\n        uint256 receiptId\\n    ) external view override returns (ChromaticLPReceipt memory) {\\n        return s_state.receipts[receiptId];\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLiquidityCallback\\n     * @dev not implemented\\n     */\\n    function addLiquidityCallback(address, address, bytes calldata) external pure override {\\n        revert OnlyBatchCall();\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLiquidityCallback\\n     * @dev not implemented\\n     */\\n    function claimLiquidityCallback(\\n        uint256 /* receiptId */,\\n        int16 /* feeRate */,\\n        uint256 /* depositedAmount */,\\n        uint256 /* mintedCLBTokenAmount */,\\n        bytes calldata /* data */\\n    ) external pure override {\\n        revert OnlyBatchCall();\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLiquidityCallback\\n     * @dev not implemented\\n     */\\n    function removeLiquidityCallback(\\n        address /* clbToken */,\\n        uint256 /* clbTokenId */,\\n        bytes calldata /* data */\\n    ) external pure override {\\n        revert OnlyBatchCall();\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLiquidityCallback\\n     * @dev not implemented\\n     */\\n    function withdrawLiquidityCallback(\\n        uint256 /* receiptId */,\\n        int16 /* feeRate */,\\n        uint256 /* withdrawnAmount */,\\n        uint256 /* burnedCLBTokenAmount */,\\n        bytes calldata /* data */\\n    ) external pure override {\\n        revert OnlyBatchCall();\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLiquidityCallback\\n     * @dev not implemented\\n     */\\n    function addLiquidityBatchCallback(\\n        address /* settlementToken */,\\n        address /* vault */,\\n        bytes calldata /* data */\\n    ) external override {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLiquidityCallback\\n     * @dev not implemented\\n     */\\n    function claimLiquidityBatchCallback(\\n        uint256[] calldata /* receiptIds */,\\n        int16[] calldata /* feeRates */,\\n        uint256[] calldata /* depositedAmounts */,\\n        uint256[] calldata /* mintedCLBTokenAmounts */,\\n        bytes calldata /* data */\\n    ) external override {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLiquidityCallback\\n     * @dev not implemented\\n     */\\n    function removeLiquidityBatchCallback(\\n        address /* clbToken */,\\n        uint256[] calldata /* clbTokenIds */,\\n        bytes calldata /* data */\\n    ) external override {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticLiquidityCallback\\n     * @dev not implemented\\n     */\\n    function withdrawLiquidityBatchCallback(\\n        uint256[] calldata /* receiptIds */,\\n        int16[] calldata /* feeRates */,\\n        uint256[] calldata /* withdrawnAmounts */,\\n        uint256[] calldata /* burnedCLBTokenAmounts */,\\n        bytes calldata /* data */\\n    ) external override {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Receiver\\n     */\\n    function onERC1155Received(\\n        address /* operator */,\\n        address /* from */,\\n        uint256 /* id */,\\n        uint256 /* value */,\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Receiver\\n     */\\n    function onERC1155BatchReceived(\\n        address /* operator */,\\n        address /* from */,\\n        uint256[] calldata /* ids */,\\n        uint256[] calldata /* values */,\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\\n        return\\n            interfaceID == this.supportsInterface.selector || // ERC165\\n            interfaceID == this.onERC1155Received.selector ^ this.onERC1155BatchReceived.selector; // IERC1155Receiver\\n    }\\n\\n    /**\\n     * @dev called by keeper only\\n     */\\n    function rebalance() external {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev called by Keeper only\\n     */\\n    function settleTask(uint256 /* receiptId */) external {\\n        _fallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa565f7d43126316f79f22884cc72b93d253f7b3949e7c8edc7538a4efa820d60\",\"license\":\"MIT\"},\"contracts/lp/contracts/gelato/ChromaticLPLogicGelato.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {IAutomate, Module, ModuleData} from \\\"@chromatic-protocol/contracts/core/automation/gelato/Types.sol\\\";\\nimport {LpReceipt} from \\\"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {ChromaticLPReceipt, ChromaticLPAction} from \\\"~/lp/libraries/ChromaticLPReceipt.sol\\\";\\nimport {IChromaticLP} from \\\"~/lp/interfaces/IChromaticLP.sol\\\";\\nimport {ChromaticLPLogicBaseGelato} from \\\"~/lp/base/gelato/ChromaticLPLogicBaseGelato.sol\\\";\\n\\ncontract ChromaticLPLogicGelato is ChromaticLPLogicBaseGelato {\\n    using Math for uint256;\\n\\n    constructor(\\n        AutomateParam memory automateParam\\n    )\\n        ChromaticLPLogicBaseGelato(\\n            AutomateParam({\\n                automate: automateParam.automate,\\n                opsProxyFactory: automateParam.opsProxyFactory\\n            })\\n        )\\n    {}\\n\\n    /**\\n     * @dev implementation of IChromaticLP\\n     */\\n    function addLiquidity(\\n        uint256 amount,\\n        address recipient\\n    ) external returns (ChromaticLPReceipt memory receipt) {\\n        receipt = _addLiquidity(amount, recipient);\\n        emit AddLiquidity({\\n            receiptId: receipt.id,\\n            recipient: recipient,\\n            oracleVersion: receipt.oracleVersion,\\n            amount: amount\\n        });\\n    }\\n\\n    /**\\n     * @dev implementation of IChromaticLP\\n     */\\n    function removeLiquidity(\\n        uint256 lpTokenAmount,\\n        address recipient\\n    ) external returns (ChromaticLPReceipt memory receipt) {\\n        uint256[] memory clbTokenAmounts = _calcRemoveClbAmounts(lpTokenAmount);\\n\\n        receipt = _removeLiquidity(clbTokenAmounts, lpTokenAmount, recipient);\\n        emit RemoveLiquidity({\\n            receiptId: receipt.id,\\n            recipient: recipient,\\n            oracleVersion: receipt.oracleVersion,\\n            lpTokenAmount: lpTokenAmount\\n        });\\n    }\\n\\n    /**\\n     * @dev implementation of IChromaticLP\\n     */\\n    function settle(uint256 receiptId) external returns (bool) {\\n        return _settle(receiptId);\\n    }\\n\\n    /**\\n     * @dev implementation of IChromaticLP\\n     */\\n    function rebalance() external override onlyAutomation {\\n        uint256 receiptId = _rebalance();\\n        if (receiptId != 0) {\\n            emit RebalanceLiquidity({receiptId: receiptId});\\n            uint256 balance = IERC20(s_config.market.settlementToken()).balanceOf(address(this));\\n            _payKeeperFee(balance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe8dff9b1cfd9cb9b0dc107dc29d48d7c9dd18dfff045d074dbf90709ed120905\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IChromaticLPLiquidity} from \\\"./IChromaticLPLiquidity.sol\\\";\\nimport {IChromaticLPAdmin} from \\\"./IChromaticLPAdmin.sol\\\";\\nimport {IChromaticLPLens} from \\\"./IChromaticLPLens.sol\\\";\\nimport {IChromaticLPMeta} from \\\"./IChromaticLPMeta.sol\\\";\\nimport {IChromaticLPEvents} from \\\"./IChromaticLPEvents.sol\\\";\\n\\nimport {IChromaticLPErrors} from \\\"./IChromaticLPErrors.sol\\\";\\n\\ninterface IChromaticLP is\\n    IChromaticLPLiquidity,\\n    IChromaticLPLens,\\n    IChromaticLPMeta,\\n    IChromaticLPAdmin,\\n    IChromaticLPEvents,\\n    IChromaticLPErrors\\n{\\n    function market() external view returns (address);\\n\\n    function settlementToken() external view returns (address);\\n\\n    function lpToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x71fde31b92675142c6ef529dff4d38666a3af8f57a96b3f1ee347ae8963b826c\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IChromaticLPAdmin {\\n    function createRebalanceTask() external;\\n\\n    function cancelRebalanceTask() external;\\n\\n    function resolveSettle(\\n        uint256 receiptId\\n    ) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n    function resolveRebalance() external returns (bool upkeepNeeded, bytes memory performData);\\n}\\n\",\"keccak256\":\"0x1ab090e01587dd56218c468ac33902227b20c067485a5bfbf3153ab34d4683a6\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IChromaticLPErrors {\\n    error InvalidUtilizationTarget(uint16 targetBPS);\\n    error InvalidRebalanceBPS();\\n    error NotMatchDistributionLength(uint256 feeLength, uint256 distributionLength);\\n    error InvalidDistributionSum();\\n\\n    error NotMarket();\\n    error OnlyBatchCall();\\n\\n    error UnknownLPAction();\\n    error NotOwner();\\n    error AlreadySwapRouterConfigured();\\n    error NotKeeperCalled();\\n    error AlreadyRebalanceTaskExist();\\n    error OnlyAccessableByOwner();\\n\\n    error NotAutomationCalled();\\n\\n    error NotImplementedInLogicContract();\\n}\\n\",\"keccak256\":\"0x0a7f11ceb67c33c3e659fb2a877dee319f227f3a02cbd5cc498976a4bf84a798\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IChromaticLPEvents {\\n    event AddLiquidity(\\n        uint256 indexed receiptId,\\n        address indexed recipient,\\n        uint256 oracleVersion,\\n        uint256 amount\\n    );\\n\\n    event AddLiquiditySettled(\\n        uint256 indexed receiptId,\\n        uint256 settlementAdded,\\n        uint256 lpTokenAmount\\n    );\\n\\n    event RemoveLiquidity(\\n        uint256 indexed receiptId,\\n        address indexed recipient,\\n        uint256 oracleVersion,\\n        uint256 lpTokenAmount\\n    );\\n\\n    event RemoveLiquiditySettled(\\n        uint256 indexed receiptId,\\n        uint256 burningAmount,\\n        uint256 witdrawnSettlementAmount,\\n        uint256 refundedAmount\\n    );\\n\\n    event RebalanceLiquidity(uint256 indexed receiptId);\\n    event RebalanceSettled(uint256 indexed receiptId);\\n}\\n\",\"keccak256\":\"0xd0ab88c40f10c4c9479f8ec64fe080c2ab9769d02cbdedcd3b87f9789a366c21\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nstruct ValueInfo {\\n    uint256 total;\\n    uint256 holding;\\n    uint256 pending;\\n    uint256 holdingClb;\\n    uint256 pendingClb;\\n}\\n\\ninterface IChromaticLPLens {\\n    function utilization() external view returns (uint16);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function valueInfo() external view returns (ValueInfo memory info);\\n\\n    function holdingValue() external view returns (uint256);\\n\\n    function pendingValue() external view returns (uint256);\\n\\n    function holdingClbValue() external view returns (uint256);\\n\\n    function pendingClbValue() external view returns (uint256);\\n\\n    function totalClbValue() external view returns (uint256 value);\\n\\n    function feeRates() external view returns (int16[] memory feeRates);\\n\\n    function clbTokenIds() external view returns (uint256[] memory tokenIds);\\n\\n    function clbTokenBalances() external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x48241e560036f5b60f3c3938b61e14dbdb0f87a45812df4e86a9c7a6f80b5ffb\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ChromaticLPReceipt} from \\\"~/lp/libraries/ChromaticLPReceipt.sol\\\";\\n\\ninterface IChromaticLPLiquidity {\\n    function addLiquidity(\\n        uint256 amount,\\n        address recipient\\n    ) external returns (ChromaticLPReceipt memory);\\n\\n    function removeLiquidity(\\n        uint256 lpTokenAmount,\\n        address recipient\\n    ) external returns (ChromaticLPReceipt memory);\\n\\n    function settle(uint256 receiptId) external returns (bool);\\n\\n    function getReceiptIdsOf(address owner) external view returns (uint256[] memory);\\n\\n    function getReceipt(uint256 id) external view returns (ChromaticLPReceipt memory);\\n}\\n\",\"keccak256\":\"0x21b43d660cf83995ab3ab70ba73be55c17eaeae3f5b2095967da7bc85dfb35d7\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPMeta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IChromaticLPMeta {\\n    function lpName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x197fd1cf902790192ba5785a0ebb0f66d023d84760908d305e1f76792093590a\",\"license\":\"MIT\"},\"contracts/lp/libraries/ChromaticLPReceipt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev The ChromaticLPAction enum represents the types of LP actions that can be performed.\\n */\\nenum ChromaticLPAction {\\n    ADD_LIQUIDITY,\\n    REMOVE_LIQUIDITY\\n}\\n\\n/**\\n * @dev The ChromaticLPReceipt struct represents a receipt of an LP action performed.\\n * @param id An identifier for the receipt\\n * @param oracleVersion The oracle version associated with the action\\n * @param amount The amount involved in the action,\\n *        when the action is `ADD_LIQUIDITY`, this value represents the amount of settlement tokens\\n *        when the action is `REMOVE_LIQUIDITY`, this value represents the amount of CLB tokens\\n * @param pendingLiquidity The amount involved in the action,\\n *        when the action is `ADD_LIQUIDITY`, this value represents the amount of pending liquidity in settlement tokens\\n *        when the action is `REMOVE_LIQUIDITY`, not used\\n * @param recipient The address of the recipient of the action\\n * @param action An enumeration representing the type of LP action performed (ADD_LIQUIDITY or REMOVE_LIQUIDITY)\\n */\\nstruct ChromaticLPReceipt {\\n    uint256 id;\\n    uint256 oracleVersion;\\n    uint256 amount;\\n    uint256 pendingLiquidity;\\n    address recipient;\\n    ChromaticLPAction action;\\n}\\n\",\"keccak256\":\"0xf1284a1ef6e26e4ba461fcf49dc6ea3ef9f856e081fbf78f0b91b8d0167b2f91\",\"license\":\"MIT\"},\"contracts/lp/libraries/TrimAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary TrimAddress {\\n    function trimAddress(\\n        address self,\\n        uint8 length\\n    ) internal pure returns (bytes memory converted) {\\n        converted = new bytes(length);\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n        uint160 value = uint160(self);\\n\\n        value = value >> (4 * (39 - length));\\n        for (uint256 i = 0; i < length; i++) {\\n            value = value >> 4;\\n            converted[length - i - 1] = _base[uint8(value % 16)];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7657996e0bf56e60b2c620552529de46919aabfe352435cbaec9f38a7bae69f9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103385760003560e01c80637688c584116101b0578063ac31bb04116100ec578063d2419e2311610095578063e921b5c21161006f578063e921b5c2146109c1578063ea21cd92146109e1578063f120bc4d14610939578063f23a6e6114610a0957610347565b8063d2419e2314610939578063d4c3eea014610959578063dd62ed3e1461096e57610347565b8063c73fc729116100c6578063c73fc729146104df578063c95f9d0e146103dd578063d0d063c01461091957610347565b8063ac31bb041461086b578063b63e6ac314610880578063bc197c81146108a057610347565b80639134e7e711610159578063970d1d6f11610133578063970d1d6f146107fb578063a06104ae14610816578063a457c2d71461082b578063a9059cbb1461084b57610347565b80639134e7e7146107a357806393e15ee9146107d157806395d89b41146107e657610347565b806380f556051161018a57806380f5560514610743578063836339641461076e5780638df828001461078357610347565b80637688c584146106f75780637b9e618d146107195780637d7c2a1c1461072e57610347565b8063357dbd231161027f5780635c3986b0116102285780636868fe1d116102025780636868fe1d1461063357806370a0823114610648578063735a448e1461068b578063747cd3d9146106e257610347565b80635c3986b0146105f65780635fcbd2851461060b57806366cc811a1461061e57610347565b806340c592c11161025957806340c592c11461059257806346cd6801146105c65780635a80e080146105db57610347565b8063357dbd2314610548578063395093511461055d5780633ab8a16c1461057d57610347565b806323a43ec8116102e15780633068e794116102bb5780633068e794146104df578063313ce567146104ff5780633179f0481461051b57610347565b806323a43ec81461046b57806323b872dd1461048b57806328f150eb146104ab57610347565b806306fdde031161031257806306fdde031461040a578063095ea7b31461042c57806318160ddd1461044c57610347565b806301ffc9a71461034f578063049aacfe1461038457806305fe138b146103dd57610347565b3661034757610345610a4f565b005b610345610a4f565b34801561035b57600080fd5b5061036f61036a3660046130f9565b610a7a565b60405190151581526020015b60405180910390f35b34801561039057600080fd5b506103b87f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161037b565b3480156103e957600080fd5b506103fd6103f836600461315d565b610b13565b60405161037b91906131bc565b34801561041657600080fd5b5061041f610b23565b60405161037b9190613296565b34801561043857600080fd5b5061036f6104473660046132a9565b610b5a565b34801561045857600080fd5b506002545b60405190815260200161037b565b34801561047757600080fd5b506103456104863660046132d5565b610b72565b34801561049757600080fd5b5061036f6104a63660046132ee565b610b7d565b3480156104b757600080fd5b506103b87f000000000000000000000000000000000000000000000000000000000000000081565b3480156104eb57600080fd5b506103456104fa366004613371565b610ba3565b34801561050b57600080fd5b506040516012815260200161037b565b34801561052757600080fd5b5061053b6105363660046133ea565b610bd5565b60405161037b9190613407565b34801561055457600080fd5b5060115461045d565b34801561056957600080fd5b5061036f6105783660046132a9565b610c06565b34801561058957600080fd5b5061045d610c52565b34801561059e57600080fd5b506103b87f000000000000000000000000000000000000000000000000000000000000000081565b3480156105d257600080fd5b5061041f610f2f565b3480156105e757600080fd5b506103456104fa36600461344b565b34801561060257600080fd5b5061053b610fc4565b34801561061757600080fd5b50306103b8565b34801561062a57600080fd5b5061045d61101e565b34801561063f57600080fd5b5061045d6112bf565b34801561065457600080fd5b5061045d6106633660046133ea565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b34801561069757600080fd5b506106a061159c565b60405161037b9190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b3480156106ee57600080fd5b5061034561164c565b34801561070357600080fd5b5061070c61177d565b60405161037b91906134a7565b34801561072557600080fd5b506103b86117fd565b34801561073a57600080fd5b50610345611896565b34801561074f57600080fd5b5060075473ffffffffffffffffffffffffffffffffffffffff166103b8565b34801561077a57600080fd5b5061045d61189e565b34801561078f57600080fd5b5061036f61079e3660046132d5565b6119c2565b3480156107af57600080fd5b506107c36107be3660046132d5565b6119d1565b60405161037b9291906134e2565b3480156107dd57600080fd5b506103456119ed565b3480156107f257600080fd5b5061041f611a3e565b34801561080757600080fd5b506103456104fa366004613505565b34801561082257600080fd5b506107c3611ad9565b34801561083757600080fd5b5061036f6108463660046132a9565b611af3565b34801561085757600080fd5b5061036f6108663660046132a9565b611bd4565b34801561087757600080fd5b5061053b611be2565b34801561088c57600080fd5b506103fd61089b3660046132d5565b611dcf565b3480156108ac57600080fd5b506108e86108bb366004613597565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161037b565b34801561092557600080fd5b50610345610934366004613505565b611e85565b34801561094557600080fd5b50610345610954366004613656565b611e93565b34801561096557600080fd5b5061045d611ea7565b34801561097a57600080fd5b5061045d610989366004613747565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b3480156109cd57600080fd5b506103456109dc366004613775565b611ed0565b3480156109ed57600080fd5b506109f6611edf565b60405161ffff909116815260200161037b565b348015610a1557600080fd5b506108e8610a243660046137f8565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b610a787f0000000000000000000000000000000000000000000000000000000000000000611f34565b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a7000000000000000000000000000000000000000000000000000000001480610b0d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b92915050565b610b1b61309d565b610b0d610a4f565b6060610b2d611f58565b610b3561207c565b604051602001610b4692919061382c565b604051602081830303815290604052905090565b600033610b6881858561215a565b5060019392505050565b610b7a610a4f565b50565b600033610b8b85828561230d565b610b968585856123de565b60019150505b9392505050565b6040517f36bcfc9a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152601060205260409020606090610b0d9061264d565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190610b689082908690610c4d9087906138dc565b61215a565b600080600760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166264041d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce891906138ef565b6040517f77954ac200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116906377954ac290610d3d90600c9060040161394c565b600060405180830381865afa158015610d5a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610da091908101906139dd565b6007546040517ffaf07bf300000000000000000000000000000000000000000000000000000000815291925060009173ffffffffffffffffffffffffffffffffffffffff9091169063faf07bf390610dfd90600a90600401613a83565b600060405180830381865afa158015610e1a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610e6091908101906139dd565b905060005b8151811015610f29576000600a6008016000600a6000018481548110610e8d57610e8d613d96565b60009182526020808320601083040154600f9092166002026101000a90910460010b835282019290925260400190205490508015610f1157610f0c838381518110610eda57610eda613d96565b6020026020010151858481518110610ef457610ef4613d96565b60200260200101518361265a9092919063ffffffff16565b610f14565b60005b610f1e90866138dc565b945050600101610e65565b50505090565b606060056000018054610f4190613dc5565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6d90613dc5565b8015610fba5780601f10610f8f57610100808354040283529160200191610fba565b820191906000526020600020905b815481529060010190602001808311610f9d57829003601f168201915b5050505050905090565b6060600a600201805480602002602001604051908101604052809291908181526020018280548015610fba57602002820191906000526020600020905b815481526020019060010190808311611001575050505050905090565b600080600760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166264041d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b491906138ef565b6040517f77954ac200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116906377954ac29061110990600c9060040161394c565b600060405180830381865afa158015611126573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261116c91908101906139dd565b6007546040517ffaf07bf300000000000000000000000000000000000000000000000000000000815291925060009173ffffffffffffffffffffffffffffffffffffffff9091169063faf07bf3906111c990600a90600401613a83565b600060405180830381865afa1580156111e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261122c91908101906139dd565b90506000611238611be2565b905060005b82518110156112b857600082828151811061125a5761125a613d96565b60200260200101519050806000146112a05761129b84838151811061128157611281613d96565b6020026020010151868481518110610ef457610ef4613d96565b6112a3565b60005b6112ad90876138dc565b95505060010161123d565b5050505090565b600080600760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166264041d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611331573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135591906138ef565b6040517f77954ac200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116906377954ac2906113aa90600c9060040161394c565b600060405180830381865afa1580156113c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261140d91908101906139dd565b6007546040517ffaf07bf300000000000000000000000000000000000000000000000000000000815291925060009173ffffffffffffffffffffffffffffffffffffffff9091169063faf07bf39061146a90600a90600401613a83565b600060405180830381865afa158015611487573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526114cd91908101906139dd565b905060006114d9611be2565b905060005b82518110156112b8576000600a6008016000600a600001848154811061150657611506613d96565b90600052602060002090601091828204019190066002029054906101000a900460010b60010b60010b81526020019081526020016000205483838151811061155057611550613d96565b602002602001015161156291906138dc565b905080156115845761157f84838151811061128157611281613d96565b611587565b60005b61159190876138dc565b9550506001016114de565b6115ce6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040518060a00160405280600081526020016115e861189e565b81526020016115f660115490565b815260200161160361101e565b8152602001611610610c52565b8152509050806080015181606001518260400151836020015161163391906138dc565b61163d91906138dc565b61164791906138dc565b815290565b60165473ffffffffffffffffffffffffffffffffffffffff16331461169d576040517f9298645b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601454156116d7576040517f78bfb91700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051600480825260248083018452602080840180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff9081167fa06104ae0000000000000000000000000000000000000000000000000000000017909152855193845291830190945292810180519093167f7d7c2a1c00000000000000000000000000000000000000000000000000000000179092526008546117789290612784565b601455565b6060600a600001805480602002602001604051908101604052809291908181526020018280548015610fba57602002820191906000526020600020906000905b82829054906101000a900460010b60010b815260200190600201906020826001010492830192600103820291508084116117bd5790505050505050905090565b600754604080517f7b9e618d000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691637b9e618d9160048083019260209291908290030181865afa15801561186d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189191906138ef565b905090565b610a78610a4f565b600754604080517f7b9e618d000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691637b9e618d9160048083019260209291908290030181865afa15801561190e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193291906138ef565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa15801561199e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118919190613e18565b60006119cc610a4f565b919050565b600060606119e483306323a43ec8612a93565b91509150915091565b60165473ffffffffffffffffffffffffffffffffffffffff163314611896576040517f9298645b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600754606090611a659073ffffffffffffffffffffffffffffffffffffffff166004612ce9565b60068054600090611a7590613dc5565b8110611a8357611a83613d96565b815460011615611aa25790600052602060002090602091828204019190065b9054901a7f010000000000000000000000000000000000000000000000000000000000000002604051602001610b46929190613e31565b60006060611aeb30637d7c2a1c612e85565b915091509091565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015611bbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b611bc9828686840361215a565b506001949350505050565b600033610b688185856123de565b600a5460609060009067ffffffffffffffff811115611c0357611c0361395f565b604051908082528060200260200182016040528015611c2c578160200160208202803683370190505b50905060005b600a54811015611c7c5730828281518110611c4f57611c4f613d96565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101611c32565b50600754604080517e64041d000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216916264041d916004808201926020929091908290030181865afa158015611ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0f91906138ef565b6040517f4e1273f400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9190911690634e1273f490611d66908490600c90600401613ec7565b600060405180830381865afa158015611d83573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611dc991908101906139dd565b91505090565b611dd761309d565b6000828152600d6020908152604091829020825160c081018452815481526001808301549382019390935260028201549381019390935260038101546060840152600481015473ffffffffffffffffffffffffffffffffffffffff81166080850152909160a084019174010000000000000000000000000000000000000000900460ff1690811115611e6b57611e6b61318d565b6001811115611e7c57611e7c61318d565b90525092915050565b611e8d610a4f565b50505050565b611e9b610a4f565b50505050505050505050565b6000611eb16112bf565b601154611ebc61189e565b611ec691906138dc565b61189191906138dc565b611ed8610a4f565b5050505050565b600080611eea61159c565b8051909150600003611efe57600091505090565b611dc961271061ffff16826000015183608001518460200151611f2191906138dc565b8451611f2d9190613f34565b919061265a565b3660008037600080366000845af43d6000803e808015611f53573d6000f35b3d6000fd5b600754604080517f7b9e618d000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff1691637b9e618d9160048083019260209291908290030181865afa158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec91906138ef565b73ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015612036573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526118919190810190613f47565b600754604080517f0aa7d2f9000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff1691630aa7d2f99160048083019260209291908290030181865afa1580156120ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211091906138ef565b73ffffffffffffffffffffffffffffffffffffffff16637284e4166040518163ffffffff1660e01b8152600401600060405180830381865afa158015612036573d6000803e3d6000fd5b73ffffffffffffffffffffffffffffffffffffffff83166121fc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401611bb3565b73ffffffffffffffffffffffffffffffffffffffff821661229f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401611bb3565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611e8d57818110156123d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401611bb3565b611e8d848484840361215a565b73ffffffffffffffffffffffffffffffffffffffff8316612481576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401611bb3565b73ffffffffffffffffffffffffffffffffffffffff8216612524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401611bb3565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902054818110156125da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401611bb3565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611e8d565b60606000610b9c83613041565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000036126b2578382816126a8576126a8613ff9565b0492505050610b9c565b80841161271b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f7700000000000000000000006044820152606401611bb3565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000806040518060400160405280600367ffffffffffffffff8111156127ac576127ac61395f565b6040519080825280602002602001820160405280156127d5578160200160208202803683370190505b5081526040805160038082526080820190925260209092019190816020015b60608152602001906001900390816127f4575050905280518051919250600091829061282257612822613d96565b6020026020010190600381111561283b5761283b61318d565b9081600381111561284e5761284e61318d565b815250506001816000015160018151811061286b5761286b613d96565b602002602001019060038111156128845761288461318d565b908160038111156128975761289761318d565b81525050600281600001516002815181106128b4576128b4613d96565b602002602001019060038111156128cd576128cd61318d565b908160038111156128e0576128e061318d565b9052506040516128f69030908790602001614028565b604051602081830303815290604052816020015160008151811061291c5761291c613d96565b602090810291909101015261293183426138dc565b604080516fffffffffffffffffffffffffffffffff928316602082015291851690820152606001604051602081830303815290604052816020015160018151811061297e5761297e613d96565b60200260200101819052506040518060200160405280600081525081602001516002815181106129b0576129b0613d96565b60209081029190910101526040517f3323b46700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690633323b46790612a479030908890869073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90600401614057565b6020604051808303816000875af1158015612a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8a9190613e18565b95945050505050565b600060606000600760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630aa7d2f96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2d91906138ef565b73ffffffffffffffffffffffffffffffffffffffff16639d888e866040518163ffffffff1660e01b8152600401606060405180830381865afa158015612b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9b919061417c565b6000878152600d60209081526040808320815160c081018352815481526001808301549482019490945260028201549281019290925260038101546060830152600481015473ffffffffffffffffffffffffffffffffffffffff81166080840152949550929390929160a084019174010000000000000000000000000000000000000000900460ff1690811115612c3457612c3461318d565b6001811115612c4557612c4561318d565b905250805190915015801590612c5f575081516020820151105b15612cc8576001868689604051602401612c7b91815260200190565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050935093505050612ce1565b6000604051806020016040528060008152509350935050505b935093915050565b60608160ff1667ffffffffffffffff811115612d0757612d0761395f565b6040519080825280601f01601f191660200182016040528015612d31576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915083612d758460276141d8565b612d809060046141f1565b60ff168173ffffffffffffffffffffffffffffffffffffffff16901c905060005b8460ff16811015612e7c5760048273ffffffffffffffffffffffffffffffffffffffff16901c915082601083612dd79190614214565b60ff1681518110612dea57612dea613d96565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016846001612e218460ff8a16613f34565b612e2b9190613f34565b81518110612e3b57612e3b613d96565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080612e748161426e565b915050612da1565b50505092915050565b600060606000612e9361159c565b8051909150600003612eb857505060408051602081019091526000808252915061303a565b6000612eec61271061ffff168360000151846080015185604001518660600151612ee291906138dc565b611f2d9190613f34565b6007549091508190612f369061ffff7601000000000000000000000000000000000000000000008204811691740100000000000000000000000000000000000000009004166142a6565b61ffff161015612f885750506040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660e086901b17905260019250905061303a565b6007548190612fcf9061ffff7601000000000000000000000000000000000000000000008204811691740100000000000000000000000000000000000000009004166142c1565b61ffff1611156130215750506040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660e086901b17905260019250905061303a565b6000604051806020016040528060008152509350935050505b9250929050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561309157602002820191906000526020600020905b81548152602001906001019080831161307d575b50505050509050919050565b6040518060c0016040528060008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060018111156130f4576130f461318d565b905290565b60006020828403121561310b57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610b9c57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610b7a57600080fd5b6000806040838503121561317057600080fd5b8235915060208301356131828161313b565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060c0820190508251825260208301516020830152604083015160408301526060830151606083015273ffffffffffffffffffffffffffffffffffffffff608084015116608083015260a08301516002811061321b5761321b61318d565b8060a08401525092915050565b60005b8381101561324357818101518382015260200161322b565b50506000910152565b60008151808452613264816020860160208601613228565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610b9c602083018461324c565b600080604083850312156132bc57600080fd5b82356132c78161313b565b946020939093013593505050565b6000602082840312156132e757600080fd5b5035919050565b60008060006060848603121561330357600080fd5b833561330e8161313b565b9250602084013561331e8161313b565b929592945050506040919091013590565b60008083601f84011261334157600080fd5b50813567ffffffffffffffff81111561335957600080fd5b60208301915083602082850101111561303a57600080fd5b60008060008060008060a0878903121561338a57600080fd5b8635955060208701358060010b81146133a257600080fd5b94506040870135935060608701359250608087013567ffffffffffffffff8111156133cc57600080fd5b6133d889828a0161332f565b979a9699509497509295939492505050565b6000602082840312156133fc57600080fd5b8135610b9c8161313b565b6020808252825182820181905260009190848201906040850190845b8181101561343f57835183529284019291840191600101613423565b50909695505050505050565b6000806000806060858703121561346157600080fd5b843561346c8161313b565b935060208501359250604085013567ffffffffffffffff81111561348f57600080fd5b61349b8782880161332f565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b8181101561343f578351600190810b84529385019392850192016134c3565b82151581526040602082015260006134fd604083018461324c565b949350505050565b6000806000806060858703121561351b57600080fd5b84356135268161313b565b935060208501356135368161313b565b9250604085013567ffffffffffffffff81111561348f57600080fd5b60008083601f84011261356457600080fd5b50813567ffffffffffffffff81111561357c57600080fd5b6020830191508360208260051b850101111561303a57600080fd5b60008060008060008060008060a0898b0312156135b357600080fd5b88356135be8161313b565b975060208901356135ce8161313b565b9650604089013567ffffffffffffffff808211156135eb57600080fd5b6135f78c838d01613552565b909850965060608b013591508082111561361057600080fd5b61361c8c838d01613552565b909650945060808b013591508082111561363557600080fd5b506136428b828c0161332f565b999c989b5096995094979396929594505050565b60008060008060008060008060008060a08b8d03121561367557600080fd5b8a3567ffffffffffffffff8082111561368d57600080fd5b6136998e838f01613552565b909c509a5060208d01359150808211156136b257600080fd5b6136be8e838f01613552565b909a50985060408d01359150808211156136d757600080fd5b6136e38e838f01613552565b909850965060608d01359150808211156136fc57600080fd5b6137088e838f01613552565b909650945060808d013591508082111561372157600080fd5b5061372e8d828e0161332f565b915080935050809150509295989b9194979a5092959850565b6000806040838503121561375a57600080fd5b82356137658161313b565b915060208301356131828161313b565b60008060008060006060868803121561378d57600080fd5b85356137988161313b565b9450602086013567ffffffffffffffff808211156137b557600080fd5b6137c189838a01613552565b909650945060408801359150808211156137da57600080fd5b506137e78882890161332f565b969995985093965092949392505050565b60008060008060008060a0878903121561381157600080fd5b863561381c8161313b565b955060208701356133a28161313b565b7f4368726f6d617469634c50202d2000000000000000000000000000000000000081526000835161386481600e850160208801613228565b7f202d200000000000000000000000000000000000000000000000000000000000600e9184019182015283516138a1816011840160208801613228565b01601101949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610b0d57610b0d6138ad565b60006020828403121561390157600080fd5b8151610b9c8161313b565b6000815480845260208085019450836000528060002060005b8381101561394157815487529582019560019182019101613925565b509495945050505050565b602081526000610b9c602083018461390c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156139d5576139d561395f565b604052919050565b600060208083850312156139f057600080fd5b825167ffffffffffffffff80821115613a0857600080fd5b818501915085601f830112613a1c57600080fd5b815181811115613a2e57613a2e61395f565b8060051b9150613a3f84830161398e565b8181529183018401918481019088841115613a5957600080fd5b938501935b83851015613a7757845182529385019390850190613a5e565b98975050505050505050565b60006020808301818452808554613a9e818490815260200190565b60008881526020812094509092505b81600f82011015613bef578354600181810b8552601082901c810b878601526040613ae0818701848a1c840b60010b9052565b6060613af58188018560301c850b60010b9052565b6080613b0981890186851c860b60010b9052565b60a09250613b208389018660501c860b60010b9052565b60c0613b34818a0187851c870b60010b9052565b60e09250613b4b838a018760701c870b60010b9052565b85821c850b60010b6101008a0152613b6e6101208a018760901c870b60010b9052565b85841c850b60010b6101408a0152613b916101608a018760b01c870b60010b9052565b85811c850b60010b6101808a01525050613bb66101a088018560d01c850b60010b9052565b83811c830b60010b6101c08801525050613bd96101e086018360f01d60010b9052565b9490940193506102009290920191601001613aad565b92549281811015613c0757600184810b845292850192015b81811015613c2157601084901c60010b8352918401916001015b81811015613c395783851c60010b8352918401916001015b81811015613c5357603084901c60010b8352918401916001015b81811015613c6d57604084901c60010b8352918401916001015b81811015613c8757605084901c60010b8352918401916001015b81811015613ca157606084901c60010b8352918401916001015b81811015613cbb57607084901c60010b8352918401916001015b81811015613cd557608084901c60010b8352918401916001015b81811015613cef57609084901c60010b8352918401916001015b81811015613d095760a084901c60010b8352918401916001015b81811015613d235760b084901c60010b8352918401916001015b81811015613d3d5760c084901c60010b8352918401916001015b81811015613d575760d084901c60010b8352918401916001015b81811015613d715760e084901c60010b8352918401916001015b8181101561343f57613d88838560f01d60010b9052565b505091909101949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680613dd957607f821691505b602082108103613e12577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215613e2a57600080fd5b5051919050565b7f434c502d00000000000000000000000000000000000000000000000000000000815260008351613e69816004850160208801613228565b7f2d0000000000000000000000000000000000000000000000000000000000000060049390910192830152507fff00000000000000000000000000000000000000000000000000000000000000919091166005820152600601919050565b604080825283519082018190526000906020906060840190828701845b82811015613f1657815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101613ee4565b50505083810382850152613f2a818661390c565b9695505050505050565b81810381811115610b0d57610b0d6138ad565b600060208284031215613f5957600080fd5b815167ffffffffffffffff80821115613f7157600080fd5b818401915084601f830112613f8557600080fd5b815181811115613f9757613f9761395f565b613fc860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161398e565b9150808252856020828501011115613fdf57600080fd5b613ff0816020840160208601613228565b50949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006134fd604083018461324c565b73ffffffffffffffffffffffffffffffffffffffff8516815260006020608081840152614087608084018761324c565b8381036040808601919091528651818352805191830182905283019060009060608401905b808310156140dc578351600481106140c6576140c661318d565b82529285019260019290920191908501906140ac565b508885015184820394860194909452835180825281860194860193509150600582901b8101850160005b83811015614152577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe083830301865261414082865161324c565b95870195948701949150600101614106565b5073ffffffffffffffffffffffffffffffffffffffff891660608901529550612a8a945050505050565b60006060828403121561418e57600080fd5b6040516060810181811067ffffffffffffffff821117156141b1576141b161395f565b80604052508251815260208301516020820152604083015160408201528091505092915050565b60ff8281168282160390811115610b0d57610b0d6138ad565b60ff818116838216029081169081811461420d5761420d6138ad565b5092915050565b600073ffffffffffffffffffffffffffffffffffffffff80841680614262577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910692915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361429f5761429f6138ad565b5060010190565b61ffff81811683821601908082111561420d5761420d6138ad565b61ffff82811682821603908082111561420d5761420d6138ad56fea2646970667358221220d1c44a6445b0775473a7b4d34536b09122172c85b9e970f06e41206145fce15864736f6c63430008130033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "addLiquidityBatchCallback(address,address,bytes)": {
        "details": "not implemented",
        "params": {
          "data": "Additional data associated with the liquidity addition.",
          "settlementToken": "The address of the settlement token used for adding liquidity.",
          "vault": "The address of the vault where the liquidity is added."
        }
      },
      "addLiquidityCallback(address,address,bytes)": {
        "details": "not implemented",
        "params": {
          "data": "Additional data associated with the liquidity addition.",
          "settlementToken": "The address of the settlement token used for adding liquidity.",
          "vault": "The address of the vault where the liquidity is added."
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "claimLiquidityBatchCallback(uint256[],int16[],uint256[],uint256[],bytes)": {
        "details": "not implemented",
        "params": {
          "data": "Additional data associated with the liquidity claim.",
          "depositedAmounts": "The array of deposited liquidity amounts for each receipt in the batch.",
          "feeRates": "The array of trading fee rates associated with each claim in the batch.",
          "mintedCLBTokenAmounts": "The array of CLB token amounts minted for each receipt in the batch.",
          "receiptIds": "The array of the liquidity receipt IDs."
        }
      },
      "claimLiquidityCallback(uint256,int16,uint256,uint256,bytes)": {
        "details": "not implemented",
        "params": {
          "data": "Additional data associated with the liquidity claim.",
          "depositedAmount": "The amount of liquidity deposited.",
          "feeRate": "The trading fee rate associated with the liquidity claim.",
          "mintedCLBTokenAmount": "The amount of CLB tokens minted as liquidity.",
          "receiptId": "The ID of the liquidity claim receipt."
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "ids": "An array containing ids of each token being transferred (order and length must match values array)",
          "operator": "The address which initiated the batch transfer (i.e. msg.sender)",
          "values": "An array containing amounts of each token being transferred (order and length must match ids array)"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "id": "The ID of the token being transferred",
          "operator": "The address which initiated the transfer (i.e. msg.sender)",
          "value": "The amount of tokens being transferred"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"
        }
      },
      "rebalance()": {
        "details": "called by keeper only"
      },
      "removeLiquidityBatchCallback(address,uint256[],bytes)": {
        "details": "not implemented",
        "params": {
          "clbToken": "The address of the Chromatic liquidity token.",
          "clbTokenIds": "The array of the Chromatic liquidity token IDs to be removed.",
          "data": "Additional data associated with the liquidity removal."
        }
      },
      "removeLiquidityCallback(address,uint256,bytes)": {
        "details": "not implemented",
        "params": {
          "clbToken": "The address of the Chromatic liquidity token.",
          "clbTokenId": "The ID of the Chromatic liquidity token to be removed.",
          "data": "Additional data associated with the liquidity removal."
        }
      },
      "settleTask(uint256)": {
        "details": "called by Keeper only"
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "withdrawLiquidityBatchCallback(uint256[],int16[],uint256[],uint256[],bytes)": {
        "details": "not implemented",
        "params": {
          "burnedCLBTokenAmounts": "The array of CLB token amounts burned for each receipt in the batch.",
          "data": "Additional data associated with the liquidity withdrawal.",
          "feeRates": "The array of trading fee rates associated with each withdrawal in the batch.",
          "receiptIds": "The array of the liquidity receipt IDs.",
          "withdrawnAmounts": "The array of withdrawn liquidity amounts for each receipt in the batch."
        }
      },
      "withdrawLiquidityCallback(uint256,int16,uint256,uint256,bytes)": {
        "details": "not implemented",
        "params": {
          "burnedCLBTokenAmount": "The amount of CLB tokens burned during the withdrawal.",
          "data": "Additional data associated with the liquidity withdrawal.",
          "feeRate": "The trading fee rate associated with the liquidity withdrawal.",
          "receiptId": "The ID of the liquidity withdrawal receipt.",
          "withdrawnAmount": "The amount of liquidity that has been withdrawn."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidityBatchCallback(address,address,bytes)": {
        "notice": "Handles the callback after adding liquidity to the Chromatic protocol."
      },
      "addLiquidityCallback(address,address,bytes)": {
        "notice": "Handles the callback after adding liquidity to the Chromatic protocol."
      },
      "claimLiquidityBatchCallback(uint256[],int16[],uint256[],uint256[],bytes)": {
        "notice": "Handles the callback after claiming liquidity from the Chromatic protocol."
      },
      "claimLiquidityCallback(uint256,int16,uint256,uint256,bytes)": {
        "notice": "Handles the callback after claiming liquidity from the Chromatic protocol."
      },
      "removeLiquidityBatchCallback(address,uint256[],bytes)": {
        "notice": "Handles the callback after removing liquidity from the Chromatic protocol."
      },
      "removeLiquidityCallback(address,uint256,bytes)": {
        "notice": "Handles the callback after removing liquidity from the Chromatic protocol."
      },
      "withdrawLiquidityBatchCallback(uint256[],int16[],uint256[],uint256[],bytes)": {
        "notice": "Handles the callback after withdrawing liquidity from the Chromatic protocol."
      },
      "withdrawLiquidityCallback(uint256,int16,uint256,uint256,bytes)": {
        "notice": "Handles the callback after withdrawing liquidity from the Chromatic protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4155,
        "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4161,
        "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4163,
        "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4165,
        "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 4167,
        "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 9019,
        "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
        "label": "s_meta",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(LPMeta)8966_storage"
      },
      {
        "astId": 9022,
        "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
        "label": "s_config",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Config)8978_storage"
      },
      {
        "astId": 9025,
        "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
        "label": "s_state",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(State)9016_storage"
      },
      {
        "astId": 11582,
        "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
        "label": "s_task",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(Tasks)11579_storage"
      },
      {
        "astId": 9514,
        "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
        "label": "_owner",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int16)dyn_storage": {
        "base": "t_int16",
        "encoding": "dynamic_array",
        "label": "int16[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IChromaticMarket)462": {
        "encoding": "inplace",
        "label": "contract IChromaticMarket",
        "numberOfBytes": "20"
      },
      "t_enum(ChromaticLPAction)15675": {
        "encoding": "inplace",
        "label": "enum ChromaticLPAction",
        "numberOfBytes": "1"
      },
      "t_int16": {
        "encoding": "inplace",
        "label": "int16",
        "numberOfBytes": "2"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UintSet)8600_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)8600_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_int16,t_uint16)": {
        "encoding": "mapping",
        "key": "t_int16",
        "label": "mapping(int16 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_int16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_int16",
        "label": "mapping(int16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(ChromaticLPReceipt)15689_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ChromaticLPReceipt)",
        "numberOfBytes": "32",
        "value": "t_struct(ChromaticLPReceipt)15689_storage"
      },
      "t_mapping(t_uint256,t_struct(UintSet)8600_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)8600_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ChromaticLPReceipt)15689_storage": {
        "encoding": "inplace",
        "label": "struct ChromaticLPReceipt",
        "members": [
          {
            "astId": 15677,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15679,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "oracleVersion",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15681,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15683,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "pendingLiquidity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15685,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "recipient",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 15688,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "action",
            "offset": 20,
            "slot": "4",
            "type": "t_enum(ChromaticLPAction)15675"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Config)8978_storage": {
        "encoding": "inplace",
        "label": "struct ChromaticLPStorage.Config",
        "members": [
          {
            "astId": 8969,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "market",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IChromaticMarket)462"
          },
          {
            "astId": 8971,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "utilizationTargetBPS",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8973,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "rebalanceBPS",
            "offset": 22,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8975,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "rebalanceCheckingInterval",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8977,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "settleCheckingInterval",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LPMeta)8966_storage": {
        "encoding": "inplace",
        "label": "struct ChromaticLPStorage.LPMeta",
        "members": [
          {
            "astId": 8963,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "lpName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8965,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "tag",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)8128_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 8123,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8127,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(State)9016_storage": {
        "encoding": "inplace",
        "label": "struct ChromaticLPStorage.State",
        "members": [
          {
            "astId": 8981,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "feeRates",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_int16)dyn_storage"
          },
          {
            "astId": 8985,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "distributionRates",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_int16,t_uint16)"
          },
          {
            "astId": 8988,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "clbTokenIds",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 8993,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "receipts",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_struct(ChromaticLPReceipt)15689_storage)"
          },
          {
            "astId": 8998,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "lpReceiptMap",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(UintSet)8600_storage)"
          },
          {
            "astId": 9002,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "providerMap",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 9007,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "providerReceiptIds",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_struct(UintSet)8600_storage)"
          },
          {
            "astId": 9009,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "pendingAddAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 9013,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "pendingRemoveClbAmounts",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_int16,t_uint256)"
          },
          {
            "astId": 9015,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "receiptId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Tasks)11579_storage": {
        "encoding": "inplace",
        "label": "struct ChromaticLPStorageGelato.Tasks",
        "members": [
          {
            "astId": 11574,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "rebalanceTaskId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 11578,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "settleTasks",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_bytes32)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)8600_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 8599,
            "contract": "contracts/lp/contracts/gelato/ChromaticLPGelato.sol:ChromaticLPGelato",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8128_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}