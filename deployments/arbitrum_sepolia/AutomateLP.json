{
  "address": "0xb30308c400123aC39049FFfa42fEBc8446A9400d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gelatoAutomate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRebalanceTaskExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAutomationCalled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAccessableByOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "CancelTaskFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "CancelTaskSucceeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "CancleRebalanceTaskFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "CancleRebalanceTaskSucceeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "CancleSettleTaskFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "CancleSettleTaskSucceeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "automate",
      "outputs": [
        {
          "internalType": "contract IAutomate",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelRebalanceTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "cancelSettleTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "cancelTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createRebalanceTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "createSettleTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dedicatedMsgSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChromaticLP",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "getRebalanceTaskId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChromaticLP",
          "name": "lp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "getSettleTaskId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "resolveRebalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "resolveSettle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbb41652ecd8d054a14ed749dbd6d0635c345ab81018f26e1ade65cfa43e6ff80",
  "receipt": {
    "to": null,
    "from": "0x3bD0496CA35b200FCc21CAc644208F7b11838EF6",
    "contractAddress": "0xb30308c400123aC39049FFfa42fEBc8446A9400d",
    "transactionIndex": 1,
    "gasUsed": "1705919",
    "logsBloom": "0x
    "blockHash": "0xd3ba8a8740cae518169c1bd3ad4cc1cdb31bec1a5691ddae9d5d3317871fd1da",
    "transactionHash": "0xbb41652ecd8d054a14ed749dbd6d0635c345ab81018f26e1ade65cfa43e6ff80",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 2847564,
        "transactionHash": "0xbb41652ecd8d054a14ed749dbd6d0635c345ab81018f26e1ade65cfa43e6ff80",
        "address": "0xb30308c400123aC39049FFfa42fEBc8446A9400d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003bd0496ca35b200fcc21cac644208f7b11838ef6"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd3ba8a8740cae518169c1bd3ad4cc1cdb31bec1a5691ddae9d5d3317871fd1da"
      }
    ],
    "blockNumber": 2847564,
    "cumulativeGasUsed": "1705919",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2A6C106ae13B558BB9E2Ec64Bd2f1f7BEFF3A5E0"
  ],
  "numDeployments": 1,
  "solcInputHash": "a008d515ea673f5cc92f1b6fa698c223",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gelatoAutomate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRebalanceTaskExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAutomationCalled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAccessableByOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"CancelTaskFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"CancelTaskSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"CancleRebalanceTaskFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"CancleRebalanceTaskSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"CancleSettleTaskFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"CancleSettleTaskSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"automate\",\"outputs\":[{\"internalType\":\"contract IAutomate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelRebalanceTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"cancelSettleTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"cancelTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createRebalanceTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"createSettleTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dedicatedMsgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChromaticLP\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"getRebalanceTaskId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChromaticLP\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"getSettleTaskId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"resolveRebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"resolveSettle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AlreadyRebalanceTaskExist()\":[{\"details\":\"Emitted when attempting to create a rebalance task while one already exists.\"}],\"NotAutomationCalled()\":[{\"details\":\"Emitted when a function is called by an unauthorized address.\"}],\"OnlyAccessableByOwner()\":[{\"details\":\"Signifies that the function is only accessible by the owner\"}]},\"events\":{\"CancleRebalanceTaskFailed(address,bytes32)\":{\"details\":\"Emitted when a rebalance task cancellation fails.\",\"params\":{\"lp\":\"The address of the liquidity provider.\",\"taskId\":\"The unique identifier of the cancelled rebalance task.\"}},\"CancleRebalanceTaskSucceeded(address,bytes32)\":{\"details\":\"Emitted when a rebalance task cancellation is successful.\",\"params\":{\"lp\":\"The address of the liquidity provider.\",\"taskId\":\"The unique identifier of the cancelled rebalance task.\"}},\"CancleSettleTaskFailed(address,uint256,bytes32)\":{\"details\":\"Emitted when a settle task cancellation fails.\",\"params\":{\"lp\":\"The address of the liquidity provider.\",\"receiptId\":\"The unique identifier of the cancelled settle task.\",\"taskId\":\"The unique identifier of the cancelled settle task.\"}},\"CancleSettleTaskSucceeded(address,uint256,bytes32)\":{\"details\":\"Emitted when a settle task cancellation is successful.\",\"params\":{\"lp\":\"The address of the liquidity provider.\",\"receiptId\":\"The unique identifier of the cancelled settle task.\",\"taskId\":\"The unique identifier of the cancelled settle task.\"}}},\"kind\":\"dev\",\"methods\":{\"cancelRebalanceTask()\":{\"details\":\"Cancels the existing rebalance task for the specified LP (msg.sender).\"},\"cancelSettleTask(uint256)\":{\"details\":\"Cancels the existing settle task for a specific receipt ID.\",\"params\":{\"receiptId\":\"The unique identifier of the receipt associated with the task.\"}},\"cancelTask(bytes32)\":{\"details\":\"Cancels the existing task for a specific task ID.\",\"params\":{\"taskId\":\"The unique identifier of the task.\"}},\"createRebalanceTask()\":{\"details\":\"Initiates the creation of a rebalance task for the specified LP (msg.sender).\"},\"createSettleTask(uint256)\":{\"details\":\"Initiates the creation of a settle task for a specific receipt ID.\",\"params\":{\"receiptId\":\"The unique identifier of the receipt associated with the task.\"}},\"getRebalanceTaskId(address)\":{\"details\":\"Gets the task ID of the existing rebalance task for the specified LP.\",\"params\":{\"lp\":\"The address of the liquidity provider.\"},\"returns\":{\"_0\":\"The task ID of the rebalance task.\"}},\"getSettleTaskId(address,uint256)\":{\"details\":\"Gets the task ID of the existing settle task for the specified LP and receipt ID.\",\"params\":{\"lp\":\"The address of the liquidity provider.\",\"receiptId\":\"The unique identifier of the receipt associated with the task.\"},\"returns\":{\"_0\":\"The task ID of the settle task.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"rebalance(address)\":{\"details\":\"Executes the rebalance task for the specified LP.\",\"params\":{\"lp\":\"The address of the liquidity provider.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"resolveRebalance(address)\":{\"details\":\"Checks whether a rebalance task is needed for the specified LP.\",\"params\":{\"lp\":\"The address of the liquidity provider.\"},\"returns\":{\"performData\":\"Additional data required for performing the task.\",\"upkeepNeeded\":\"Indicates whether upkeep is needed.\"}},\"resolveSettle(address,uint256)\":{\"details\":\"Checks whether a settle task is needed for the specified LP and receipt ID.\",\"params\":{\"lp\":\"The address of the liquidity provider.\",\"receiptId\":\"The unique identifier of the receipt associated with the task.\"},\"returns\":{\"performData\":\"Additional data required for performing the task.\",\"upkeepNeeded\":\"Indicates whether upkeep is needed.\"}},\"settle(address,uint256)\":{\"details\":\"Executes the settle task for the specified LP and receipt ID.\",\"params\":{\"lp\":\"The address of the liquidity provider.\",\"receiptId\":\"The unique identifier of the receipt associated with the task.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lp/AutomateLP.sol\":\"AutomateLP\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":30000},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":~/=contracts/\"]},\"sources\":{\"@chromatic-protocol/contracts/core/automation/gelato/AutomateReady.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@chromatic-protocol/contracts/core/automation/gelato/Types.sol\\\";\\n\\n/**\\n * @dev Inherit this contract to allow your smart contract to\\n * - Make synchronous fee payments.\\n * - Have call restrictions for functions to be automated.\\n */\\n// solhint-disable private-vars-leading-underscore\\nabstract contract AutomateReady {\\n    IAutomate public immutable automate;\\n    address public immutable dedicatedMsgSender;\\n    address private immutable feeCollector;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    event CancelTaskSucceeded(bytes32 indexed taskId);\\n    event CancelTaskFailed(bytes32 indexed taskId);\\n\\n    /**\\n     * @dev\\n     * Only tasks created by _taskCreator defined in constructor can call\\n     * the functions with this modifier.\\n     */\\n    modifier onlyDedicatedMsgSender() {\\n        require(msg.sender == dedicatedMsgSender, \\\"Only dedicated msg.sender\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev\\n     * _taskCreator is the address which will create tasks for this contract.\\n     */\\n    constructor(address _automate, address _taskCreator) {\\n        automate = IAutomate(_automate);\\n        IGelato gelato = IGelato(IAutomate(_automate).gelato());\\n\\n        feeCollector = gelato.feeCollector();\\n\\n        address proxyModuleAddress = IAutomate(_automate).taskModuleAddresses(Module.PROXY);\\n\\n        address opsProxyFactoryAddress = IProxyModule(proxyModuleAddress).opsProxyFactory();\\n\\n        (dedicatedMsgSender, ) = IOpsProxyFactory(opsProxyFactoryAddress).getProxyOf(_taskCreator);\\n    }\\n\\n    /**\\n     * @dev\\n     * Transfers fee to gelato for synchronous fee payments.\\n     *\\n     * _fee & _feeToken should be queried from IAutomate.getFeeDetails()\\n     */\\n    function _transfer(uint256 _fee, address _feeToken) internal {\\n        if (_feeToken == ETH) {\\n            (bool success, ) = feeCollector.call{value: _fee}(\\\"\\\");\\n            require(success, \\\"_transfer: ETH transfer failed\\\");\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(_feeToken), feeCollector, _fee);\\n        }\\n    }\\n\\n    function _getFeeDetails() internal view returns (uint256 fee, address feeToken) {\\n        (fee, feeToken) = automate.getFeeDetails();\\n    }\\n}\\n\",\"keccak256\":\"0xc0d1610db4bcc858fa1cc17b53ffb807706f5c3cadf6c865b8cede51b3914edb\",\"license\":\"UNLICENSED\"},\"@chromatic-protocol/contracts/core/automation/gelato/Types.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nenum Module {\\n    RESOLVER,\\n    DEPRECATED_TIME,\\n    PROXY,\\n    SINGLE_EXEC,\\n    WEB3_FUNCTION,\\n    TRIGGER\\n}\\n\\nenum TriggerType {\\n    TIME,\\n    CRON,\\n    EVENT,\\n    BLOCK\\n}\\n\\nstruct ModuleData {\\n    Module[] modules;\\n    bytes[] args;\\n}\\n\\ninterface IAutomate {\\n    function createTask(\\n        address execAddress,\\n        bytes calldata execDataOrSelector,\\n        ModuleData calldata moduleData,\\n        address feeToken\\n    ) external returns (bytes32 taskId);\\n\\n    function cancelTask(bytes32 taskId) external;\\n\\n    function getFeeDetails() external view returns (uint256, address);\\n\\n    function gelato() external view returns (address payable);\\n\\n    function taskModuleAddresses(Module) external view returns (address);\\n}\\n\\ninterface IProxyModule {\\n    function opsProxyFactory() external view returns (address);\\n}\\n\\ninterface IOpsProxyFactory {\\n    function getProxyOf(address account) external view returns (address, bool);\\n}\\n\\ninterface IGelato1Balance {\\n    function depositNative(address _sponsor) external payable;\\n\\n    function depositToken(\\n        address _sponsor,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n}\\n\\ninterface IGelato {\\n    function feeCollector() external view returns (address);\\n}\\n\",\"keccak256\":\"0xebf9ce67f80b133478d21048ffcee370777f28f497d5466990bb4703178be51f\",\"license\":\"UNLICENSED\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/lp/AutomateLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IAutomateLP} from \\\"~/lp/interfaces/IAutomateLP.sol\\\";\\nimport {AutomateReady} from \\\"@chromatic-protocol/contracts/core/automation/gelato/AutomateReady.sol\\\";\\nimport {Module, ModuleData, TriggerType} from \\\"@chromatic-protocol/contracts/core/automation/gelato/Types.sol\\\";\\nimport {IChromaticLP} from \\\"~/lp/interfaces/IChromaticLP.sol\\\";\\n\\ncontract AutomateLP is ReentrancyGuard, AutomateReady, Ownable, IAutomateLP {\\n    /**\\n     * @title LPTasks\\n     * @dev A struct representing tasks associated with Chromatic LP operations.\\n     * @param rebalanceTaskId The task ID for rebalance operations.\\n     * @param settleTasks A mapping from receipt ID to the corresponding settle task ID.\\n     */\\n    struct LPTasks {\\n        bytes32 rebalanceTaskId;\\n        mapping(uint256 => bytes32) settleTasks;\\n    }\\n\\n    mapping(IChromaticLP => LPTasks) internal _taskMap;\\n\\n    constructor(\\n        address gelatoAutomate\\n    ) ReentrancyGuard() AutomateReady(gelatoAutomate, address(this)) Ownable() {}\\n\\n    modifier onlyAutomation() virtual {\\n        if (msg.sender != dedicatedMsgSender) revert NotAutomationCalled();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks if the caller is the owner of the contract.\\n     */\\n    function _checkOwner() internal view override {\\n        if (owner() != _msgSender()) revert OnlyAccessableByOwner();\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function getRebalanceTaskId(IChromaticLP lp) public view returns (bytes32) {\\n        return _taskMap[lp].rebalanceTaskId;\\n    }\\n\\n    function _setRebalanceTaskId(IChromaticLP lp, bytes32 rebalanceTaskId) internal {\\n        _taskMap[lp].rebalanceTaskId = rebalanceTaskId;\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function getSettleTaskId(IChromaticLP lp, uint256 receiptId) public view returns (bytes32) {\\n        return _taskMap[lp].settleTasks[receiptId];\\n    }\\n\\n    function _setSettleTaskId(IChromaticLP lp, uint256 receiptId, bytes32 taskId) internal {\\n        _taskMap[lp].settleTasks[receiptId] = taskId;\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function createRebalanceTask() external nonReentrant {\\n        IChromaticLP lp = IChromaticLP(msg.sender);\\n        bytes32 rebalanceTaskId = getRebalanceTaskId(lp);\\n        if (rebalanceTaskId != 0) revert AlreadyRebalanceTaskExist();\\n        //slither-disable-next-line reentrancy-no-eth\\n        rebalanceTaskId = _createTimeTask(\\n            abi.encodeCall(this.resolveRebalance, (msg.sender)),\\n            abi.encodeCall(this.rebalance, (msg.sender)),\\n            IChromaticLP(msg.sender).rebalanceCheckingInterval()\\n        );\\n        _setRebalanceTaskId(lp, rebalanceTaskId);\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function cancelRebalanceTask() external {\\n        IChromaticLP lp = IChromaticLP(msg.sender);\\n\\n        bytes32 rebalanceTaskId = getRebalanceTaskId(lp);\\n\\n        if (rebalanceTaskId != 0) {\\n            _setRebalanceTaskId(lp, 0);\\n            // slither-disable-next-line reentrancy-events\\n            try automate.cancelTask(rebalanceTaskId) {\\n                emit CancleRebalanceTaskSucceeded(address(lp), rebalanceTaskId);\\n            } catch {\\n                emit CancleRebalanceTaskFailed(address(lp), rebalanceTaskId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function resolveRebalance(\\n        address lp\\n    ) external view returns (bool upkeepNeeded, bytes memory performData) {\\n        if (IChromaticLP(lp).checkRebalance()) {\\n            return (true, abi.encodeCall(this.rebalance, (lp)));\\n        }\\n        return (false, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function rebalance(address lp) external onlyAutomation {\\n        (uint256 fee, address feePayee) = _getFeeInfo();\\n\\n        IChromaticLP(lp).rebalance(feePayee, fee);\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function createSettleTask(uint256 receiptId) external nonReentrant {\\n        IChromaticLP lp = IChromaticLP(msg.sender); // called by LP\\n\\n        if (getSettleTaskId(lp, receiptId) == 0) {\\n            //slither-disable-next-line reentrancy-no-eth\\n            bytes32 taskId = _createSingleExecTask(\\n                abi.encodeCall(this.resolveSettle, (msg.sender, receiptId)),\\n                abi.encodeCall(this.settle, (msg.sender, receiptId))\\n            );\\n            _setSettleTaskId(lp, receiptId, taskId);\\n        }\\n    }\\n\\n    function _createSingleExecTask(\\n        bytes memory resolver,\\n        bytes memory execSelector\\n    ) internal returns (bytes32) {\\n        ModuleData memory moduleData = ModuleData({modules: new Module[](4), args: new bytes[](4)});\\n\\n        moduleData.modules[0] = Module.RESOLVER;\\n        moduleData.modules[1] = Module.PROXY;\\n        moduleData.modules[2] = Module.SINGLE_EXEC;\\n        moduleData.modules[3] = Module.TRIGGER;\\n        moduleData.args[0] = abi.encode(address(this), resolver);\\n        moduleData.args[1] = bytes(\\\"\\\");\\n        moduleData.args[2] = bytes(\\\"\\\");\\n        moduleData.args[3] = abi.encode(TriggerType.BLOCK, bytes(\\\"\\\"));\\n\\n        return automate.createTask(address(this), execSelector, moduleData, ETH);\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function cancelSettleTask(uint256 receiptId) external {\\n        IChromaticLP lp = IChromaticLP(msg.sender);\\n\\n        bytes32 taskId = getSettleTaskId(lp, receiptId);\\n        if (taskId != 0) {\\n            _setSettleTaskId(lp, receiptId, 0);\\n            // slither-disable-next-line reentrancy-events\\n            try automate.cancelTask(taskId) {\\n                emit CancleSettleTaskSucceeded(address(lp), receiptId, taskId);\\n            } catch {\\n                emit CancleSettleTaskFailed(address(lp), receiptId, taskId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function settle(address lp, uint256 receiptId) external onlyAutomation {\\n        (uint256 fee, address feePayee) = _getFeeInfo();\\n\\n        IChromaticLP(lp).settleTask(receiptId, feePayee, fee);\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function resolveSettle(\\n        address lp,\\n        uint256 receiptId\\n    ) external view returns (bool upkeepNeeded, bytes memory performData) {\\n        if (IChromaticLP(lp).checkSettle(receiptId)) {\\n            return (true, abi.encodeCall(this.settle, (lp, receiptId)));\\n        }\\n        return (false, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function cancelTask(bytes32 taskId) external onlyOwner {\\n        automate.cancelTask(taskId);\\n    }\\n\\n    function _createTimeTask(\\n        bytes memory resolver,\\n        bytes memory execSelector,\\n        uint256 interval\\n    ) internal returns (bytes32) {\\n        ModuleData memory moduleData = ModuleData({modules: new Module[](3), args: new bytes[](3)});\\n        moduleData.modules[0] = Module.RESOLVER;\\n        moduleData.modules[1] = Module.PROXY;\\n        moduleData.modules[2] = Module.TRIGGER;\\n        moduleData.args[0] = abi.encode(address(this), resolver);\\n        moduleData.args[1] = bytes(\\\"\\\");\\n        moduleData.args[2] = _timeTriggerModuleArg(block.timestamp, interval);\\n\\n        return automate.createTask(address(this), execSelector, moduleData, ETH);\\n    }\\n\\n    function _timeTriggerModuleArg(\\n        uint256 _startTime,\\n        uint256 _interval\\n    ) internal pure returns (bytes memory) {\\n        bytes memory triggerConfig = abi.encode(uint128(_startTime), uint128(_interval));\\n        return abi.encode(TriggerType.TIME, triggerConfig);\\n    }\\n\\n    function _getFeeInfo() internal view returns (uint256 fee, address feePayee) {\\n        (fee, ) = _getFeeDetails();\\n        feePayee = automate.gelato();\\n    }\\n}\\n\",\"keccak256\":\"0x414a478802f49998870a238c9bbefaa00fa2392a8504267e4575ce68e6f530ee\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IAutomateLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {IChromaticLP} from \\\"~/lp/interfaces/IChromaticLP.sol\\\";\\n\\n/**\\n * @title IAutomateLP\\n * @dev Interface for automating tasks related to liquidity providers (LPs) within a protocol.\\n */\\ninterface IAutomateLP {\\n    /**\\n     * @dev Emitted when a function is called by an unauthorized address.\\n     */\\n    error NotAutomationCalled();\\n\\n    /**\\n     * @dev Emitted when attempting to create a rebalance task while one already exists.\\n     */\\n    error AlreadyRebalanceTaskExist();\\n\\n    /**\\n     * @dev Signifies that the function is only accessible by the owner\\n     */\\n    error OnlyAccessableByOwner();\\n\\n   /**\\n     * @dev Emitted when a rebalance task cancellation is successful.\\n     * @param lp The address of the liquidity provider.\\n     * @param taskId The unique identifier of the cancelled rebalance task.\\n     */\\n    event CancleRebalanceTaskSucceeded(address lp, bytes32 taskId);\\n\\n    /**\\n     * @dev Emitted when a rebalance task cancellation fails.\\n     * @param lp The address of the liquidity provider.\\n     * @param taskId The unique identifier of the cancelled rebalance task.\\n     */\\n    event CancleRebalanceTaskFailed(address lp, bytes32 taskId);\\n\\n    /**\\n     * @dev Emitted when a settle task cancellation is successful.\\n     * @param lp The address of the liquidity provider.\\n     * @param receiptId The unique identifier of the cancelled settle task.\\n     * @param taskId The unique identifier of the cancelled settle task.\\n     */\\n    event CancleSettleTaskSucceeded(address lp, uint256 receiptId, bytes32 taskId);\\n\\n    /**\\n     * @dev Emitted when a settle task cancellation fails.\\n     * @param lp The address of the liquidity provider.\\n     * @param receiptId The unique identifier of the cancelled settle task.\\n     * @param taskId The unique identifier of the cancelled settle task.\\n     */\\n    event CancleSettleTaskFailed(address lp, uint256 receiptId, bytes32 taskId);\\n\\n    /**\\n     * @dev Initiates the creation of a rebalance task for the specified LP (msg.sender).\\n     */\\n    function createRebalanceTask() external;\\n\\n    /**\\n     * @dev Cancels the existing rebalance task for the specified LP (msg.sender).\\n     */\\n    function cancelRebalanceTask() external;\\n\\n    /**\\n     * @dev Checks whether a rebalance task is needed for the specified LP.\\n     * @param lp The address of the liquidity provider.\\n     * @return upkeepNeeded Indicates whether upkeep is needed.\\n     * @return performData Additional data required for performing the task.\\n     */\\n    function resolveRebalance(\\n        address lp\\n    ) external view returns (bool upkeepNeeded, bytes memory performData);\\n\\n    /**\\n     * @dev Executes the rebalance task for the specified LP.\\n     * @param lp The address of the liquidity provider.\\n     */\\n    function rebalance(address lp) external;\\n\\n    /**\\n     * @dev Initiates the creation of a settle task for a specific receipt ID.\\n     * @param receiptId The unique identifier of the receipt associated with the task.\\n     */\\n    function createSettleTask(uint256 receiptId) external;\\n\\n    /**\\n     * @dev Cancels the existing settle task for a specific receipt ID.\\n     * @param receiptId The unique identifier of the receipt associated with the task.\\n     */\\n    function cancelSettleTask(uint256 receiptId) external;\\n\\n    /**\\n     * @dev Checks whether a settle task is needed for the specified LP and receipt ID.\\n     * @param lp The address of the liquidity provider.\\n     * @param receiptId The unique identifier of the receipt associated with the task.\\n     * @return upkeepNeeded Indicates whether upkeep is needed.\\n     * @return performData Additional data required for performing the task.\\n     */\\n    function resolveSettle(\\n        address lp,\\n        uint256 receiptId\\n    ) external view returns (bool upkeepNeeded, bytes memory performData);\\n\\n    /**\\n     * @dev Executes the settle task for the specified LP and receipt ID.\\n     * @param lp The address of the liquidity provider.\\n     * @param receiptId The unique identifier of the receipt associated with the task.\\n     */\\n    function settle(address lp, uint256 receiptId) external;\\n\\n    /**\\n     * @dev Gets the task ID of the existing rebalance task for the specified LP.\\n     * @param lp The address of the liquidity provider.\\n     * @return The task ID of the rebalance task.\\n     */\\n    function getRebalanceTaskId(IChromaticLP lp) external view returns (bytes32);\\n\\n    /**\\n     * @dev Gets the task ID of the existing settle task for the specified LP and receipt ID.\\n     * @param lp The address of the liquidity provider.\\n     * @param receiptId The unique identifier of the receipt associated with the task.\\n     * @return The task ID of the settle task.\\n     */\\n    function getSettleTaskId(IChromaticLP lp, uint256 receiptId) external view returns (bytes32);\\n\\n    /**\\n     * @dev Cancels the existing task for a specific task ID.\\n     * @param taskId The unique identifier of the task.\\n     */\\n    function cancelTask(bytes32 taskId) external;\\n}\\n\",\"keccak256\":\"0x6b4b2dc7d60d82ee7ed6effbea437ca6c76a91b0140d19374c1bde4ec3204a37\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IChromaticLPLiquidity} from \\\"./IChromaticLPLiquidity.sol\\\";\\nimport {IChromaticLPAdmin} from \\\"./IChromaticLPAdmin.sol\\\";\\nimport {IChromaticLPAutomate} from \\\"./IChromaticLPAutomate.sol\\\";\\nimport {IChromaticLPLens} from \\\"./IChromaticLPLens.sol\\\";\\nimport {IChromaticLPMeta} from \\\"./IChromaticLPMeta.sol\\\";\\nimport {IChromaticLPEvents} from \\\"./IChromaticLPEvents.sol\\\";\\nimport {IChromaticLPErrors} from \\\"./IChromaticLPErrors.sol\\\";\\n\\n/**\\n * @title The IChromaticLP interface consolidates several other interfaces, allowing developers to access a wide range of functionalities related to Chromatic Protocol liquidity providers. It includes methods from liquidity management, metadata retrieval, lens queries, administration, event tracking, and error handling.\\n */\\ninterface IChromaticLP is\\n    IChromaticLPLiquidity,\\n    IChromaticLPLens,\\n    IChromaticLPMeta,\\n    IChromaticLPAdmin,\\n    IChromaticLPAutomate,\\n    IChromaticLPEvents,\\n    IChromaticLPErrors\\n{\\n    /**\\n     * @dev Retrieves the address of the market associated with the Chromatic Protocol liquidity provider.\\n     * @return The address of the market associated with the liquidity provider.\\n     */\\n    function market() external view returns (address);\\n\\n    /**\\n     * @dev Retrieves the address of the settlement token associated with the Chromatic Protocol liquidity provider.\\n     * @return The address of the settlement token used in the liquidity provider.\\n     */\\n    function settlementToken() external view returns (address);\\n\\n    /**\\n     * @dev Retrieves the address of the LP token associated with the Chromatic Protocol liquidity provider.\\n     * @return The address of the LP (Liquidity Provider) token issued by the liquidity provider.\\n     */\\n    function lpToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8d20f2d94a57e547f017efaaa4adda025b08ec3e4fbd169318c5085b32522c94\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title The IChromaticLPAdmin interface is designed to facilitate the administration of liquidity provider within the Chromatic Protocol.\\n * @author\\n * @notice\\n */\\ninterface IChromaticLPAdmin {\\n    /**\\n     * @dev Initiates the creation of a rebalance task in the liquidity provider.\\n     * This is allowed for the owner of LP contract to call\\n     */\\n    function createRebalanceTask() external;\\n\\n    /**\\n     * @dev Cancels the currently active rebalance task in the liquidity provider.\\n     * This is allowed for the owner of LP contract to call\\n     */\\n    function cancelRebalanceTask() external;\\n\\n    /**\\n     * @dev Cancels the settle task in the liquidity provider.\\n     * This is allowed for the owner of LP contract to call\\n     * @param  receiptId The receipt ID associated with the settle execution.\\n     */\\n    function cancelSettleTask(uint256 receiptId) external;\\n\\n    /**\\n     * @dev Additional data to be used in the rebalance process.\\n     * @param _automationFeeReserved The new value for the reserved automation fee.\\n     */\\n    function setAutomationFeeReserved(uint256 _automationFeeReserved) external;\\n\\n    /**\\n     * @dev Additional data to be used in the rebalance process.\\n     * @param _minHoldingValueToRebalance The new value for the required minimum amount to trigger rebalance.\\n     */\\n    function setMinHoldingValueToRebalance(uint256 _minHoldingValueToRebalance) external;\\n}\\n\",\"keccak256\":\"0x0a71344a9f042f7785fcc3cfc6b3c4643bb4130a89a9af693b8767ad429fc7eb\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPAutomate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IAutomateLP} from \\\"~/lp/interfaces/IAutomateLP.sol\\\";\\n\\n/**\\n * @title IChromaticLPAutomate\\n * @dev Interface for automating tasks related to Chromatic Liquidity Providers (LPs).\\n */\\ninterface IChromaticLPAutomate {\\n    /**\\n     * @dev Checks whether a rebalance task is needed.\\n     * @return A boolean indicating whether a rebalance task is needed.\\n     */\\n    function checkRebalance() external view returns (bool);\\n\\n    /**\\n     * @dev Initiates a rebalance task, providing fees for the keeper.\\n     * @param feePayee The address to receive the keeper fees.\\n     * @param keeperFee The amount of native tokens to be paid as keeper fees.\\n     */\\n    function rebalance(address feePayee, uint256 keeperFee) external;\\n\\n    /**\\n     * @dev Checks whether a settle task is needed for a specific receipt ID.\\n     * @param receiptId The unique identifier of the receipt associated with the task.\\n     * @return A boolean indicating whether a settle task is needed.\\n     */\\n    function checkSettle(uint256 receiptId) external view returns (bool);\\n\\n    /**\\n     * @dev Initiates a settle task for a specific receipt ID, providing fees for the keeper.\\n     * @param receiptId The unique identifier of the receipt associated with the task.\\n     * @param feePayee The address to receive the keeper fees.\\n     * @param keeperFee The amount of native tokens to be paid as keeper fees.\\n     */\\n    function settleTask(uint256 receiptId, address feePayee, uint256 keeperFee) external;\\n\\n    /**\\n     * @notice Sets the AutomateLP contract address.\\n     * @param automate The address of the AutomateLP contract.\\n     */\\n    function setAutomateLP(IAutomateLP automate) external;\\n\\n    /**\\n     * @notice Gets the current AutomateLP contract address.\\n     * @return The address of the AutomateLP contract.\\n     */\\n    function getAutomateLP() external view returns (IAutomateLP);\\n}\\n\",\"keccak256\":\"0x4f736356f502273cb4b310ce744ab39c96f8689b4310f0b973c9f68f6a41c745\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPConfigLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IChromaticLPConfigLens\\n * @dev Interface for viewing the configuration parameters of a Chromatic Protocol liquidity provider.\\n */\\ninterface IChromaticLPConfigLens {\\n    /**\\n     * @dev Emitted when the automation fee reserved value is updated.\\n     * @param newValue The new value of the automation fee reserved.\\n     */\\n    event SetAutomationFeeReserved(uint256 newValue);\\n\\n    /**\\n     * @dev Emitted when the minimum holding value to trigger rebalance is updated.\\n     * @param newValue The new value of the minimum holding value to rebalance.\\n     */\\n    event SetMinHoldingValueToRebalance(uint256 newValue);\\n\\n    /**\\n     * @dev Retrieves the target utilization rate in basis points (BPS) for the liquidity provider.\\n     * @return The target utilization rate in BPS.\\n     */\\n    function utilizationTargetBPS() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the rebalance basis points (BPS) for the liquidity provider.\\n     * @return The rebalance BPS.\\n     */\\n    function rebalanceBPS() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the time interval in seconds between checks for rebalance conditions.\\n     * @return The rebalance checking interval in seconds.\\n     */\\n    function rebalanceCheckingInterval() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the amount reserved as automation fee for automated operations within the liquidity provider.\\n     * @return The automation fee reserved amount.\\n     */\\n    function automationFeeReserved() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the minimum holding value required to trigger rebalance.\\n     * @return The minimum holding value to rebalance.\\n     */\\n    function minHoldingValueToRebalance() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves an array of distribution rates associated with different fee rates.\\n     * @return An array of distribution rates.\\n     */\\n    function distributionRates() external view returns (uint16[] memory);\\n}\\n\",\"keccak256\":\"0xba90d5dd568a36f426ddb0ff6cbf752624f2ee80532b6b19a5b2acb79a52129f\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title The IChromaticLPErrors interface houses a set of custom errors that developers may encounter when interacting with liquidity providers for the Chromatic Protocol. These errors are designed to provide meaningful feedback about specific issues that may arise during the execution of smart contracts.\\n */\\ninterface IChromaticLPErrors {\\n    /**\\n     * @dev The invalid target basis points.\\n     */\\n    error InvalidUtilizationTarget(uint16 targetBPS);\\n\\n    /**\\n     * @dev Signifies that an invalid rebalance basis points value has been encountered.\\n     */\\n    error InvalidRebalanceBPS();\\n\\n    /**\\n     * @dev Signifies that an invalid minHoldingValueToRebalance value has been encountered.\\n     */\\n    error InvalidMinHoldingValueToRebalance();\\n\\n    /**\\n     * @dev Thrown when the lengths of the fee array and distribution array do not match.\\n     * @param feeLength The length of the fee array.\\n     * @param distributionLength The length of the distribution array.\\n     */\\n    error NotMatchDistributionLength(uint256 feeLength, uint256 distributionLength);\\n\\n    /**\\n     * @dev Indicates that the operation is not applicable to the market.\\n     */\\n    error NotMarket();\\n\\n    /**\\n     * @dev Denotes that the function can only be called within a batch call.\\n     */\\n    error OnlyBatchCall();\\n\\n    /**\\n     * @dev Thrown when an unknown liquidity provider action is encountered\\n     */\\n    error UnknownLPAction();\\n\\n    /**\\n     * @dev Signifies that the caller is not the owner of the contract\\n     */\\n    error NotOwner();\\n\\n    /**\\n     * @dev Thrown when the keeper is not called.\\n     */\\n    error NotKeeperCalled();\\n\\n    /**\\n     * @dev Signifies that the function is only accessible by the owner\\n     */\\n    error OnlyAccessableByOwner();\\n\\n    /**\\n     * @dev Thrown when an automation call is not made\\n     */\\n    error NotAutomationCalled();\\n\\n    /**\\n     * @dev Indicates that the functionality is not implemented in the logic contract.\\n     */\\n    error NotImplementedInLogicContract();\\n\\n    /**\\n     * @dev Throws an error indicating that the amount to add liquidity is too small.\\n     */\\n    error TooSmallAmountToAddLiquidity();\\n}\\n\",\"keccak256\":\"0x3f02973ba51660a5f517ac432a012108a863d48cfb3a00e85cf7ed7b0c83066a\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title The IChromaticLPEvents interface declares events that developers can utilize to track and react to different actions within the Chromatic Protocol. These events offer transparency and can be subscribed to for monitoring the state changes of the liquidity providers.\\n */\\ninterface IChromaticLPEvents {\\n    /**\\n     * @notice Emitted when addLiquidity is performed.\\n     * @param receiptId Unique identifier for the liquidity addition receipt.\\n     * @param provider Address of the liquidity provider.\\n     * @param recipient Address of the recipient.\\n     * @param oracleVersion  Version of the oracle used.\\n     * @param amount Amount of liquidity added in the settlement token.\\n     */\\n    event AddLiquidity(\\n        uint256 indexed receiptId,\\n        address indexed provider,\\n        address indexed recipient,\\n        uint256 oracleVersion,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Emitted when addLiquidity is settled.\\n     * @param receiptId Unique identifier for the liquidity addition receipt.\\n     * @param provider Address of the liquidity provider.\\n     * @param recipient Address of the recipient.\\n     * @param settlementAdded Settlement added to the liquidity\\n     * @param lpTokenAmount Amount of LP tokens issued.\\n     * @param keeperFee Fee paid to the keeper.\\n     */\\n    event AddLiquiditySettled(\\n        uint256 indexed receiptId,\\n        address indexed provider,\\n        address indexed recipient,\\n        uint256 settlementAdded,\\n        uint256 lpTokenAmount,\\n        uint256 keeperFee\\n    );\\n\\n    /**\\n     * @notice Emitted when removeLiquidity is performed.\\n     * @param receiptId Unique identifier for the liquidity removal receipt.\\n     * @param provider Address of the liquidity provider.\\n     * @param recipient Address of the recipient.\\n     * @param oracleVersion Version of the oracle used.\\n     * @param lpTokenAmount Amount of LP tokens to be removed.\\n     */\\n    event RemoveLiquidity(\\n        uint256 indexed receiptId,\\n        address indexed provider,\\n        address indexed recipient,\\n        uint256 oracleVersion,\\n        uint256 lpTokenAmount\\n    );\\n\\n    /**\\n     * @notice Emitted when removeLiquidity is settled.\\n     * @param receiptId Unique identifier for the settled liquidity removal receipt.\\n     * @param provider Address of the liquidity provider.\\n     * @param recipient Address of the recipient.\\n     * @param burningAmount Amount of LP tokens burned.\\n     * @param withdrawnSettlementAmount Withdrawn settlement amount.\\n     * @param refundedAmount Amount refunded to the provider.\\n     * @param keeperFee Fee paid to the keeper.\\n     */\\n    event RemoveLiquiditySettled(\\n        uint256 indexed receiptId,\\n        address indexed provider,\\n        address indexed recipient,\\n        uint256 burningAmount,\\n        uint256 withdrawnSettlementAmount,\\n        uint256 refundedAmount,\\n        uint256 keeperFee\\n    );\\n\\n    /**\\n     * @notice Emitted when rebalance of adding liquidity is performed.\\n     * @param receiptId Unique identifier for the rebalance liquidity addition receipt.\\n     * @param oracleVersion Version of the oracle used.\\n     * @param amount Amount of liquidity added during rebalance.\\n     * @param currentUtility Current utility of the liquidity provider.\\n     */\\n    event RebalanceAddLiquidity(\\n        uint256 indexed receiptId,\\n        uint256 oracleVersion,\\n        uint256 amount,\\n        uint256 currentUtility\\n    );\\n\\n    /**\\n     * @notice Emitted when rebalance of removing liquidity is performed.\\n     * @param receiptId Unique identifier for the rebalance liquidity removal receipt.\\n     * @param oracleVersion Version of the oracle used.\\n     * @param currentUtility Current utility of the liquidity pool.\\n     */\\n    event RebalanceRemoveLiquidity(\\n        uint256 indexed receiptId,\\n        uint256 oracleVersion,\\n        uint256 currentUtility\\n    );\\n\\n    /**\\n     * @notice Emitted when rebalancing is settled.\\n     * @param receiptId Unique identifier for the settled rebalance receipt.\\n     * @param keeperFee Fee paid to the keeper.\\n     */\\n    event RebalanceSettled(uint256 indexed receiptId, uint256 keeperFee);\\n\\n    /**\\n     * @notice Emitted when the AutomateLP address is set.\\n     * @param automate The address of the AutomateLP contract.\\n     */\\n    event SetAutomateLP(address automate);\\n}\\n\",\"keccak256\":\"0xd05dd0077051de9be06047921061ebcedeedd591e988bef0018997774bed8250\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {IChromaticLPConfigLens} from \\\"./IChromaticLPConfigLens.sol\\\";\\n\\nstruct ValueInfo {\\n    uint256 total;\\n    uint256 holding;\\n    uint256 pending;\\n    uint256 holdingClb;\\n    uint256 pendingClb;\\n}\\n\\n/**\\n * @title The IChromaticLPLens interface is designed to offer a lens into the financial and operational aspects of the Chromatic Protocol. Developers can use the functions defined in this interface to retrieve information such as utilization, total value, value breakdowns, fee rates, and token balances.\\n */\\ninterface IChromaticLPLens is IChromaticLPConfigLens {\\n    /**\\n     * @dev The current utilization of the liquidity provider, represented in basis points (BPS)\\n     */\\n    function utilization() external view returns (uint16);\\n\\n    /**\\n     * @dev The total value of the liquidity provider\\n     */\\n    function totalValue() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the total value of the liquidity provider, including both holding and pending values.\\n     * @return info A ValueInfo struct containing total, holding, pending, holdingClb, and pendingClb values.\\n     */\\n    function valueInfo() external view returns (ValueInfo memory info);\\n\\n    /**\\n     * @dev Retrieves the current holding value of the liquidity pool.\\n     * @return The current holding value in the liquidity provider.\\n     */\\n    function holdingValue() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the pending value of the liquidity provider.\\n     * @return pendingValue The pending value in the liquidity pool.\\n     */\\n    function pendingValue() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the current holding CLB value in the liquidity provider.\\n     * @return The current holding CLB value in the liquidity provider.\\n     */\\n    function holdingClbValue() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the pending CLB value in the liquidity provider.\\n     * @return The pending CLB value in the liquidity provider.\\n     */\\n    function pendingClbValue() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the total CLB value in the liquidity provider, combining holding and pending CLB values.\\n     * @return value The total CLB value in the liquidity provider.\\n     */\\n    function totalClbValue() external view returns (uint256 value);\\n\\n    /**\\n     * @dev Retrieves the fee rates associated with various actions in the liquidity provider.\\n     * @return An array of fee rates for different actions within the liquidity pool.\\n     */\\n    function feeRates() external view returns (int16[] memory);\\n\\n    /**\\n     * @dev Retrieves the token IDs of CLB tokens handled in the liquidity provider\\n     * @return tokenIds An array of CLB token IDs handled in the liquidity provider.\\n     */\\n    function clbTokenIds() external view returns (uint256[] memory tokenIds);\\n\\n    /**\\n     * @dev Retrieves the balances of CLB tokens held in the liquidity provider.\\n     * @return balances An array of CLB token balances held in the liquidity provider.\\n     */\\n    function clbTokenBalances() external view returns (uint256[] memory balances);\\n\\n    /**\\n     * @dev Retrieves the values of CLB tokens held in the liquidity provider.\\n     * @return values An array of CLB token value held in the liquidity provider.\\n     */\\n    function clbTokenValues() external view returns (uint256[] memory values);\\n\\n    /**\\n     * @dev An array of pending CLB token balances for removal.\\n     * Retrieves the pending CLB token balances that are pending removal from the liquidity provider.\\n     */\\n    function pendingRemoveClbBalances() external view returns (uint256[] memory pendingBalances);\\n\\n    /**\\n     * @dev Retrieves information about the target of liquidity.\\n     * @return longShortInfo An integer representing long (1), short (-1), or both side(0).\\n     */\\n    function longShortInfo() external view returns (int8);\\n}\\n\",\"keccak256\":\"0x74784853c64a871a4c5cc19e2ee329ef65a8f0ceaeb2b39565257196dee89e65\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ChromaticLPReceipt} from \\\"~/lp/libraries/ChromaticLPReceipt.sol\\\";\\n\\n/**\\n * @title The IChromaticLPLiquidity interface provides methods for adding and removing liquidity, settling transactions, and retrieving information about liquidity receipts. Developers can interact with this interface to facilitate liquidity operations in Chromatic Protocol.\\n */\\ninterface IChromaticLPLiquidity {\\n    /**\\n     * @dev Adds liquidity to the Chromatic Protocol, minting LP tokens for the specified amount and assigning them to the recipient.\\n     * @param amount The amount of liquidity to add.\\n     * @param recipient The address of the recipient for the LP tokens.\\n     * @return ChromaticLPReceipt A data structure representing the receipt of the liquidity addition.\\n     */\\n    function addLiquidity(\\n        uint256 amount,\\n        address recipient\\n    ) external returns (ChromaticLPReceipt memory);\\n\\n    /**\\n     * @dev Removes liquidity from the Chromatic Protocol, burning the specified amount of LP tokens and transferring the corresponding assets to the recipient.\\n     * @param lpTokenAmount The amount of LP tokens to remove.\\n     * @param recipient The address of the recipient for the withdrawn assets.\\n     */\\n    function removeLiquidity(\\n        uint256 lpTokenAmount,\\n        address recipient\\n    ) external returns (ChromaticLPReceipt memory);\\n\\n    /**\\n     * @dev Initiates the settlement process for a specific liquidity receipt identified by receiptId.\\n     * @param receiptId The unique identifier of the liquidity receipt to settle.\\n     * @return true if the settlement is successful, false otherwise.\\n     */\\n    function settle(uint256 receiptId) external returns (bool);\\n\\n    /**\\n     * @dev Retrieves the unique identifiers of all liquidity receipts owned by a given address.\\n     * @param owner The address of the liquidity provider.\\n     * @return receiptIds An array of unique identifiers for the liquidity receipts owned by the specified address.\\n     */\\n    function getReceiptIdsOf(address owner) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Retrieves detailed information about a specific liquidity receipt identified by id.\\n     * @param id The unique identifier of the liquidity receipt to retrieve.\\n     * @return A data structure representing the liquidity receipt.\\n     */\\n    function getReceipt(uint256 id) external view returns (ChromaticLPReceipt memory);\\n\\n    /**\\n     * @dev Estimates the minimum amount of liquidity that can be added by automation.\\n     * @return The minimum amount of liquidity in the settlement token that can be added.\\n     */\\n    function estimateMinAddLiquidityAmount() external view returns (uint256);\\n\\n    /**\\n     * @dev Estimates the minimum amount of liquidity that can be removed by automation.\\n     * @return The minimum amount of liquidity in the LP token that can be removed.\\n     */\\n    function estimateMinRemoveLiquidityAmount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x094574bb8f2511846e65bedcedb88ee24177b2d30018949ec41a31e846a4d126\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPMeta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title The IChromaticLPMeta interface exposes methods that developers can use to obtain metadata information related to Chromatic Protocol liquidity provider. These functions provide details such as the name and tag associated with a liquidity pool.\\n */\\ninterface IChromaticLPMeta {\\n    /**\\n     * @dev Emitted when the name of the liquidity provider is updated.\\n     * @param name The new name of the liquidity provider.\\n     */\\n    event SetLpName(string name);\\n    /**\\n     * @dev Emitted when the tag of the liquidity provider is updated.\\n     * @param tag The new tag associated with the liquidity provider.\\n     */\\n    event SetLpTag(string tag);\\n\\n    /**\\n     * @dev Retrieves the name of the Chromatic Protocol liquidity provider.\\n     * @return The name of the liquidity provider.\\n     */\\n    function lpName() external view returns (string memory);\\n\\n    /**\\n     * @dev Retrieves the tag associated with the Chromatic Protocol liquidity provider.\\n     * @return The tag associated with the liquidity provider\\n     */\\n    function lpTag() external view returns (string memory);\\n\\n    /**\\n     * @dev Sets the name of the Chromatic Protocol liquidity provider.\\n     * @param newName The new name for the liquidity provider.\\n     */\\n    function setLpName(string memory newName) external;\\n\\n    /**\\n     * @dev Sets the tag associated with the Chromatic Protocol liquidity provider.\\n     * @param newTag The new tag for the liquidity provider.\\n     */\\n    function setLpTag(string memory newTag) external;\\n}\\n\",\"keccak256\":\"0xce4a99cd1c3ce4eb29329377738f575882dcd3930ffe86d4f0ee84bb6f0f45b6\",\"license\":\"MIT\"},\"contracts/lp/libraries/ChromaticLPReceipt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev The ChromaticLPAction enum represents the types of LP actions that can be performed.\\n */\\nenum ChromaticLPAction {\\n    ADD_LIQUIDITY,\\n    REMOVE_LIQUIDITY\\n}\\n\\n/**\\n * @title ChromaticLPReceipt\\n * @dev A struct representing a receipt of a liquidity-related action in the Chromatic Protocol.\\n * @param id Unique identifier of the receipt.\\n * @param provider Address of the liquidity provider initiating the action.\\n * @param recipient Address of the recipient for the liquidity or assets.\\n * @param oracleVersion Version of the oracle used for the action.\\n * @param amount Amount associated with the liquidity action.\\n * @param pendingLiquidity Pending liquidity awaiting settlement.\\n * @param action ChromaticLPAction indicating the type of liquidity-related action.\\n */\\nstruct ChromaticLPReceipt {\\n    uint256 id;\\n    address provider;\\n    address recipient;\\n    uint256 oracleVersion;\\n    uint256 amount;\\n    uint256 pendingLiquidity;\\n    ChromaticLPAction action;\\n}\\n\",\"keccak256\":\"0x9126982b5c6bbe4cd63bbf0af49bdab18936dc03122532e14d4446e4b96ad4c1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200201e3803806200201e83398101604081905262000034916200031a565b80306001600081905550816001600160a01b03166080816001600160a01b0316815250506000826001600160a01b031663573ea5756040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000099573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bf91906200031a565b9050806001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000100573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012691906200031a565b6001600160a01b0390811660c05260405163cd3d4fb960e01b815260009185169063cd3d4fb9906200015e9060029060040162000341565b602060405180830381865afa1580156200017c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a291906200031a565b90506000816001600160a01b031663ba1d0ff46040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020b91906200031a565b6040516337b6269f60e21b81526001600160a01b0386811660048301529192509082169063ded89a7c906024016040805180830381865afa15801562000255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200027b91906200036a565b506001600160a01b031660a05250620002a493506200029e925050620002ab9050565b620002af565b50620003ad565b3390565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811681146200031757600080fd5b50565b6000602082840312156200032d57600080fd5b81516200033a8162000301565b9392505050565b60208101600683106200036457634e487b7160e01b600052602160045260246000fd5b91905290565b600080604083850312156200037e57600080fd5b82516200038b8162000301565b60208401519092508015158114620003a257600080fd5b809150509250929050565b60805160a05160c051611c056200041960003960005050600081816101a401528181610414015261052a01526000818161010a0152818161098b01528181610c6801528181610dc601528181610f05015281816113110152818161168d015261172c0152611c056000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063747cd3d911610097578063b48949b511610066578063b48949b51461029a578063c6bd6249146102ad578063ee8ca3b5146102c0578063f2fde38b146102d357600080fd5b8063747cd3d914610259578063890e2ec9146102615780638da5cb5b1461027457806393e15ee91461029257600080fd5b806328f150eb116100d357806328f150eb1461019f5780633f6f3836146101c65780636dbbd3731461020a578063715018a61461025157600080fd5b8063049aacfe1461010557806304acb2af1461015657806315afd4091461017757806321c281911461018c575b600080fd5b61012c7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610169610164366004611855565b6102e6565b60405161014d9291906118dd565b61018a6101853660046118f8565b6103fc565b005b61018a61019a366004611855565b610512565b61012c7f000000000000000000000000000000000000000000000000000000000000000081565b6101fc6101d4366004611855565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b60405190815260200161014d565b6101fc6102183660046118f8565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260026020908152604080832093835260019093019052205490565b61018a610620565b61018a610634565b61018a61026f366004611924565b6107e6565b60015473ffffffffffffffffffffffffffffffffffffffff1661012c565b61018a610920565b6101696102a83660046118f8565b610aa0565b61018a6102bb366004611924565b610be1565b61018a6102ce366004611924565b610d8f565b61018a6102e1366004611855565b610e3a565b600060608273ffffffffffffffffffffffffffffffffffffffff1663a56c077f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610335573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610359919061193d565b156103e45750506040805173ffffffffffffffffffffffffffffffffffffffff9290921660248084019190915281518084039091018152604490920190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f21c2819100000000000000000000000000000000000000000000000000000000179052600191565b50506040805160208101909152600080825292909150565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461046b576040517fa19677f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610476610ef3565b6040517f95fc33c50000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff808316602483015260448201849052929450909250908516906395fc33c590606401600060405180830381600087803b1580156104f457600080fd5b505af1158015610508573d6000803e3d6000fd5b5050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610581576040517fa19677f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061058c610ef3565b6040517f3da9b9d000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301526024820184905292945090925090841690633da9b9d090604401600060405180830381600087803b15801561060357600080fd5b505af1158015610617573d6000803e3d6000fd5b50505050505050565b610628610f98565b6106326000610fe9565b565b61063c611060565b336000818152600260205260409020548015610684576040517f78bfb91700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805133602480830182905283518084038201815260449384018552602080820180517f04acb2af000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff91821617909152865180850186905287518082039095018552909501865282810180519095167f21c28191000000000000000000000000000000000000000000000000000000001790945284517f3efe496500000000000000000000000000000000000000000000000000000000815294516107b0959194929392633efe496592600480820193918290030181865afa158015610787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ab919061195f565b6110d3565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020819055905050506106326001600055565b6107ee611060565b3360008181526002602090815260408083208584526001019091529020546000036109125760408051336024808301829052604480840187905284518085038201815260649485018652602080820180517fb48949b5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff918216179091528751948501959095528383018990528651808503909301835292909401909452830180519091167f15afd409000000000000000000000000000000000000000000000000000000001790526000916108dc91906113ac565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260209081526040808320878452600101909152902055505b5061091d6001600055565b50565b336000818152600260205260409020548015610a9c5773ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260408120556040517fee8ca3b5000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ee8ca3b590602401600060405180830381600087803b1580156109e457600080fd5b505af19250505080156109f5575060015b610a4c576040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f49cfaf5afa51f1bfed01daf4c761129dd7ed0b7e1a84ddd03645319ef56f7399910160405180910390a15050565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527fcbb2f35ffdf017fad5a3c5c0bf3e9ad96ab10bb52ceee4009819cbd0129aa535910160405180910390a15b5050565b6040517f7c48868a0000000000000000000000000000000000000000000000000000000081526004810182905260009060609073ffffffffffffffffffffffffffffffffffffffff851690637c48868a90602401602060405180830381865afa158015610b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b35919061193d565b15610bc65750506040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f15afd40900000000000000000000000000000000000000000000000000000000179052600190610bda565b505060408051602081019091526000808252905b9250929050565b3360008181526002602090815260408083208584526001019091529020548015610d8a5773ffffffffffffffffffffffffffffffffffffffff821660009081526002602090815260408083208684526001019091528120556040517fee8ca3b5000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ee8ca3b590602401600060405180830381600087803b158015610cc157600080fd5b505af1925050508015610cd2575060015b610d32576040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018590529081018290527fe47901bc8b854424813403831e80253ba99b639ee95b11a483e0d26a20e933839060600160405180910390a1505050565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018590529081018290527fd270057c2d15299e47e0de652ee11f88f9caff85f50d46c7da14afca6c4644419060600160405180910390a15b505050565b610d97610f98565b6040517fee8ca3b5000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ee8ca3b590602401600060405180830381600087803b158015610e1f57600080fd5b505af1158015610e33573d6000803e3d6000fd5b5050505050565b610e42610f98565b73ffffffffffffffffffffffffffffffffffffffff8116610eea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61091d81610fe9565b600080610efe611727565b50809250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663573ea5756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f929190611978565b90509091565b60015473ffffffffffffffffffffffffffffffffffffffff163314610632576040517f9298645b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6002600054036110cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ee1565b6002600055565b6000806040518060400160405280600367ffffffffffffffff8111156110fb576110fb611995565b604051908082528060200260200182016040528015611124578160200160208202803683370190505b5081526040805160038082526080820190925260209092019190816020015b60608152602001906001900390816111435750509052805180519192506000918290611171576111716119c4565b6020026020010190600581111561118a5761118a6119f3565b9081600581111561119d5761119d6119f3565b81525050600281600001516001815181106111ba576111ba6119c4565b602002602001019060058111156111d3576111d36119f3565b908160058111156111e6576111e66119f3565b8152505060058160000151600281518110611203576112036119c4565b6020026020010190600581111561121c5761121c6119f3565b9081600581111561122f5761122f6119f3565b9052506040516112459030908790602001611a22565b604051602081830303815290604052816020015160008151811061126b5761126b6119c4565b602002602001018190525060405180602001604052806000815250816020015160018151811061129d5761129d6119c4565b60200260200101819052506112b242846117c1565b81602001516002815181106112c9576112c96119c4565b60209081029190910101526040517f3323b46700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690633323b467906113609030908890869073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90600401611a51565b6020604051808303816000875af115801561137f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a3919061195f565b95945050505050565b6000806040518060400160405280600467ffffffffffffffff8111156113d4576113d4611995565b6040519080825280602002602001820160405280156113fd578160200160208202803683370190505b50815260408051600480825260a0820190925260209092019190816020015b606081526020019060019003908161141c575050905280518051919250600091829061144a5761144a6119c4565b60200260200101906005811115611463576114636119f3565b90816005811115611476576114766119f3565b8152505060028160000151600181518110611493576114936119c4565b602002602001019060058111156114ac576114ac6119f3565b908160058111156114bf576114bf6119f3565b81525050600381600001516002815181106114dc576114dc6119c4565b602002602001019060058111156114f5576114f56119f3565b90816005811115611508576115086119f3565b8152505060058160000151600381518110611525576115256119c4565b6020026020010190600581111561153e5761153e6119f3565b90816005811115611551576115516119f3565b9052506040516115679030908690602001611a22565b604051602081830303815290604052816020015160008151811061158d5761158d6119c4565b60200260200101819052506040518060200160405280600081525081602001516001815181106115bf576115bf6119c4565b60200260200101819052506040518060200160405280600081525081602001516002815181106115f1576115f16119c4565b602002602001018190525060036040518060200160405280600081525060405160200161161f929190611b76565b6040516020818303038152906040528160200151600381518110611645576116456119c4565b60209081029190910101526040517f3323b46700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690633323b467906116dc9030908790869073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90600401611a51565b6020604051808303816000875af11580156116fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171f919061195f565b949350505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b810c6366040518163ffffffff1660e01b81526004016040805180830381865afa158015611794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b89190611b9f565b90939092509050565b6060600083836040516020016117f69291906fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b604051602081830303815290604052905060008160405160200161181b929190611b76565b60405160208183030381529060405291505092915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461091d57600080fd5b60006020828403121561186757600080fd5b813561187281611833565b9392505050565b6000815180845260005b8181101561189f57602081850181015186830182015201611883565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b821515815260406020820152600061171f6040830184611879565b6000806040838503121561190b57600080fd5b823561191681611833565b946020939093013593505050565b60006020828403121561193657600080fd5b5035919050565b60006020828403121561194f57600080fd5b8151801515811461187257600080fd5b60006020828403121561197157600080fd5b5051919050565b60006020828403121561198a57600080fd5b815161187281611833565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600061171f6040830184611879565b73ffffffffffffffffffffffffffffffffffffffff8516815260006020608081840152611a816080840187611879565b8381036040808601919091528651818352805191830182905283019060009060608401905b80831015611ad657835160068110611ac057611ac06119f3565b8252928501926001929092019190850190611aa6565b508885015184820394860194909452835180825281860194860193509150600582901b8101850160005b83811015611b4c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838303018652611b3a828651611879565b95870195948701949150600101611b00565b5073ffffffffffffffffffffffffffffffffffffffff8916606089015295506113a3945050505050565b600060048410611b8857611b886119f3565b8382526040602083015261171f6040830184611879565b60008060408385031215611bb257600080fd5b825191506020830151611bc481611833565b80915050925092905056fea2646970667358221220ff465b4fcd2ac3dd3999404aad1ba616f7640120f113335b7bf4a1d96b7c4d2564736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063747cd3d911610097578063b48949b511610066578063b48949b51461029a578063c6bd6249146102ad578063ee8ca3b5146102c0578063f2fde38b146102d357600080fd5b8063747cd3d914610259578063890e2ec9146102615780638da5cb5b1461027457806393e15ee91461029257600080fd5b806328f150eb116100d357806328f150eb1461019f5780633f6f3836146101c65780636dbbd3731461020a578063715018a61461025157600080fd5b8063049aacfe1461010557806304acb2af1461015657806315afd4091461017757806321c281911461018c575b600080fd5b61012c7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610169610164366004611855565b6102e6565b60405161014d9291906118dd565b61018a6101853660046118f8565b6103fc565b005b61018a61019a366004611855565b610512565b61012c7f000000000000000000000000000000000000000000000000000000000000000081565b6101fc6101d4366004611855565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b60405190815260200161014d565b6101fc6102183660046118f8565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260026020908152604080832093835260019093019052205490565b61018a610620565b61018a610634565b61018a61026f366004611924565b6107e6565b60015473ffffffffffffffffffffffffffffffffffffffff1661012c565b61018a610920565b6101696102a83660046118f8565b610aa0565b61018a6102bb366004611924565b610be1565b61018a6102ce366004611924565b610d8f565b61018a6102e1366004611855565b610e3a565b600060608273ffffffffffffffffffffffffffffffffffffffff1663a56c077f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610335573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610359919061193d565b156103e45750506040805173ffffffffffffffffffffffffffffffffffffffff9290921660248084019190915281518084039091018152604490920190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f21c2819100000000000000000000000000000000000000000000000000000000179052600191565b50506040805160208101909152600080825292909150565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461046b576040517fa19677f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610476610ef3565b6040517f95fc33c50000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff808316602483015260448201849052929450909250908516906395fc33c590606401600060405180830381600087803b1580156104f457600080fd5b505af1158015610508573d6000803e3d6000fd5b5050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610581576040517fa19677f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061058c610ef3565b6040517f3da9b9d000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301526024820184905292945090925090841690633da9b9d090604401600060405180830381600087803b15801561060357600080fd5b505af1158015610617573d6000803e3d6000fd5b50505050505050565b610628610f98565b6106326000610fe9565b565b61063c611060565b336000818152600260205260409020548015610684576040517f78bfb91700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805133602480830182905283518084038201815260449384018552602080820180517f04acb2af000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff91821617909152865180850186905287518082039095018552909501865282810180519095167f21c28191000000000000000000000000000000000000000000000000000000001790945284517f3efe496500000000000000000000000000000000000000000000000000000000815294516107b0959194929392633efe496592600480820193918290030181865afa158015610787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ab919061195f565b6110d3565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020819055905050506106326001600055565b6107ee611060565b3360008181526002602090815260408083208584526001019091529020546000036109125760408051336024808301829052604480840187905284518085038201815260649485018652602080820180517fb48949b5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff918216179091528751948501959095528383018990528651808503909301835292909401909452830180519091167f15afd409000000000000000000000000000000000000000000000000000000001790526000916108dc91906113ac565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260209081526040808320878452600101909152902055505b5061091d6001600055565b50565b336000818152600260205260409020548015610a9c5773ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260408120556040517fee8ca3b5000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ee8ca3b590602401600060405180830381600087803b1580156109e457600080fd5b505af19250505080156109f5575060015b610a4c576040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f49cfaf5afa51f1bfed01daf4c761129dd7ed0b7e1a84ddd03645319ef56f7399910160405180910390a15050565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527fcbb2f35ffdf017fad5a3c5c0bf3e9ad96ab10bb52ceee4009819cbd0129aa535910160405180910390a15b5050565b6040517f7c48868a0000000000000000000000000000000000000000000000000000000081526004810182905260009060609073ffffffffffffffffffffffffffffffffffffffff851690637c48868a90602401602060405180830381865afa158015610b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b35919061193d565b15610bc65750506040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f15afd40900000000000000000000000000000000000000000000000000000000179052600190610bda565b505060408051602081019091526000808252905b9250929050565b3360008181526002602090815260408083208584526001019091529020548015610d8a5773ffffffffffffffffffffffffffffffffffffffff821660009081526002602090815260408083208684526001019091528120556040517fee8ca3b5000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ee8ca3b590602401600060405180830381600087803b158015610cc157600080fd5b505af1925050508015610cd2575060015b610d32576040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018590529081018290527fe47901bc8b854424813403831e80253ba99b639ee95b11a483e0d26a20e933839060600160405180910390a1505050565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018590529081018290527fd270057c2d15299e47e0de652ee11f88f9caff85f50d46c7da14afca6c4644419060600160405180910390a15b505050565b610d97610f98565b6040517fee8ca3b5000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ee8ca3b590602401600060405180830381600087803b158015610e1f57600080fd5b505af1158015610e33573d6000803e3d6000fd5b5050505050565b610e42610f98565b73ffffffffffffffffffffffffffffffffffffffff8116610eea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61091d81610fe9565b600080610efe611727565b50809250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663573ea5756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f929190611978565b90509091565b60015473ffffffffffffffffffffffffffffffffffffffff163314610632576040517f9298645b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6002600054036110cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ee1565b6002600055565b6000806040518060400160405280600367ffffffffffffffff8111156110fb576110fb611995565b604051908082528060200260200182016040528015611124578160200160208202803683370190505b5081526040805160038082526080820190925260209092019190816020015b60608152602001906001900390816111435750509052805180519192506000918290611171576111716119c4565b6020026020010190600581111561118a5761118a6119f3565b9081600581111561119d5761119d6119f3565b81525050600281600001516001815181106111ba576111ba6119c4565b602002602001019060058111156111d3576111d36119f3565b908160058111156111e6576111e66119f3565b8152505060058160000151600281518110611203576112036119c4565b6020026020010190600581111561121c5761121c6119f3565b9081600581111561122f5761122f6119f3565b9052506040516112459030908790602001611a22565b604051602081830303815290604052816020015160008151811061126b5761126b6119c4565b602002602001018190525060405180602001604052806000815250816020015160018151811061129d5761129d6119c4565b60200260200101819052506112b242846117c1565b81602001516002815181106112c9576112c96119c4565b60209081029190910101526040517f3323b46700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690633323b467906113609030908890869073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90600401611a51565b6020604051808303816000875af115801561137f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a3919061195f565b95945050505050565b6000806040518060400160405280600467ffffffffffffffff8111156113d4576113d4611995565b6040519080825280602002602001820160405280156113fd578160200160208202803683370190505b50815260408051600480825260a0820190925260209092019190816020015b606081526020019060019003908161141c575050905280518051919250600091829061144a5761144a6119c4565b60200260200101906005811115611463576114636119f3565b90816005811115611476576114766119f3565b8152505060028160000151600181518110611493576114936119c4565b602002602001019060058111156114ac576114ac6119f3565b908160058111156114bf576114bf6119f3565b81525050600381600001516002815181106114dc576114dc6119c4565b602002602001019060058111156114f5576114f56119f3565b90816005811115611508576115086119f3565b8152505060058160000151600381518110611525576115256119c4565b6020026020010190600581111561153e5761153e6119f3565b90816005811115611551576115516119f3565b9052506040516115679030908690602001611a22565b604051602081830303815290604052816020015160008151811061158d5761158d6119c4565b60200260200101819052506040518060200160405280600081525081602001516001815181106115bf576115bf6119c4565b60200260200101819052506040518060200160405280600081525081602001516002815181106115f1576115f16119c4565b602002602001018190525060036040518060200160405280600081525060405160200161161f929190611b76565b6040516020818303038152906040528160200151600381518110611645576116456119c4565b60209081029190910101526040517f3323b46700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690633323b467906116dc9030908790869073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90600401611a51565b6020604051808303816000875af11580156116fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171f919061195f565b949350505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b810c6366040518163ffffffff1660e01b81526004016040805180830381865afa158015611794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b89190611b9f565b90939092509050565b6060600083836040516020016117f69291906fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b604051602081830303815290604052905060008160405160200161181b929190611b76565b60405160208183030381529060405291505092915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461091d57600080fd5b60006020828403121561186757600080fd5b813561187281611833565b9392505050565b6000815180845260005b8181101561189f57602081850181015186830182015201611883565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b821515815260406020820152600061171f6040830184611879565b6000806040838503121561190b57600080fd5b823561191681611833565b946020939093013593505050565b60006020828403121561193657600080fd5b5035919050565b60006020828403121561194f57600080fd5b8151801515811461187257600080fd5b60006020828403121561197157600080fd5b5051919050565b60006020828403121561198a57600080fd5b815161187281611833565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600061171f6040830184611879565b73ffffffffffffffffffffffffffffffffffffffff8516815260006020608081840152611a816080840187611879565b8381036040808601919091528651818352805191830182905283019060009060608401905b80831015611ad657835160068110611ac057611ac06119f3565b8252928501926001929092019190850190611aa6565b508885015184820394860194909452835180825281860194860193509150600582901b8101850160005b83811015611b4c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838303018652611b3a828651611879565b95870195948701949150600101611b00565b5073ffffffffffffffffffffffffffffffffffffffff8916606089015295506113a3945050505050565b600060048410611b8857611b886119f3565b8382526040602083015261171f6040830184611879565b60008060408385031215611bb257600080fd5b825191506020830151611bc481611833565b80915050925092905056fea2646970667358221220ff465b4fcd2ac3dd3999404aad1ba616f7640120f113335b7bf4a1d96b7c4d2564736f6c63430008130033",
  "devdoc": {
    "errors": {
      "AlreadyRebalanceTaskExist()": [
        {
          "details": "Emitted when attempting to create a rebalance task while one already exists."
        }
      ],
      "NotAutomationCalled()": [
        {
          "details": "Emitted when a function is called by an unauthorized address."
        }
      ],
      "OnlyAccessableByOwner()": [
        {
          "details": "Signifies that the function is only accessible by the owner"
        }
      ]
    },
    "events": {
      "CancleRebalanceTaskFailed(address,bytes32)": {
        "details": "Emitted when a rebalance task cancellation fails.",
        "params": {
          "lp": "The address of the liquidity provider.",
          "taskId": "The unique identifier of the cancelled rebalance task."
        }
      },
      "CancleRebalanceTaskSucceeded(address,bytes32)": {
        "details": "Emitted when a rebalance task cancellation is successful.",
        "params": {
          "lp": "The address of the liquidity provider.",
          "taskId": "The unique identifier of the cancelled rebalance task."
        }
      },
      "CancleSettleTaskFailed(address,uint256,bytes32)": {
        "details": "Emitted when a settle task cancellation fails.",
        "params": {
          "lp": "The address of the liquidity provider.",
          "receiptId": "The unique identifier of the cancelled settle task.",
          "taskId": "The unique identifier of the cancelled settle task."
        }
      },
      "CancleSettleTaskSucceeded(address,uint256,bytes32)": {
        "details": "Emitted when a settle task cancellation is successful.",
        "params": {
          "lp": "The address of the liquidity provider.",
          "receiptId": "The unique identifier of the cancelled settle task.",
          "taskId": "The unique identifier of the cancelled settle task."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "cancelRebalanceTask()": {
        "details": "Cancels the existing rebalance task for the specified LP (msg.sender)."
      },
      "cancelSettleTask(uint256)": {
        "details": "Cancels the existing settle task for a specific receipt ID.",
        "params": {
          "receiptId": "The unique identifier of the receipt associated with the task."
        }
      },
      "cancelTask(bytes32)": {
        "details": "Cancels the existing task for a specific task ID.",
        "params": {
          "taskId": "The unique identifier of the task."
        }
      },
      "createRebalanceTask()": {
        "details": "Initiates the creation of a rebalance task for the specified LP (msg.sender)."
      },
      "createSettleTask(uint256)": {
        "details": "Initiates the creation of a settle task for a specific receipt ID.",
        "params": {
          "receiptId": "The unique identifier of the receipt associated with the task."
        }
      },
      "getRebalanceTaskId(address)": {
        "details": "Gets the task ID of the existing rebalance task for the specified LP.",
        "params": {
          "lp": "The address of the liquidity provider."
        },
        "returns": {
          "_0": "The task ID of the rebalance task."
        }
      },
      "getSettleTaskId(address,uint256)": {
        "details": "Gets the task ID of the existing settle task for the specified LP and receipt ID.",
        "params": {
          "lp": "The address of the liquidity provider.",
          "receiptId": "The unique identifier of the receipt associated with the task."
        },
        "returns": {
          "_0": "The task ID of the settle task."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "rebalance(address)": {
        "details": "Executes the rebalance task for the specified LP.",
        "params": {
          "lp": "The address of the liquidity provider."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "resolveRebalance(address)": {
        "details": "Checks whether a rebalance task is needed for the specified LP.",
        "params": {
          "lp": "The address of the liquidity provider."
        },
        "returns": {
          "performData": "Additional data required for performing the task.",
          "upkeepNeeded": "Indicates whether upkeep is needed."
        }
      },
      "resolveSettle(address,uint256)": {
        "details": "Checks whether a settle task is needed for the specified LP and receipt ID.",
        "params": {
          "lp": "The address of the liquidity provider.",
          "receiptId": "The unique identifier of the receipt associated with the task."
        },
        "returns": {
          "performData": "Additional data required for performing the task.",
          "upkeepNeeded": "Indicates whether upkeep is needed."
        }
      },
      "settle(address,uint256)": {
        "details": "Executes the settle task for the specified LP and receipt ID.",
        "params": {
          "lp": "The address of the liquidity provider.",
          "receiptId": "The unique identifier of the receipt associated with the task."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3842,
        "contract": "contracts/lp/AutomateLP.sol:AutomateLP",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3659,
        "contract": "contracts/lp/AutomateLP.sol:AutomateLP",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8702,
        "contract": "contracts/lp/AutomateLP.sol:AutomateLP",
        "label": "_taskMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IChromaticLP)12603,t_struct(LPTasks)8696_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IChromaticLP)12603": {
        "encoding": "inplace",
        "label": "contract IChromaticLP",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IChromaticLP)12603,t_struct(LPTasks)8696_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IChromaticLP)12603",
        "label": "mapping(contract IChromaticLP => struct AutomateLP.LPTasks)",
        "numberOfBytes": "32",
        "value": "t_struct(LPTasks)8696_storage"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(LPTasks)8696_storage": {
        "encoding": "inplace",
        "label": "struct AutomateLP.LPTasks",
        "members": [
          {
            "astId": 8691,
            "contract": "contracts/lp/AutomateLP.sol:AutomateLP",
            "label": "rebalanceTaskId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8695,
            "contract": "contracts/lp/AutomateLP.sol:AutomateLP",
            "label": "settleTasks",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_bytes32)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}