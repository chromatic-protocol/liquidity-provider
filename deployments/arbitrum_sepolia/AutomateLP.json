{
  "address": "0xDC378442B5B87BE3840633412e0FA5bC064Adfed",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMate2AutomationRegistry1_1",
          "name": "_automate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRebalanceTaskExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAutomationCalled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAccessableByOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "CancelRebalanceTaskFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "CancelRebalanceTaskSucceeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "CancelSettleTaskFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "CancelSettleTaskSucceeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "gasLimitOld",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "gasLimitNew",
          "type": "uint32"
        }
      ],
      "name": "UpkeepGasLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_err",
          "type": "string"
        }
      ],
      "name": "catchErr",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_UPKEEP_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "automate",
      "outputs": [
        {
          "internalType": "contract IMate2AutomationRegistry1_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelRebalanceTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "cancelSettleTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upkeepId",
          "type": "uint256"
        }
      ],
      "name": "cancelUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createRebalanceTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "createSettleTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChromaticLP",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "getRebalanceTaskId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChromaticLP",
          "name": "lp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "getSettleTaskId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "resolveRebalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "resolveSettle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        }
      ],
      "name": "updateUpkeepGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upkeepGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x90a0043a89949e120f5f4be56f05cfed3278262f3ec8dd71f8677e3d70fc4dcd",
  "receipt": {
    "to": null,
    "from": "0x3bD0496CA35b200FCc21CAc644208F7b11838EF6",
    "contractAddress": "0xDC378442B5B87BE3840633412e0FA5bC064Adfed",
    "transactionIndex": 1,
    "gasUsed": "6953745",
    "logsBloom": "0x
    "blockHash": "0x7d718459755a39d842a4b7de5a56dd6c04272290471ed090aa5b212527d14ce4",
    "transactionHash": "0x90a0043a89949e120f5f4be56f05cfed3278262f3ec8dd71f8677e3d70fc4dcd",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 12281406,
        "transactionHash": "0x90a0043a89949e120f5f4be56f05cfed3278262f3ec8dd71f8677e3d70fc4dcd",
        "address": "0xDC378442B5B87BE3840633412e0FA5bC064Adfed",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003bd0496ca35b200fcc21cac644208f7b11838ef6"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7d718459755a39d842a4b7de5a56dd6c04272290471ed090aa5b212527d14ce4"
      }
    ],
    "blockNumber": 12281406,
    "cumulativeGasUsed": "6953745",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x14cC9A5B88425d357AEca1B13B8cd6F81388Fe86"
  ],
  "numDeployments": 2,
  "solcInputHash": "00c682cb822944ff993ed565d66a6230",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMate2AutomationRegistry1_1\",\"name\":\"_automate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRebalanceTaskExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAutomationCalled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAccessableByOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"CancelRebalanceTaskFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"CancelRebalanceTaskSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"CancelSettleTaskFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"CancelSettleTaskSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasLimitOld\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasLimitNew\",\"type\":\"uint32\"}],\"name\":\"UpkeepGasLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_err\",\"type\":\"string\"}],\"name\":\"catchErr\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_UPKEEP_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"automate\",\"outputs\":[{\"internalType\":\"contract IMate2AutomationRegistry1_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelRebalanceTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"cancelSettleTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"}],\"name\":\"cancelUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createRebalanceTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"createSettleTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChromaticLP\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"getRebalanceTaskId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChromaticLP\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"getSettleTaskId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"resolveRebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"resolveSettle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"name\":\"updateUpkeepGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upkeepGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AlreadyRebalanceTaskExist()\":[{\"details\":\"Emitted when attempting to create a rebalance task while one already exists.\"}],\"NotAutomationCalled()\":[{\"details\":\"Emitted when a function is called by an unauthorized address.\"}],\"OnlyAccessableByOwner()\":[{\"details\":\"Signifies that the function is only accessible by the owner\"}]},\"events\":{\"CancelRebalanceTaskFailed(address,uint256)\":{\"details\":\"Emitted when a rebalance task cancellation fails.\",\"params\":{\"lp\":\"The address of the liquidity provider.\",\"taskId\":\"The unique identifier of the cancelled rebalance task.\"}},\"CancelRebalanceTaskSucceeded(address,uint256)\":{\"details\":\"Emitted when a rebalance task cancellation is successful.\",\"params\":{\"lp\":\"The address of the liquidity provider.\",\"taskId\":\"The unique identifier of the cancelled rebalance task.\"}},\"CancelSettleTaskFailed(address,uint256,uint256)\":{\"details\":\"Emitted when a settle task cancellation fails.\",\"params\":{\"lp\":\"The address of the liquidity provider.\",\"receiptId\":\"The unique identifier of the cancelled settle task.\",\"taskId\":\"The unique identifier of the cancelled settle task.\"}},\"CancelSettleTaskSucceeded(address,uint256,uint256)\":{\"details\":\"Emitted when a settle task cancellation is successful.\",\"params\":{\"lp\":\"The address of the liquidity provider.\",\"receiptId\":\"The unique identifier of the cancelled settle task.\",\"taskId\":\"The unique identifier of the cancelled settle task.\"}}},\"kind\":\"dev\",\"methods\":{\"cancelRebalanceTask()\":{\"details\":\"Cancels the existing rebalance task for the specified LP (msg.sender).\"},\"cancelSettleTask(uint256)\":{\"details\":\"Cancels the existing settle task for a specific receipt ID.\",\"params\":{\"receiptId\":\"The unique identifier of the receipt associated with the task.\"}},\"cancelUpkeep(uint256)\":{\"details\":\"Cancels the existing task for a specific upkeep ID.\",\"params\":{\"upkeepId\":\"The unique identifier of the task.\"}},\"createRebalanceTask()\":{\"details\":\"Initiates the creation of a rebalance task for the specified LP (msg.sender).\"},\"createSettleTask(uint256)\":{\"details\":\"Initiates the creation of a settle task for a specific receipt ID.\",\"params\":{\"receiptId\":\"The unique identifier of the receipt associated with the task.\"}},\"getRebalanceTaskId(address)\":{\"details\":\"Gets the task ID of the existing rebalance task for the specified LP.\",\"params\":{\"lp\":\"The address of the liquidity provider.\"},\"returns\":{\"_0\":\"The task ID of the rebalance task.\"}},\"getSettleTaskId(address,uint256)\":{\"details\":\"Gets the task ID of the existing settle task for the specified LP and receipt ID.\",\"params\":{\"lp\":\"The address of the liquidity provider.\",\"receiptId\":\"The unique identifier of the receipt associated with the task.\"},\"returns\":{\"_0\":\"The task ID of the settle task.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}},\"rebalance(address)\":{\"details\":\"Executes the rebalance task for the specified LP.\",\"params\":{\"lp\":\"The address of the liquidity provider.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"resolveRebalance(address)\":{\"details\":\"Checks whether a rebalance task is needed for the specified LP.\",\"params\":{\"lp\":\"The address of the liquidity provider.\"},\"returns\":{\"performData\":\"Additional data required for performing the task.\",\"upkeepNeeded\":\"Indicates whether upkeep is needed.\"}},\"resolveSettle(address,uint256)\":{\"details\":\"Checks whether a settle task is needed for the specified LP and receipt ID.\",\"params\":{\"lp\":\"The address of the liquidity provider.\",\"receiptId\":\"The unique identifier of the receipt associated with the task.\"},\"returns\":{\"performData\":\"Additional data required for performing the task.\",\"upkeepNeeded\":\"Indicates whether upkeep is needed.\"}},\"settle(address,uint256)\":{\"details\":\"Executes the settle task for the specified LP and receipt ID.\",\"params\":{\"lp\":\"The address of the liquidity provider.\",\"receiptId\":\"The unique identifier of the receipt associated with the task.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/automation/mate2/AutomateLP.sol\":\"AutomateLP\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":30000},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":~/=contracts/\"]},\"sources\":{\"@chromatic-protocol/contracts/core/automation/mate2/IMate2Automation1_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nenum ExtraModule {\\n    None,\\n    Echo, // for debugging\\n    Pyth\\n}\\n\\nstruct PythOffchainPrice {\\n    uint256 publishTime;\\n    int64 price;\\n    int32 expo;\\n    bytes vaa;\\n}\\n\\ninterface IMate2Automation1_1 {\\n    event catchErr(string _name, string _err);\\n    /**\\n     * @notice method that is simulated by the keepers to see if any work actually\\n     * needs to be performed. This method does does not actually need to be\\n     * executable, and since it is only ever simulated it can consume lots of gas.\\n     * @dev To ensure that it is never called, you may want to add the\\n     * cannotExecute modifier from KeeperBase to your implementation of this\\n     * method.\\n     * @param checkData specified in the upkeep registration so it is always the\\n     * same for a registered upkeep. This can easily be broken down into specific\\n     * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n     * same contract and easily differentiated by the contract.\\n     * @param extraData passed by keeper for passing offchain data\\n     * @return upkeepNeeded boolean to indicate whether the keeper should call\\n     * performUpkeep or not.\\n     * @return performData bytes that the keeper should call performUpkeep with, if\\n     * upkeep is needed. If you would like to encode data to decode later, try\\n     * `abi.encode`.\\n     */\\n    function checkUpkeep(\\n        bytes calldata checkData,\\n        bytes calldata extraData\\n    ) external view returns (bool upkeepNeeded, bytes memory performData);\\n\\n    /**\\n     * @notice method that is actually executed by the keepers, via the registry.\\n     * The data returned by the checkUpkeep simulation will be passed into\\n     * this method to actually be executed.\\n     * @dev The input to this method should not be trusted, and the caller of the\\n     * method should not even be restricted to any single registry. Anyone should\\n     * be able call it, and the input should be validated, there is no guarantee\\n     * that the data passed in is the performData returned from checkUpkeep. This\\n     * could happen due to malicious keepers, racing keepers, or simply a state\\n     * change while the performUpkeep transaction is waiting for confirmation.\\n     * Always validate the data passed in.\\n     * @param performData is the data which was passed back from the checkData\\n     * simulation. If it is encoded, it can easily be decoded into other types by\\n     * calling `abi.decode`. This data should not be trusted, and should be\\n     * validated against the contract's current state.\\n     */\\n    function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x90dfa867cf68e381a46b38590690f06cf8d10db405825805a9eec75c6db5f823\",\"license\":\"MIT\"},\"@chromatic-protocol/contracts/core/automation/mate2/IMate2AutomationRegistry1_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ExtraModule} from \\\"./IMate2Automation1_1.sol\\\";\\n\\nstruct ExtraData {\\n    ExtraModule extraModule;\\n    bytes extraParam;\\n}\\n\\ninterface IMate2AutomationRegistry1_1 {\\n    // function getUpkeepAdmin(address target) external returns (address admin);\\n    function registerUpkeep(\\n        address target,\\n        uint32 gasLimit,\\n        address admin,\\n        bool useTreasury,\\n        bool singleExec,\\n        bytes calldata checkData,\\n        ExtraModule extraModule,\\n        bytes calldata extraParam\\n    ) external returns (uint256 id);\\n\\n    function cancelUpkeep(uint256 id) external;\\n\\n    function pauseUpkeep(uint256 id) external;\\n\\n    function unpauseUpkeep(uint256 id) external;\\n\\n    function transferUpkeepAdmin(uint256 id, address proposed) external;\\n\\n    function updateCheckData(uint256 id, bytes calldata newCheckData) external;\\n\\n    function getUpkeep(\\n        uint256 id\\n    )\\n        external\\n        view\\n        returns (\\n            address target,\\n            uint32 executeGas,\\n            bytes memory checkData,\\n            ExtraData memory extraData, // to avoid stack too deep\\n            address lastKeeper,\\n            address admin,\\n            uint64 maxValidBlocknumber,\\n            uint256 amountSpent,\\n            bool[3] memory flags // [bool useTreasury, bool singleExec, bool paused]\\n        );\\n\\n    function getUpkeepTreasury() external view returns (address);\\n\\n    function checkUpkeep(\\n        uint256 upkeepId,\\n        address from,\\n        bytes calldata extraData\\n    ) external view returns (bytes memory performData, uint256 maxPayment, uint256 gasLimit);\\n\\n    function getPerformUpkeepFee() external view returns (uint256 fee);\\n\\n    function addWhitelistedRegistrar(address registrar) external;\\n\\n    function removeWhitelistedRegistrar(address registrar) external;\\n}\\n\",\"keccak256\":\"0xa4d2fa5a67dd96314b0e4edb7c8537991439483343d81a5556604cde6c4d2263\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/automation/mate2/AutomateLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {IMate2Automation1_1, ExtraModule} from \\\"@chromatic-protocol/contracts/core/automation/mate2/IMate2Automation1_1.sol\\\";\\nimport {IMate2AutomationRegistry1_1} from \\\"@chromatic-protocol/contracts/core/automation/mate2/IMate2AutomationRegistry1_1.sol\\\";\\n\\nimport {IChromaticLP} from \\\"~/lp/interfaces/IChromaticLP.sol\\\";\\n\\nimport {IAutomateLP} from \\\"~/lp/interfaces/IAutomateLP.sol\\\";\\nimport {IAutomateMate2LP} from \\\"~/automation/mate2/interfaces/IAutomateMate2LP.sol\\\";\\n\\ncontract AutomateLP is ReentrancyGuard, Ownable, IAutomateMate2LP, IMate2Automation1_1 {\\n    enum UpkeepType {\\n        Rebalance,\\n        Settle\\n    }\\n\\n    event UpkeepGasLimitUpdated(uint32 gasLimitOld, uint32 gasLimitNew);\\n\\n    /**\\n     * @title LPTasks\\n     * @dev A struct representing tasks associated with Chromatic LP operations.\\n     * @param rebalanceTaskId The task ID for rebalance operations.\\n     * @param settleTasks A mapping from receipt ID to the corresponding settle task ID.\\n     */\\n    struct LPTasks {\\n        uint256 nextRebalanceCheck;\\n        uint256 rebalanceTaskId;\\n        mapping(uint256 => uint256) settleTasks;\\n    }\\n\\n    IMate2AutomationRegistry1_1 public immutable automate;\\n    mapping(IChromaticLP => LPTasks) internal _taskMap;\\n\\n    uint32 public constant DEFAULT_UPKEEP_GAS_LIMIT = 5e7;\\n    uint32 public upkeepGasLimit;\\n\\n    constructor(IMate2AutomationRegistry1_1 _automate) ReentrancyGuard() Ownable() {\\n        automate = _automate;\\n        upkeepGasLimit = DEFAULT_UPKEEP_GAS_LIMIT;\\n    }\\n\\n    /**\\n     * @dev Checks if the caller is the owner of the contract.\\n     */\\n    function _checkOwner() internal view override {\\n        if (owner() != _msgSender()) revert OnlyAccessableByOwner();\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateMate2LP\\n     */\\n    function getRebalanceTaskId(IChromaticLP lp) public view returns (uint256) {\\n        return _taskMap[lp].rebalanceTaskId;\\n    }\\n\\n    function _setRebalanceTaskId(IChromaticLP lp, uint256 rebalanceTaskId) internal {\\n        _taskMap[lp].rebalanceTaskId = rebalanceTaskId;\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateMate2LP\\n     */\\n    function getSettleTaskId(IChromaticLP lp, uint256 receiptId) public view returns (uint256) {\\n        return _taskMap[lp].settleTasks[receiptId];\\n    }\\n\\n    function _setSettleTaskId(IChromaticLP lp, uint256 receiptId, uint256 taskId) internal {\\n        _taskMap[lp].settleTasks[receiptId] = taskId;\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function createRebalanceTask() external nonReentrant {\\n        IChromaticLP lp = IChromaticLP(msg.sender);\\n        uint256 rebalanceTaskId = getRebalanceTaskId(lp);\\n        if (rebalanceTaskId != 0) revert AlreadyRebalanceTaskExist();\\n        //slither-disable-next-line reentrancy-no-eth\\n        rebalanceTaskId = _registerUpkeep(\\n            UpkeepType.Rebalance,\\n            address(lp),\\n            0,\\n            false // is not singleExec\\n        );\\n        _updateNextRebalanceCheckingTime(lp);\\n        _setRebalanceTaskId(lp, rebalanceTaskId);\\n    }\\n\\n    function _updateNextRebalanceCheckingTime(IChromaticLP lp) internal {\\n        uint256 interval = lp.rebalanceCheckingInterval();\\n        _taskMap[lp].nextRebalanceCheck = block.timestamp + interval;\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function cancelRebalanceTask() external {\\n        IChromaticLP lp = IChromaticLP(msg.sender);\\n\\n        uint256 rebalanceTaskId = getRebalanceTaskId(lp);\\n\\n        if (rebalanceTaskId != 0) {\\n            _setRebalanceTaskId(lp, 0);\\n            _taskMap[lp].nextRebalanceCheck = 0;\\n\\n            // slither-disable-next-line reentrancy-events\\n            try automate.cancelUpkeep(rebalanceTaskId) {\\n                emit CancelRebalanceTaskSucceeded(address(lp), rebalanceTaskId);\\n            } catch {\\n                emit CancelRebalanceTaskFailed(address(lp), rebalanceTaskId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    //slither-disable-next-line timestamp\\n    function resolveRebalance(\\n        address lp\\n    ) public view returns (bool upkeepNeeded, bytes memory performData) {\\n        if (\\n            _taskMap[IChromaticLP(lp)].nextRebalanceCheck != 0 &&\\n            _taskMap[IChromaticLP(lp)].nextRebalanceCheck <= block.timestamp &&\\n            IChromaticLP(lp).checkRebalance()\\n        ) {\\n            return (true, abi.encode(UpkeepType.Rebalance, lp, 0));\\n        }\\n        return (false, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function rebalance(address lp) public {\\n        (uint256 fee, address feePayee) = _getFeeInfo();\\n\\n        _updateNextRebalanceCheckingTime(IChromaticLP(lp));\\n        IChromaticLP(lp).rebalance(feePayee, fee);\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function createSettleTask(uint256 receiptId) external nonReentrant {\\n        IChromaticLP lp = IChromaticLP(msg.sender); // called by LP\\n\\n        if (getSettleTaskId(lp, receiptId) == 0) {\\n            //slither-disable-next-line reentrancy-no-eth\\n            uint256 taskId = _registerUpkeep(UpkeepType.Settle, address(lp), receiptId, true);\\n            _setSettleTaskId(lp, receiptId, taskId);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function cancelSettleTask(uint256 receiptId) external {\\n        IChromaticLP lp = IChromaticLP(msg.sender);\\n\\n        uint256 taskId = getSettleTaskId(lp, receiptId);\\n        if (taskId != 0) {\\n            _setSettleTaskId(lp, receiptId, 0);\\n            // slither-disable-next-line reentrancy-events\\n            try automate.cancelUpkeep(taskId) {\\n                emit CancelSettleTaskSucceeded(address(lp), receiptId, taskId);\\n            } catch {\\n                emit CancelSettleTaskFailed(address(lp), receiptId, taskId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function settle(address lp, uint256 receiptId) public {\\n        (uint256 fee, address feePayee) = _getFeeInfo();\\n\\n        IChromaticLP(lp).settleTask(receiptId, feePayee, fee);\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateLP\\n     */\\n    function resolveSettle(\\n        address lp,\\n        uint256 receiptId\\n    ) public view returns (bool upkeepNeeded, bytes memory performData) {\\n        if (IChromaticLP(lp).checkSettle(receiptId)) {\\n            return (true, abi.encode(UpkeepType.Settle, lp, receiptId));\\n        }\\n        return (false, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @inheritdoc IAutomateMate2LP\\n     */\\n    function cancelUpkeep(uint256 upkeepId) external onlyOwner {\\n        automate.cancelUpkeep(upkeepId);\\n    }\\n\\n    function _registerUpkeep(\\n        UpkeepType upkeepType,\\n        address lp,\\n        uint256 receiptIdOrZero,\\n        bool singleExec\\n    ) internal returns (uint256 upkeepId) {\\n        upkeepId = automate.registerUpkeep(\\n            address(this), // target\\n            upkeepGasLimit, //uint32 gasLimit,\\n            address(this), // address admin,\\n            false, // bool useTreasury,\\n            singleExec, // bool singleExec,\\n            abi.encode(upkeepType, lp, receiptIdOrZero), // checkData\\n            ExtraModule.None, // extraModule\\n            bytes(\\\"\\\") // extraParam\\n        );\\n    }\\n\\n    function _getFeeInfo() internal view returns (uint256 fee, address feePayee) {\\n        fee = automate.getPerformUpkeepFee();\\n        feePayee = address(automate);\\n    }\\n\\n    function checkUpkeep(\\n        bytes calldata checkData,\\n        bytes calldata /* extraData */\\n    ) external view returns (bool upkeepNeeded, bytes memory performData) {\\n        (UpkeepType upkeepType, address lp, uint256 receiptId) = abi.decode(\\n            checkData,\\n            (UpkeepType, address, uint256)\\n        );\\n        if (upkeepType == UpkeepType.Settle) {\\n            return resolveSettle(lp, receiptId);\\n        } else if (upkeepType == UpkeepType.Rebalance) {\\n            return resolveRebalance(lp);\\n        }\\n    }\\n\\n    function performUpkeep(bytes calldata performData) external {\\n        (UpkeepType upkeepType, address lp, uint256 receiptId) = abi.decode(\\n            performData,\\n            (UpkeepType, address, uint256)\\n        );\\n        if (upkeepType == UpkeepType.Settle) {\\n            settle(lp, receiptId);\\n        } else if (upkeepType == UpkeepType.Rebalance) {\\n            rebalance(lp);\\n        }\\n    }\\n\\n    function updateUpkeepGasLimit(uint32 gasLimit) external onlyOwner {\\n        uint32 gasLimitOld = upkeepGasLimit;\\n        upkeepGasLimit = gasLimit;\\n        emit UpkeepGasLimitUpdated(gasLimitOld, gasLimit);\\n    }\\n}\\n\",\"keccak256\":\"0x793d5c3bc78996105412f3fccc6f36d2b8a0f62b7fa67f2c54babc0e0a2281e3\",\"license\":\"MIT\"},\"contracts/automation/mate2/interfaces/IAutomateMate2LP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {IChromaticLP} from \\\"~/lp/interfaces/IChromaticLP.sol\\\";\\nimport {IAutomateLP} from \\\"~/lp/interfaces/IAutomateLP.sol\\\";\\n\\ninterface IAutomateMate2LP is IAutomateLP {\\n    /**\\n     * @dev Emitted when a rebalance task cancellation is successful.\\n     * @param lp The address of the liquidity provider.\\n     * @param taskId The unique identifier of the cancelled rebalance task.\\n     */\\n    event CancelRebalanceTaskSucceeded(address lp, uint256 taskId);\\n\\n    /**\\n     * @dev Emitted when a rebalance task cancellation fails.\\n     * @param lp The address of the liquidity provider.\\n     * @param taskId The unique identifier of the cancelled rebalance task.\\n     */\\n    event CancelRebalanceTaskFailed(address lp, uint256 taskId);\\n\\n    /**\\n     * @dev Emitted when a settle task cancellation is successful.\\n     * @param lp The address of the liquidity provider.\\n     * @param receiptId The unique identifier of the cancelled settle task.\\n     * @param taskId The unique identifier of the cancelled settle task.\\n     */\\n    event CancelSettleTaskSucceeded(address lp, uint256 receiptId, uint256 taskId);\\n\\n    /**\\n     * @dev Emitted when a settle task cancellation fails.\\n     * @param lp The address of the liquidity provider.\\n     * @param receiptId The unique identifier of the cancelled settle task.\\n     * @param taskId The unique identifier of the cancelled settle task.\\n     */\\n    event CancelSettleTaskFailed(address lp, uint256 receiptId, uint256 taskId);\\n\\n    /**\\n     * @dev Gets the task ID of the existing rebalance task for the specified LP.\\n     * @param lp The address of the liquidity provider.\\n     * @return The task ID of the rebalance task.\\n     */\\n    function getRebalanceTaskId(IChromaticLP lp) external view returns (uint256);\\n\\n    /**\\n     * @dev Gets the task ID of the existing settle task for the specified LP and receipt ID.\\n     * @param lp The address of the liquidity provider.\\n     * @param receiptId The unique identifier of the receipt associated with the task.\\n     * @return The task ID of the settle task.\\n     */\\n    function getSettleTaskId(IChromaticLP lp, uint256 receiptId) external view returns (uint256);\\n\\n    /**\\n     * @dev Cancels the existing task for a specific upkeep ID.\\n     * @param upkeepId The unique identifier of the task.\\n     */\\n    function cancelUpkeep(uint256 upkeepId) external;\\n}\\n\",\"keccak256\":\"0xba1e03f1eb05c770a16707e6dfb5e19a3f7eb8aa772b5a5326075e8e332ef7e6\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IAutomateLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {IChromaticLP} from \\\"~/lp/interfaces/IChromaticLP.sol\\\";\\n\\n/**\\n * @title IAutomateLP\\n * @dev Interface for automating tasks related to liquidity providers (LPs) within a protocol.\\n */\\ninterface IAutomateLP {\\n    /**\\n     * @dev Emitted when a function is called by an unauthorized address.\\n     */\\n    error NotAutomationCalled();\\n\\n    /**\\n     * @dev Emitted when attempting to create a rebalance task while one already exists.\\n     */\\n    error AlreadyRebalanceTaskExist();\\n\\n    /**\\n     * @dev Signifies that the function is only accessible by the owner\\n     */\\n    error OnlyAccessableByOwner();\\n\\n    /**\\n     * @dev Initiates the creation of a rebalance task for the specified LP (msg.sender).\\n     */\\n    function createRebalanceTask() external;\\n\\n    /**\\n     * @dev Cancels the existing rebalance task for the specified LP (msg.sender).\\n     */\\n    function cancelRebalanceTask() external;\\n\\n    /**\\n     * @dev Checks whether a rebalance task is needed for the specified LP.\\n     * @param lp The address of the liquidity provider.\\n     * @return upkeepNeeded Indicates whether upkeep is needed.\\n     * @return performData Additional data required for performing the task.\\n     */\\n    function resolveRebalance(\\n        address lp\\n    ) external view returns (bool upkeepNeeded, bytes memory performData);\\n\\n    /**\\n     * @dev Executes the rebalance task for the specified LP.\\n     * @param lp The address of the liquidity provider.\\n     */\\n    function rebalance(address lp) external;\\n\\n    /**\\n     * @dev Initiates the creation of a settle task for a specific receipt ID.\\n     * @param receiptId The unique identifier of the receipt associated with the task.\\n     */\\n    function createSettleTask(uint256 receiptId) external;\\n\\n    /**\\n     * @dev Cancels the existing settle task for a specific receipt ID.\\n     * @param receiptId The unique identifier of the receipt associated with the task.\\n     */\\n    function cancelSettleTask(uint256 receiptId) external;\\n\\n    /**\\n     * @dev Checks whether a settle task is needed for the specified LP and receipt ID.\\n     * @param lp The address of the liquidity provider.\\n     * @param receiptId The unique identifier of the receipt associated with the task.\\n     * @return upkeepNeeded Indicates whether upkeep is needed.\\n     * @return performData Additional data required for performing the task.\\n     */\\n    function resolveSettle(\\n        address lp,\\n        uint256 receiptId\\n    ) external view returns (bool upkeepNeeded, bytes memory performData);\\n\\n    /**\\n     * @dev Executes the settle task for the specified LP and receipt ID.\\n     * @param lp The address of the liquidity provider.\\n     * @param receiptId The unique identifier of the receipt associated with the task.\\n     */\\n    function settle(address lp, uint256 receiptId) external;\\n}\\n\",\"keccak256\":\"0x5e73be3d5f518482cdd579ebe4a39b832dce8a2e6ab2154ca73d972aa57b54df\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IChromaticLPLiquidity} from \\\"./IChromaticLPLiquidity.sol\\\";\\nimport {IChromaticLPAdmin} from \\\"./IChromaticLPAdmin.sol\\\";\\nimport {IChromaticLPAutomate} from \\\"./IChromaticLPAutomate.sol\\\";\\nimport {IChromaticLPLens} from \\\"./IChromaticLPLens.sol\\\";\\nimport {IChromaticLPMeta} from \\\"./IChromaticLPMeta.sol\\\";\\nimport {IChromaticLPEvents} from \\\"./IChromaticLPEvents.sol\\\";\\nimport {IChromaticLPErrors} from \\\"./IChromaticLPErrors.sol\\\";\\n\\n/**\\n * @title The IChromaticLP interface consolidates several other interfaces, allowing developers to access a wide range of functionalities related to Chromatic Protocol liquidity providers. It includes methods from liquidity management, metadata retrieval, lens queries, administration, event tracking, and error handling.\\n */\\ninterface IChromaticLP is\\n    IChromaticLPLiquidity,\\n    IChromaticLPLens,\\n    IChromaticLPMeta,\\n    IChromaticLPAdmin,\\n    IChromaticLPAutomate,\\n    IChromaticLPEvents,\\n    IChromaticLPErrors\\n{\\n    /**\\n     * @dev Retrieves the address of the market associated with the Chromatic Protocol liquidity provider.\\n     * @return The address of the market associated with the liquidity provider.\\n     */\\n    function market() external view returns (address);\\n\\n    /**\\n     * @dev Retrieves the address of the settlement token associated with the Chromatic Protocol liquidity provider.\\n     * @return The address of the settlement token used in the liquidity provider.\\n     */\\n    function settlementToken() external view returns (address);\\n\\n    /**\\n     * @dev Retrieves the address of the LP token associated with the Chromatic Protocol liquidity provider.\\n     * @return The address of the LP (Liquidity Provider) token issued by the liquidity provider.\\n     */\\n    function lpToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8d20f2d94a57e547f017efaaa4adda025b08ec3e4fbd169318c5085b32522c94\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title The IChromaticLPAdmin interface is designed to facilitate the administration of liquidity provider within the Chromatic Protocol.\\n * @author\\n * @notice\\n */\\ninterface IChromaticLPAdmin {\\n    /**\\n     * @dev Initiates the creation of a rebalance task in the liquidity provider.\\n     * This is allowed for the owner of LP contract to call\\n     */\\n    function createRebalanceTask() external;\\n\\n    /**\\n     * @dev Cancels the currently active rebalance task in the liquidity provider.\\n     * This is allowed for the owner of LP contract to call\\n     */\\n    function cancelRebalanceTask() external;\\n\\n    /**\\n     * @dev Cancels the settle task in the liquidity provider.\\n     * This is allowed for the owner of LP contract to call\\n     * @param  receiptId The receipt ID associated with the settle execution.\\n     */\\n    function cancelSettleTask(uint256 receiptId) external;\\n\\n    /**\\n     * @dev Additional data to be used in the rebalance process.\\n     * @param _automationFeeReserved The new value for the reserved automation fee.\\n     */\\n    function setAutomationFeeReserved(uint256 _automationFeeReserved) external;\\n\\n    /**\\n     * @dev Additional data to be used in the rebalance process.\\n     * @param _minHoldingValueToRebalance The new value for the required minimum amount to trigger rebalance.\\n     */\\n    function setMinHoldingValueToRebalance(uint256 _minHoldingValueToRebalance) external;\\n\\n    /**\\n     * @dev Retrieves the current suspension mode of the LP.\\n     * @return The current suspension mode.\\n     */\\n    function suspendMode() external view returns (uint8);\\n\\n    /**\\n     * @dev Sets the suspension mode for the LP.\\n     * @param mode The new suspension mode to be set.\\n     */\\n    function setSuspendMode(uint8 mode) external;\\n\\n    /**\\n     * @dev Sets the private mode for the LP.\\n     * @param isPrivate The new private mode status.\\n     */\\n    function setPrivateMode(bool isPrivate) external;\\n\\n    /**\\n     * @dev Retrieves the current private mode status of the LP.\\n     * @return true if private mode is enabled, false otherwise.\\n     */\\n    function privateMode() external view returns (bool);\\n\\n    /**\\n     * @dev Registers a provider as allowed for addLiquidity during private mode.\\n     * @param provider The address of the provider to register.\\n     */\\n    function registerProvider(address provider) external;\\n\\n    /**\\n     * @dev Unregisters a provider as allowed for addLiquidity during private mode.\\n     * @param provider The address of the provider to unregister.\\n     */\\n    function unregisterProvider(address provider) external;\\n\\n    /**\\n     * @dev Retrieves the list of allowed providers for addLiquidity during private mode.\\n     * @return An array containing the addresses of allowed providers.\\n     */\\n    function allowedProviders() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Checks if a provider is allowed for addLiquidity during private mode.\\n     * @param provider The address of the provider to check.\\n     * @return true if the provider is allowed, false otherwise.\\n     */\\n    function isAllowedProvider(address provider) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @dev Retrieves the address of the current owner.\\n     * @return The address of the owner.\\n     */\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd37db358c2b3bbdc1416691c5b34f4c476b729ba2c116165bddcd5dcf73b8edd\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPAutomate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IAutomateLP} from \\\"~/lp/interfaces/IAutomateLP.sol\\\";\\n\\n/**\\n * @title IChromaticLPAutomate\\n * @dev Interface for automating tasks related to Chromatic Liquidity Providers (LPs).\\n */\\ninterface IChromaticLPAutomate {\\n    /**\\n     * @dev Checks whether a rebalance task is needed.\\n     * @return A boolean indicating whether a rebalance task is needed.\\n     */\\n    function checkRebalance() external view returns (bool);\\n\\n    /**\\n     * @dev Initiates a rebalance task, providing fees for the keeper.\\n     * @param feePayee The address to receive the keeper fees.\\n     * @param keeperFee The amount of native tokens to be paid as keeper fees.\\n     */\\n    function rebalance(address feePayee, uint256 keeperFee) external;\\n\\n    /**\\n     * @dev Checks whether a settle task is needed for a specific receipt ID.\\n     * @param receiptId The unique identifier of the receipt associated with the task.\\n     * @return A boolean indicating whether a settle task is needed.\\n     */\\n    function checkSettle(uint256 receiptId) external view returns (bool);\\n\\n    /**\\n     * @dev Initiates a settle task for a specific receipt ID, providing fees for the keeper.\\n     * @param receiptId The unique identifier of the receipt associated with the task.\\n     * @param feePayee The address to receive the keeper fees.\\n     * @param keeperFee The amount of native tokens to be paid as keeper fees.\\n     */\\n    function settleTask(uint256 receiptId, address feePayee, uint256 keeperFee) external;\\n\\n    /**\\n     * @notice Sets the AutomateLP contract address.\\n     * @param automate The address of the AutomateLP contract.\\n     */\\n    function setAutomateLP(IAutomateLP automate) external;\\n\\n    /**\\n     * @notice Gets the current AutomateLP contract address.\\n     * @return The address of the AutomateLP contract.\\n     */\\n    function automateLP() external view returns (IAutomateLP);\\n}\\n\",\"keccak256\":\"0x23849d56ca93edde964c2504b168fa8fbece26c59a9916ebfc413e183ea9e06b\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPConfigLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IChromaticLPConfigLens\\n * @dev Interface for viewing the configuration parameters of a Chromatic Protocol liquidity provider.\\n */\\ninterface IChromaticLPConfigLens {\\n    /**\\n     * @dev Emitted when the automation fee reserved value is updated.\\n     * @param newValue The new value of the automation fee reserved.\\n     */\\n    event SetAutomationFeeReserved(uint256 newValue);\\n\\n    /**\\n     * @dev Emitted when the minimum holding value to trigger rebalance is updated.\\n     * @param newValue The new value of the minimum holding value to rebalance.\\n     */\\n    event SetMinHoldingValueToRebalance(uint256 newValue);\\n\\n    /**\\n     * @dev Retrieves the target utilization rate in basis points (BPS) for the liquidity provider.\\n     * @return The target utilization rate in BPS.\\n     */\\n    function utilizationTargetBPS() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the rebalance basis points (BPS) for the liquidity provider.\\n     * @return The rebalance BPS.\\n     */\\n    function rebalanceBPS() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the time interval in seconds between checks for rebalance conditions.\\n     * @return The rebalance checking interval in seconds.\\n     */\\n    function rebalanceCheckingInterval() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the amount reserved as automation fee for automated operations within the liquidity provider.\\n     * @return The automation fee reserved amount.\\n     */\\n    function automationFeeReserved() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the minimum holding value required to trigger rebalance.\\n     * @return The minimum holding value to rebalance.\\n     */\\n    function minHoldingValueToRebalance() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves an array of distribution rates associated with different fee rates.\\n     * @return An array of distribution rates.\\n     */\\n    function distributionRates() external view returns (uint16[] memory);\\n}\\n\",\"keccak256\":\"0xba90d5dd568a36f426ddb0ff6cbf752624f2ee80532b6b19a5b2acb79a52129f\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title The IChromaticLPErrors interface houses a set of custom errors that developers may encounter when interacting with liquidity providers for the Chromatic Protocol. These errors are designed to provide meaningful feedback about specific issues that may arise during the execution of smart contracts.\\n */\\ninterface IChromaticLPErrors {\\n    /**\\n     * @dev The invalid target basis points.\\n     */\\n    error InvalidUtilizationTarget(uint16 targetBPS);\\n\\n    /**\\n     * @dev Signifies that an invalid rebalance basis points value has been encountered.\\n     */\\n    error InvalidRebalanceBPS();\\n\\n    /**\\n     * @dev Signifies that an invalid minHoldingValueToRebalance value has been encountered.\\n     */\\n    error InvalidMinHoldingValueToRebalance();\\n\\n    /**\\n     * @dev Thrown when the lengths of the fee array and distribution array do not match.\\n     * @param feeLength The length of the fee array.\\n     * @param distributionLength The length of the distribution array.\\n     */\\n    error NotMatchDistributionLength(uint256 feeLength, uint256 distributionLength);\\n\\n    /**\\n     * @dev Indicates that the operation is not applicable to the market.\\n     */\\n    error NotMarket();\\n\\n    /**\\n     * @dev Denotes that the function can only be called within a batch call.\\n     */\\n    error OnlyBatchCall();\\n\\n    /**\\n     * @dev Thrown when an unknown liquidity provider action is encountered\\n     */\\n    error UnknownLPAction();\\n\\n    /**\\n     * @dev Signifies that the caller is not the owner of the contract\\n     */\\n    error NotOwner();\\n\\n    /**\\n     * @dev Thrown when the keeper is not called.\\n     */\\n    error NotKeeperCalled();\\n\\n    /**\\n     * @dev Signifies that the function is only accessible by the owner\\n     */\\n    error OnlyAccessableByOwner();\\n\\n    /**\\n     * @dev Thrown when an automation call is not made\\n     */\\n    error NotAutomationCalled();\\n\\n    /**\\n     * @dev Indicates that the functionality is not implemented in the logic contract.\\n     */\\n    error NotImplementedInLogicContract();\\n\\n    /**\\n     * @dev Throws an error indicating that the amount to add liquidity is too small.\\n     */\\n    error TooSmallAmountToAddLiquidity();\\n\\n    /**\\n     * @dev Error indicating that adding liquidity is suspended.\\n     */\\n    error AddLiquiditySuspended();\\n\\n    /**\\n     * @dev Error indicating that removing liquidity is suspended.\\n     */\\n    error RemoveLiquiditySuspended();\\n\\n    /**\\n     * @dev Error indicating that adding liquidity is not allowed during private mode.\\n     */\\n    error AddLiquidityNotAllowed();\\n\\n    /**\\n     * @dev Error indicating an attempt to use a zero address.\\n     */\\n    error ZeroAddressError();\\n}\\n\",\"keccak256\":\"0xceb8ec241a557135285cfd35921d690fa97c4d6f432d84426ffcf7d5ef9e2fc4\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title The IChromaticLPEvents interface declares events that developers can utilize to track and react to different actions within the Chromatic Protocol. These events offer transparency and can be subscribed to for monitoring the state changes of the liquidity providers.\\n */\\ninterface IChromaticLPEvents {\\n    /**\\n     * @notice Emitted when addLiquidity is performed.\\n     * @param receiptId Unique identifier for the liquidity addition receipt.\\n     * @param provider Address of the liquidity provider.\\n     * @param recipient Address of the recipient.\\n     * @param oracleVersion  Version of the oracle used.\\n     * @param amount Amount of liquidity added in the settlement token.\\n     */\\n    event AddLiquidity(\\n        uint256 indexed receiptId,\\n        address indexed provider,\\n        address indexed recipient,\\n        uint256 oracleVersion,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Emitted when addLiquidity is settled.\\n     * @param receiptId Unique identifier for the liquidity addition receipt.\\n     * @param provider Address of the liquidity provider.\\n     * @param recipient Address of the recipient.\\n     * @param settlementAdded Settlement added to the liquidity\\n     * @param lpTokenAmount Amount of LP tokens issued.\\n     * @param keeperFee Fee paid to the keeper.\\n     */\\n    event AddLiquiditySettled(\\n        uint256 indexed receiptId,\\n        address indexed provider,\\n        address indexed recipient,\\n        uint256 settlementAdded,\\n        uint256 lpTokenAmount,\\n        uint256 keeperFee\\n    );\\n\\n    /**\\n     * @notice Emitted when removeLiquidity is performed.\\n     * @param receiptId Unique identifier for the liquidity removal receipt.\\n     * @param provider Address of the liquidity provider.\\n     * @param recipient Address of the recipient.\\n     * @param oracleVersion Version of the oracle used.\\n     * @param lpTokenAmount Amount of LP tokens to be removed.\\n     */\\n    event RemoveLiquidity(\\n        uint256 indexed receiptId,\\n        address indexed provider,\\n        address indexed recipient,\\n        uint256 oracleVersion,\\n        uint256 lpTokenAmount\\n    );\\n\\n    /**\\n     * @notice Emitted when removeLiquidity is settled.\\n     * @param receiptId Unique identifier for the settled liquidity removal receipt.\\n     * @param provider Address of the liquidity provider.\\n     * @param recipient Address of the recipient.\\n     * @param burningAmount Amount of LP tokens burned.\\n     * @param withdrawnSettlementAmount Withdrawn settlement amount.\\n     * @param refundedAmount Amount refunded to the provider.\\n     * @param keeperFee Fee paid to the keeper.\\n     */\\n    event RemoveLiquiditySettled(\\n        uint256 indexed receiptId,\\n        address indexed provider,\\n        address indexed recipient,\\n        uint256 burningAmount,\\n        uint256 withdrawnSettlementAmount,\\n        uint256 refundedAmount,\\n        uint256 keeperFee\\n    );\\n\\n    /**\\n     * @notice Emitted when rebalance of adding liquidity is performed.\\n     * @param receiptId Unique identifier for the rebalance liquidity addition receipt.\\n     * @param oracleVersion Version of the oracle used.\\n     * @param amount Amount of liquidity added during rebalance.\\n     * @param currentUtility Current utility of the liquidity provider.\\n     */\\n    event RebalanceAddLiquidity(\\n        uint256 indexed receiptId,\\n        uint256 oracleVersion,\\n        uint256 amount,\\n        uint256 currentUtility\\n    );\\n\\n    /**\\n     * @notice Emitted when rebalance of removing liquidity is performed.\\n     * @param receiptId Unique identifier for the rebalance liquidity removal receipt.\\n     * @param oracleVersion Version of the oracle used.\\n     * @param currentUtility Current utility of the liquidity pool.\\n     */\\n    event RebalanceRemoveLiquidity(\\n        uint256 indexed receiptId,\\n        uint256 oracleVersion,\\n        uint256 currentUtility\\n    );\\n\\n    /**\\n     * @notice Emitted when rebalancing is settled.\\n     * @param receiptId Unique identifier for the settled rebalance receipt.\\n     * @param keeperFee Fee paid to the keeper.\\n     */\\n    event RebalanceSettled(uint256 indexed receiptId, uint256 keeperFee);\\n\\n    /**\\n     * @notice Emitted when the AutomateLP address is set.\\n     * @param automate The address of the AutomateLP contract.\\n     */\\n    event SetAutomateLP(address automate);\\n\\n    /**\\n     * @dev Emitted when the suspension mode is set.\\n     * @param mode The new suspension mode.\\n     */\\n    event SetSuspendMode(uint8 mode);\\n\\n    /**\\n     * @dev Emitted when the private/public mode is set.\\n     * @param mode The new private/public mode .\\n     */\\n    event SetPrivateMode(bool mode);\\n\\n    /**\\n     * @dev Emitted when ownership of the LP contract is transferred.\\n     * @param previousOwner The address of the previous owner.\\n     * @param newOwner The address of the new owner.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0x27d1a2e22d2474653504340e9e4f40a0ad98bcfd5c7d4434ac9ee202b866f550\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {IChromaticLPConfigLens} from \\\"./IChromaticLPConfigLens.sol\\\";\\n\\nstruct ValueInfo {\\n    uint256 total;\\n    uint256 holding;\\n    uint256 pending;\\n    uint256 holdingClb;\\n    uint256 pendingClb;\\n}\\n\\n/**\\n * @title The IChromaticLPLens interface is designed to offer a lens into the financial and operational aspects of the Chromatic Protocol. Developers can use the functions defined in this interface to retrieve information such as utilization, total value, value breakdowns, fee rates, and token balances.\\n */\\ninterface IChromaticLPLens is IChromaticLPConfigLens {\\n    /**\\n     * @dev The current utilization of the liquidity provider, represented in basis points (BPS)\\n     */\\n    function utilization() external view returns (uint16);\\n\\n    /**\\n     * @dev The total value of the liquidity provider\\n     */\\n    function totalValue() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the total value of the liquidity provider, including both holding and pending values.\\n     * @return info A ValueInfo struct containing total, holding, pending, holdingClb, and pendingClb values.\\n     */\\n    function valueInfo() external view returns (ValueInfo memory info);\\n\\n    /**\\n     * @dev Retrieves the current holding value of the liquidity pool.\\n     * @return The current holding value in the liquidity provider.\\n     */\\n    function holdingValue() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the pending value of the liquidity provider.\\n     * @return pendingValue The pending value in the liquidity pool.\\n     */\\n    function pendingValue() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the current holding CLB value in the liquidity provider.\\n     * @return The current holding CLB value in the liquidity provider.\\n     */\\n    function holdingClbValue() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the pending CLB value in the liquidity provider.\\n     * @return The pending CLB value in the liquidity provider.\\n     */\\n    function pendingClbValue() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the total CLB value in the liquidity provider, combining holding and pending CLB values.\\n     * @return value The total CLB value in the liquidity provider.\\n     */\\n    function totalClbValue() external view returns (uint256 value);\\n\\n    /**\\n     * @dev Retrieves the fee rates associated with various actions in the liquidity provider.\\n     * @return An array of fee rates for different actions within the liquidity pool.\\n     */\\n    function feeRates() external view returns (int16[] memory);\\n\\n    /**\\n     * @dev Retrieves the token IDs of CLB tokens handled in the liquidity provider\\n     * @return tokenIds An array of CLB token IDs handled in the liquidity provider.\\n     */\\n    function clbTokenIds() external view returns (uint256[] memory tokenIds);\\n\\n    /**\\n     * @dev Retrieves the balances of CLB tokens held in the liquidity provider.\\n     * @return balances An array of CLB token balances held in the liquidity provider.\\n     */\\n    function clbTokenBalances() external view returns (uint256[] memory balances);\\n\\n    /**\\n     * @dev Retrieves the values of CLB tokens held in the liquidity provider.\\n     * @return values An array of CLB token value held in the liquidity provider.\\n     */\\n    function clbTokenValues() external view returns (uint256[] memory values);\\n\\n    /**\\n     * @dev An array of pending CLB token balances for removal.\\n     * Retrieves the pending CLB token balances that are pending removal from the liquidity provider.\\n     */\\n    function pendingRemoveClbBalances() external view returns (uint256[] memory pendingBalances);\\n\\n    /**\\n     * @dev Retrieves information about the target of liquidity.\\n     * @return longShortInfo An integer representing long (1), short (-1), or both side(0).\\n     */\\n    function longShortInfo() external view returns (int8);\\n}\\n\",\"keccak256\":\"0x74784853c64a871a4c5cc19e2ee329ef65a8f0ceaeb2b39565257196dee89e65\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ChromaticLPReceipt} from \\\"~/lp/libraries/ChromaticLPReceipt.sol\\\";\\n\\n/**\\n * @title The IChromaticLPLiquidity interface provides methods for adding and removing liquidity, settling transactions, and retrieving information about liquidity receipts. Developers can interact with this interface to facilitate liquidity operations in Chromatic Protocol.\\n */\\ninterface IChromaticLPLiquidity {\\n    /**\\n     * @dev Adds liquidity to the Chromatic Protocol, minting LP tokens for the specified amount and assigning them to the recipient.\\n     * @param amount The amount of liquidity to add.\\n     * @param recipient The address of the recipient for the LP tokens.\\n     * @return ChromaticLPReceipt A data structure representing the receipt of the liquidity addition.\\n     */\\n    function addLiquidity(\\n        uint256 amount,\\n        address recipient\\n    ) external returns (ChromaticLPReceipt memory);\\n\\n    /**\\n     * @dev Removes liquidity from the Chromatic Protocol, burning the specified amount of LP tokens and transferring the corresponding assets to the recipient.\\n     * @param lpTokenAmount The amount of LP tokens to remove.\\n     * @param recipient The address of the recipient for the withdrawn assets.\\n     */\\n    function removeLiquidity(\\n        uint256 lpTokenAmount,\\n        address recipient\\n    ) external returns (ChromaticLPReceipt memory);\\n\\n    /**\\n     * @dev Initiates the settlement process for a specific liquidity receipt identified by receiptId.\\n     * @param receiptId The unique identifier of the liquidity receipt to settle.\\n     * @return true if the settlement is successful, false otherwise.\\n     */\\n    function settle(uint256 receiptId) external returns (bool);\\n\\n    /**\\n     * @dev Retrieves the unique identifiers of all liquidity receipts owned by a given address.\\n     * @param owner The address of the liquidity provider.\\n     * @return receiptIds An array of unique identifiers for the liquidity receipts owned by the specified address.\\n     */\\n    function getReceiptIdsOf(address owner) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Retrieves detailed information about a specific liquidity receipt identified by id.\\n     * @param id The unique identifier of the liquidity receipt to retrieve.\\n     * @return A data structure representing the liquidity receipt.\\n     */\\n    function getReceipt(uint256 id) external view returns (ChromaticLPReceipt memory);\\n\\n    /**\\n     * @dev Estimates the minimum amount of liquidity that can be added by automation.\\n     * @return The minimum amount of liquidity in the settlement token that can be added.\\n     */\\n    function estimateMinAddLiquidityAmount() external view returns (uint256);\\n\\n    /**\\n     * @dev Estimates the minimum amount of liquidity that can be removed by automation.\\n     * @return The minimum amount of liquidity in the LP token that can be removed.\\n     */\\n    function estimateMinRemoveLiquidityAmount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x094574bb8f2511846e65bedcedb88ee24177b2d30018949ec41a31e846a4d126\",\"license\":\"MIT\"},\"contracts/lp/interfaces/IChromaticLPMeta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title The IChromaticLPMeta interface exposes methods that developers can use to obtain metadata information related to Chromatic Protocol liquidity provider. These functions provide details such as the name and tag associated with a liquidity pool.\\n */\\ninterface IChromaticLPMeta {\\n    /**\\n     * @dev Emitted when the name of the liquidity provider is updated.\\n     * @param name The new name of the liquidity provider.\\n     */\\n    event SetLpName(string name);\\n    /**\\n     * @dev Emitted when the tag of the liquidity provider is updated.\\n     * @param tag The new tag associated with the liquidity provider.\\n     */\\n    event SetLpTag(string tag);\\n\\n    /**\\n     * @dev Retrieves the name of the Chromatic Protocol liquidity provider.\\n     * @return The name of the liquidity provider.\\n     */\\n    function lpName() external view returns (string memory);\\n\\n    /**\\n     * @dev Retrieves the tag associated with the Chromatic Protocol liquidity provider.\\n     * @return The tag associated with the liquidity provider\\n     */\\n    function lpTag() external view returns (string memory);\\n\\n    /**\\n     * @dev Sets the name of the Chromatic Protocol liquidity provider.\\n     * @param newName The new name for the liquidity provider.\\n     */\\n    function setLpName(string memory newName) external;\\n\\n    /**\\n     * @dev Sets the tag associated with the Chromatic Protocol liquidity provider.\\n     * @param newTag The new tag for the liquidity provider.\\n     */\\n    function setLpTag(string memory newTag) external;\\n}\\n\",\"keccak256\":\"0xce4a99cd1c3ce4eb29329377738f575882dcd3930ffe86d4f0ee84bb6f0f45b6\",\"license\":\"MIT\"},\"contracts/lp/libraries/ChromaticLPReceipt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev The ChromaticLPAction enum represents the types of LP actions that can be performed.\\n */\\nenum ChromaticLPAction {\\n    ADD_LIQUIDITY,\\n    REMOVE_LIQUIDITY\\n}\\n\\n/**\\n * @title ChromaticLPReceipt\\n * @dev A struct representing a receipt of a liquidity-related action in the Chromatic Protocol.\\n * @param id Unique identifier of the receipt.\\n * @param provider Address of the liquidity provider initiating the action.\\n * @param recipient Address of the recipient for the liquidity or assets.\\n * @param oracleVersion Version of the oracle used for the action.\\n * @param amount Amount associated with the liquidity action.\\n * @param pendingLiquidity Pending liquidity awaiting settlement.\\n * @param action ChromaticLPAction indicating the type of liquidity-related action.\\n */\\nstruct ChromaticLPReceipt {\\n    uint256 id;\\n    address provider;\\n    address recipient;\\n    uint256 oracleVersion;\\n    uint256 amount;\\n    uint256 pendingLiquidity;\\n    ChromaticLPAction action;\\n}\\n\",\"keccak256\":\"0x9126982b5c6bbe4cd63bbf0af49bdab18936dc03122532e14d4446e4b96ad4c1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161173238038061173283398101604081905261002f916100b3565b600160005561003d33610061565b6001600160a01b03166080526003805463ffffffff19166302faf0801790556100e3565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156100c557600080fd5b81516001600160a01b03811681146100dc57600080fd5b9392505050565b60805161160a610128600039600081816101760152818161090601528181610b6001528181610cbe01528181610de901528181610e790152611087015261160a6000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c8063715018a6116100cd578063a9ea1f8011610081578063c6bd624911610066578063c6bd62491461032a578063c80480221461033d578063f2fde38b1461035057600080fd5b8063a9ea1f8014610307578063b48949b51461031757600080fd5b8063890e2ec9116100b2578063890e2ec9146102ce5780638da5cb5b146102e157806393e15ee9146102ff57600080fd5b8063715018a6146102be578063747cd3d9146102c657600080fd5b80632d0534c7116101245780634585e33b116101095780634585e33b1461028557806365756271146102985780636dbbd373146102ab57600080fd5b80632d0534c71461021e5780633f6f38361461023e57600080fd5b806315afd4091161015557806315afd409146101e357806316d0d82f146101f857806321c281911461020b57600080fd5b8063049aacfe1461017157806304acb2af146101c2575b600080fd5b6101987f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101d56101d03660046111d2565b610363565b6040516101b992919061125a565b6101f66101f136600461127d565b610483565b005b6101f66102063660046112a9565b61052a565b6101f66102193660046111d2565b6105a9565b6102296302faf08081565b60405163ffffffff90911681526020016101b9565b61027761024c3660046111d2565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090206001015490565b6040519081526020016101b9565b6101f6610293366004611311565b61064e565b6101d56102a6366004611353565b6106b6565b6102776102b936600461127d565b61072e565b6101f6610768565b6101f661077c565b6101f66102dc3660046113bf565b61081f565b60015473ffffffffffffffffffffffffffffffffffffffff16610198565b6101f661088c565b6003546102299063ffffffff1681565b6101d561032536600461127d565b610a05565b6101f66103383660046113bf565b610ae9565b6101f661034b3660046113bf565b610c87565b6101f661035e3660046111d2565b610d2b565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812054606090158015906103bf575073ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020544210155b801561043557508273ffffffffffffffffffffffffffffffffffffffff1663a56c077f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610411573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043591906113d8565b1561046b57600160008460006040516020016104539392919061143d565b60405160208183030381529060405291509150915091565b50506040805160208101909152600080825292909150565b60008061048e610de4565b6040517f95fc33c50000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff808316602483015260448201849052929450909250908516906395fc33c590606401600060405180830381600087803b15801561050c57600080fd5b505af1158015610520573d6000803e3d6000fd5b5050505050505050565b610532610e9e565b6003805463ffffffff8381167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000083168117909355604080519190921680825260208201939093527fa3712acf4c1617a1da00c315e0718fcedb43a2940ec2d43d66f3b8121282ffbd91015b60405180910390a15050565b6000806105b4610de4565b915091506105c183610eef565b6040517f3da9b9d000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015260248201849052841690633da9b9d090604401600060405180830381600087803b15801561063157600080fd5b505af1158015610645573d6000803e3d6000fd5b50505050505050565b6000808061065e84860186611478565b919450925090506001836001811115610679576106796113fa565b0361068d576106888282610483565b6106af565b60008360018111156106a1576106a16113fa565b036106af576106af826105a9565b5050505050565b600060608180806106c9888a018a611478565b9194509250905060018360018111156106e4576106e46113fa565b036106ff576106f38282610a05565b94509450505050610725565b6000836001811115610713576107136113fa565b03610721576106f382610363565b5050505b94509492505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020818152604080842085855290920190529020545b92915050565b610770610e9e565b61077a6000610f99565b565b610784611010565b3360008181526002602052604090206001015480156107cf576040517f78bfb91700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107dd600083600080611083565b90506107e882610eef565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260409020600101819055505061077a6001600055565b610827611010565b33610832818361072e565b60000361087e576000610849600183856001611083565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602081815260408084208885529092019052902055505b506108896001600055565b50565b336000818152600260205260409020600101548015610a015773ffffffffffffffffffffffffffffffffffffffff8281166000908152600260205260408082206001810183905582905580517fc80480220000000000000000000000000000000000000000000000000000000081526004810185905290517f00000000000000000000000000000000000000000000000000000000000000009093169263c80480229260248084019391929182900301818387803b15801561094d57600080fd5b505af192505050801561095e575060015b6109b5576040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527fe26790c474f9d81f2f8628d9ec249bfac04dc65a53f6c1cf5be82b1326da5b13910160405180910390a15050565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f58616b9bfa96449b9b198ab056facabb08688ef14ffdf00f08ee901833a91191910161059d565b5050565b6040517f7c48868a0000000000000000000000000000000000000000000000000000000081526004810182905260009060609073ffffffffffffffffffffffffffffffffffffffff851690637c48868a90602401602060405180830381865afa158015610a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9a91906113d8565b15610ace576001808585604051602001610ab6939291906114bd565b60405160208183030381529060405291509150610ae2565b505060408051602081019091526000808252905b9250929050565b336000610af6828461072e565b90508015610c825773ffffffffffffffffffffffffffffffffffffffff8216600090815260026020818152604080842087855290920190528120556040517fc8048022000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063c804802290602401600060405180830381600087803b158015610bb957600080fd5b505af1925050508015610bca575060015b610c2a576040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018590529081018290527f5a1a66422ef5a9d9cdac18d2ee5332263e772a0710c8f476a0eb862fda0517919060600160405180910390a1505050565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018590529081018290527f3d40ef7f31f4f1795fde220cf33a2107c84fe6a7085e3521a2872334d7147cf69060600160405180910390a15b505050565b610c8f610e9e565b6040517fc8048022000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063c804802290602401600060405180830381600087803b158015610d1757600080fd5b505af11580156106af573d6000803e3d6000fd5b610d33610e9e565b73ffffffffffffffffffffffffffffffffffffffff8116610ddb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61088981610f99565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d11d397a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7691906114f2565b927f000000000000000000000000000000000000000000000000000000000000000092509050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461077a576040517f9298645b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff16633efe49656040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6091906114f2565b9050610f6c814261150b565b73ffffffffffffffffffffffffffffffffffffffff90921660009081526002602052604090209190915550565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60026000540361107c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610dd2565b6002600055565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639e571d3830600360009054906101000a900463ffffffff16306000878b8b8b6040516020016110ee939291906114bd565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152602083018252600080845291517fffffffff0000000000000000000000000000000000000000000000000000000060e08b901b16815261116498979695949391929190600401611545565b6020604051808303816000875af1158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a791906114f2565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461088957600080fd5b6000602082840312156111e457600080fd5b81356111ef816111b0565b9392505050565b6000815180845260005b8181101561121c57602081850181015186830182015201611200565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b821515815260406020820152600061127560408301846111f6565b949350505050565b6000806040838503121561129057600080fd5b823561129b816111b0565b946020939093013593505050565b6000602082840312156112bb57600080fd5b813563ffffffff811681146111ef57600080fd5b60008083601f8401126112e157600080fd5b50813567ffffffffffffffff8111156112f957600080fd5b602083019150836020828501011115610ae257600080fd5b6000806020838503121561132457600080fd5b823567ffffffffffffffff81111561133b57600080fd5b611347858286016112cf565b90969095509350505050565b6000806000806040858703121561136957600080fd5b843567ffffffffffffffff8082111561138157600080fd5b61138d888389016112cf565b909650945060208701359150808211156113a657600080fd5b506113b3878288016112cf565b95989497509550505050565b6000602082840312156113d157600080fd5b5035919050565b6000602082840312156113ea57600080fd5b815180151581146111ef57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611439576114396113fa565b9052565b6060810161144b8286611429565b73ffffffffffffffffffffffffffffffffffffffff8416602083015260ff83166040830152949350505050565b60008060006060848603121561148d57600080fd5b83356002811061149c57600080fd5b925060208401356114ac816111b0565b929592945050506040919091013590565b606081016114cb8286611429565b73ffffffffffffffffffffffffffffffffffffffff93909316602082015260400152919050565b60006020828403121561150457600080fd5b5051919050565b80820180821115610762577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061010073ffffffffffffffffffffffffffffffffffffffff808c16845263ffffffff8b166020850152808a16604085015250871515606084015286151560808401528060a084015261159b818401876111f6565b9050600385106115ad576115ad6113fa565b8460c084015282810360e08401526115c581856111f6565b9b9a505050505050505050505056fea2646970667358221220df0188454485bcf9703231bc2f9a20a6ce6a2ec260c2c75a78712a2ecbd0053b64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c8063715018a6116100cd578063a9ea1f8011610081578063c6bd624911610066578063c6bd62491461032a578063c80480221461033d578063f2fde38b1461035057600080fd5b8063a9ea1f8014610307578063b48949b51461031757600080fd5b8063890e2ec9116100b2578063890e2ec9146102ce5780638da5cb5b146102e157806393e15ee9146102ff57600080fd5b8063715018a6146102be578063747cd3d9146102c657600080fd5b80632d0534c7116101245780634585e33b116101095780634585e33b1461028557806365756271146102985780636dbbd373146102ab57600080fd5b80632d0534c71461021e5780633f6f38361461023e57600080fd5b806315afd4091161015557806315afd409146101e357806316d0d82f146101f857806321c281911461020b57600080fd5b8063049aacfe1461017157806304acb2af146101c2575b600080fd5b6101987f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101d56101d03660046111d2565b610363565b6040516101b992919061125a565b6101f66101f136600461127d565b610483565b005b6101f66102063660046112a9565b61052a565b6101f66102193660046111d2565b6105a9565b6102296302faf08081565b60405163ffffffff90911681526020016101b9565b61027761024c3660046111d2565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090206001015490565b6040519081526020016101b9565b6101f6610293366004611311565b61064e565b6101d56102a6366004611353565b6106b6565b6102776102b936600461127d565b61072e565b6101f6610768565b6101f661077c565b6101f66102dc3660046113bf565b61081f565b60015473ffffffffffffffffffffffffffffffffffffffff16610198565b6101f661088c565b6003546102299063ffffffff1681565b6101d561032536600461127d565b610a05565b6101f66103383660046113bf565b610ae9565b6101f661034b3660046113bf565b610c87565b6101f661035e3660046111d2565b610d2b565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812054606090158015906103bf575073ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020544210155b801561043557508273ffffffffffffffffffffffffffffffffffffffff1663a56c077f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610411573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043591906113d8565b1561046b57600160008460006040516020016104539392919061143d565b60405160208183030381529060405291509150915091565b50506040805160208101909152600080825292909150565b60008061048e610de4565b6040517f95fc33c50000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff808316602483015260448201849052929450909250908516906395fc33c590606401600060405180830381600087803b15801561050c57600080fd5b505af1158015610520573d6000803e3d6000fd5b5050505050505050565b610532610e9e565b6003805463ffffffff8381167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000083168117909355604080519190921680825260208201939093527fa3712acf4c1617a1da00c315e0718fcedb43a2940ec2d43d66f3b8121282ffbd91015b60405180910390a15050565b6000806105b4610de4565b915091506105c183610eef565b6040517f3da9b9d000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015260248201849052841690633da9b9d090604401600060405180830381600087803b15801561063157600080fd5b505af1158015610645573d6000803e3d6000fd5b50505050505050565b6000808061065e84860186611478565b919450925090506001836001811115610679576106796113fa565b0361068d576106888282610483565b6106af565b60008360018111156106a1576106a16113fa565b036106af576106af826105a9565b5050505050565b600060608180806106c9888a018a611478565b9194509250905060018360018111156106e4576106e46113fa565b036106ff576106f38282610a05565b94509450505050610725565b6000836001811115610713576107136113fa565b03610721576106f382610363565b5050505b94509492505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020818152604080842085855290920190529020545b92915050565b610770610e9e565b61077a6000610f99565b565b610784611010565b3360008181526002602052604090206001015480156107cf576040517f78bfb91700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107dd600083600080611083565b90506107e882610eef565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260409020600101819055505061077a6001600055565b610827611010565b33610832818361072e565b60000361087e576000610849600183856001611083565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602081815260408084208885529092019052902055505b506108896001600055565b50565b336000818152600260205260409020600101548015610a015773ffffffffffffffffffffffffffffffffffffffff8281166000908152600260205260408082206001810183905582905580517fc80480220000000000000000000000000000000000000000000000000000000081526004810185905290517f00000000000000000000000000000000000000000000000000000000000000009093169263c80480229260248084019391929182900301818387803b15801561094d57600080fd5b505af192505050801561095e575060015b6109b5576040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527fe26790c474f9d81f2f8628d9ec249bfac04dc65a53f6c1cf5be82b1326da5b13910160405180910390a15050565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f58616b9bfa96449b9b198ab056facabb08688ef14ffdf00f08ee901833a91191910161059d565b5050565b6040517f7c48868a0000000000000000000000000000000000000000000000000000000081526004810182905260009060609073ffffffffffffffffffffffffffffffffffffffff851690637c48868a90602401602060405180830381865afa158015610a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9a91906113d8565b15610ace576001808585604051602001610ab6939291906114bd565b60405160208183030381529060405291509150610ae2565b505060408051602081019091526000808252905b9250929050565b336000610af6828461072e565b90508015610c825773ffffffffffffffffffffffffffffffffffffffff8216600090815260026020818152604080842087855290920190528120556040517fc8048022000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063c804802290602401600060405180830381600087803b158015610bb957600080fd5b505af1925050508015610bca575060015b610c2a576040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018590529081018290527f5a1a66422ef5a9d9cdac18d2ee5332263e772a0710c8f476a0eb862fda0517919060600160405180910390a1505050565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018590529081018290527f3d40ef7f31f4f1795fde220cf33a2107c84fe6a7085e3521a2872334d7147cf69060600160405180910390a15b505050565b610c8f610e9e565b6040517fc8048022000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063c804802290602401600060405180830381600087803b158015610d1757600080fd5b505af11580156106af573d6000803e3d6000fd5b610d33610e9e565b73ffffffffffffffffffffffffffffffffffffffff8116610ddb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61088981610f99565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d11d397a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7691906114f2565b927f000000000000000000000000000000000000000000000000000000000000000092509050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461077a576040517f9298645b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff16633efe49656040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6091906114f2565b9050610f6c814261150b565b73ffffffffffffffffffffffffffffffffffffffff90921660009081526002602052604090209190915550565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60026000540361107c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610dd2565b6002600055565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639e571d3830600360009054906101000a900463ffffffff16306000878b8b8b6040516020016110ee939291906114bd565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152602083018252600080845291517fffffffff0000000000000000000000000000000000000000000000000000000060e08b901b16815261116498979695949391929190600401611545565b6020604051808303816000875af1158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a791906114f2565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461088957600080fd5b6000602082840312156111e457600080fd5b81356111ef816111b0565b9392505050565b6000815180845260005b8181101561121c57602081850181015186830182015201611200565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b821515815260406020820152600061127560408301846111f6565b949350505050565b6000806040838503121561129057600080fd5b823561129b816111b0565b946020939093013593505050565b6000602082840312156112bb57600080fd5b813563ffffffff811681146111ef57600080fd5b60008083601f8401126112e157600080fd5b50813567ffffffffffffffff8111156112f957600080fd5b602083019150836020828501011115610ae257600080fd5b6000806020838503121561132457600080fd5b823567ffffffffffffffff81111561133b57600080fd5b611347858286016112cf565b90969095509350505050565b6000806000806040858703121561136957600080fd5b843567ffffffffffffffff8082111561138157600080fd5b61138d888389016112cf565b909650945060208701359150808211156113a657600080fd5b506113b3878288016112cf565b95989497509550505050565b6000602082840312156113d157600080fd5b5035919050565b6000602082840312156113ea57600080fd5b815180151581146111ef57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611439576114396113fa565b9052565b6060810161144b8286611429565b73ffffffffffffffffffffffffffffffffffffffff8416602083015260ff83166040830152949350505050565b60008060006060848603121561148d57600080fd5b83356002811061149c57600080fd5b925060208401356114ac816111b0565b929592945050506040919091013590565b606081016114cb8286611429565b73ffffffffffffffffffffffffffffffffffffffff93909316602082015260400152919050565b60006020828403121561150457600080fd5b5051919050565b80820180821115610762577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061010073ffffffffffffffffffffffffffffffffffffffff808c16845263ffffffff8b166020850152808a16604085015250871515606084015286151560808401528060a084015261159b818401876111f6565b9050600385106115ad576115ad6113fa565b8460c084015282810360e08401526115c581856111f6565b9b9a505050505050505050505056fea2646970667358221220df0188454485bcf9703231bc2f9a20a6ce6a2ec260c2c75a78712a2ecbd0053b64736f6c63430008130033",
  "devdoc": {
    "errors": {
      "AlreadyRebalanceTaskExist()": [
        {
          "details": "Emitted when attempting to create a rebalance task while one already exists."
        }
      ],
      "NotAutomationCalled()": [
        {
          "details": "Emitted when a function is called by an unauthorized address."
        }
      ],
      "OnlyAccessableByOwner()": [
        {
          "details": "Signifies that the function is only accessible by the owner"
        }
      ]
    },
    "events": {
      "CancelRebalanceTaskFailed(address,uint256)": {
        "details": "Emitted when a rebalance task cancellation fails.",
        "params": {
          "lp": "The address of the liquidity provider.",
          "taskId": "The unique identifier of the cancelled rebalance task."
        }
      },
      "CancelRebalanceTaskSucceeded(address,uint256)": {
        "details": "Emitted when a rebalance task cancellation is successful.",
        "params": {
          "lp": "The address of the liquidity provider.",
          "taskId": "The unique identifier of the cancelled rebalance task."
        }
      },
      "CancelSettleTaskFailed(address,uint256,uint256)": {
        "details": "Emitted when a settle task cancellation fails.",
        "params": {
          "lp": "The address of the liquidity provider.",
          "receiptId": "The unique identifier of the cancelled settle task.",
          "taskId": "The unique identifier of the cancelled settle task."
        }
      },
      "CancelSettleTaskSucceeded(address,uint256,uint256)": {
        "details": "Emitted when a settle task cancellation is successful.",
        "params": {
          "lp": "The address of the liquidity provider.",
          "receiptId": "The unique identifier of the cancelled settle task.",
          "taskId": "The unique identifier of the cancelled settle task."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "cancelRebalanceTask()": {
        "details": "Cancels the existing rebalance task for the specified LP (msg.sender)."
      },
      "cancelSettleTask(uint256)": {
        "details": "Cancels the existing settle task for a specific receipt ID.",
        "params": {
          "receiptId": "The unique identifier of the receipt associated with the task."
        }
      },
      "cancelUpkeep(uint256)": {
        "details": "Cancels the existing task for a specific upkeep ID.",
        "params": {
          "upkeepId": "The unique identifier of the task."
        }
      },
      "createRebalanceTask()": {
        "details": "Initiates the creation of a rebalance task for the specified LP (msg.sender)."
      },
      "createSettleTask(uint256)": {
        "details": "Initiates the creation of a settle task for a specific receipt ID.",
        "params": {
          "receiptId": "The unique identifier of the receipt associated with the task."
        }
      },
      "getRebalanceTaskId(address)": {
        "details": "Gets the task ID of the existing rebalance task for the specified LP.",
        "params": {
          "lp": "The address of the liquidity provider."
        },
        "returns": {
          "_0": "The task ID of the rebalance task."
        }
      },
      "getSettleTaskId(address,uint256)": {
        "details": "Gets the task ID of the existing settle task for the specified LP and receipt ID.",
        "params": {
          "lp": "The address of the liquidity provider.",
          "receiptId": "The unique identifier of the receipt associated with the task."
        },
        "returns": {
          "_0": "The task ID of the settle task."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      },
      "rebalance(address)": {
        "details": "Executes the rebalance task for the specified LP.",
        "params": {
          "lp": "The address of the liquidity provider."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "resolveRebalance(address)": {
        "details": "Checks whether a rebalance task is needed for the specified LP.",
        "params": {
          "lp": "The address of the liquidity provider."
        },
        "returns": {
          "performData": "Additional data required for performing the task.",
          "upkeepNeeded": "Indicates whether upkeep is needed."
        }
      },
      "resolveSettle(address,uint256)": {
        "details": "Checks whether a settle task is needed for the specified LP and receipt ID.",
        "params": {
          "lp": "The address of the liquidity provider.",
          "receiptId": "The unique identifier of the receipt associated with the task."
        },
        "returns": {
          "performData": "Additional data required for performing the task.",
          "upkeepNeeded": "Indicates whether upkeep is needed."
        }
      },
      "settle(address,uint256)": {
        "details": "Executes the settle task for the specified LP and receipt ID.",
        "params": {
          "lp": "The address of the liquidity provider.",
          "receiptId": "The unique identifier of the receipt associated with the task."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3573,
        "contract": "contracts/automation/mate2/AutomateLP.sol:AutomateLP",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3445,
        "contract": "contracts/automation/mate2/AutomateLP.sol:AutomateLP",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7655,
        "contract": "contracts/automation/mate2/AutomateLP.sol:AutomateLP",
        "label": "_taskMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IChromaticLP)9781,t_struct(LPTasks)7646_storage)"
      },
      {
        "astId": 7660,
        "contract": "contracts/automation/mate2/AutomateLP.sol:AutomateLP",
        "label": "upkeepGasLimit",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IChromaticLP)9781": {
        "encoding": "inplace",
        "label": "contract IChromaticLP",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IChromaticLP)9781,t_struct(LPTasks)7646_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IChromaticLP)9781",
        "label": "mapping(contract IChromaticLP => struct AutomateLP.LPTasks)",
        "numberOfBytes": "32",
        "value": "t_struct(LPTasks)7646_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LPTasks)7646_storage": {
        "encoding": "inplace",
        "label": "struct AutomateLP.LPTasks",
        "members": [
          {
            "astId": 7639,
            "contract": "contracts/automation/mate2/AutomateLP.sol:AutomateLP",
            "label": "nextRebalanceCheck",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7641,
            "contract": "contracts/automation/mate2/AutomateLP.sol:AutomateLP",
            "label": "rebalanceTaskId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7645,
            "contract": "contracts/automation/mate2/AutomateLP.sol:AutomateLP",
            "label": "settleTasks",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}