// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ChromaticLPRegistered extends ethereum.Event {
  get params(): ChromaticLPRegistered__Params {
    return new ChromaticLPRegistered__Params(this);
  }
}

export class ChromaticLPRegistered__Params {
  _event: ChromaticLPRegistered;

  constructor(event: ChromaticLPRegistered) {
    this._event = event;
  }

  get market(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lp(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ChromaticLPUnregistered extends ethereum.Event {
  get params(): ChromaticLPUnregistered__Params {
    return new ChromaticLPUnregistered__Params(this);
  }
}

export class ChromaticLPUnregistered__Params {
  _event: ChromaticLPUnregistered;

  constructor(event: ChromaticLPUnregistered) {
    this._event = event;
  }

  get market(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lp(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ChromaticLPRegistry extends ethereum.SmartContract {
  static bind(address: Address): ChromaticLPRegistry {
    return new ChromaticLPRegistry("ChromaticLPRegistry", address);
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lpListByMarket(market: Address): Array<Address> {
    let result = super.call(
      "lpListByMarket",
      "lpListByMarket(address):(address[])",
      [ethereum.Value.fromAddress(market)]
    );

    return result[0].toAddressArray();
  }

  try_lpListByMarket(market: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "lpListByMarket",
      "lpListByMarket(address):(address[])",
      [ethereum.Value.fromAddress(market)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  lpListBySettlementToken(token: Address): Array<Address> {
    let result = super.call(
      "lpListBySettlementToken",
      "lpListBySettlementToken(address):(address[])",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toAddressArray();
  }

  try_lpListBySettlementToken(
    token: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "lpListBySettlementToken",
      "lpListBySettlementToken(address):(address[])",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnregisterCall extends ethereum.Call {
  get inputs(): UnregisterCall__Inputs {
    return new UnregisterCall__Inputs(this);
  }

  get outputs(): UnregisterCall__Outputs {
    return new UnregisterCall__Outputs(this);
  }
}

export class UnregisterCall__Inputs {
  _call: UnregisterCall;

  constructor(call: UnregisterCall) {
    this._call = call;
  }

  get lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnregisterCall__Outputs {
  _call: UnregisterCall;

  constructor(call: UnregisterCall) {
    this._call = call;
  }
}
