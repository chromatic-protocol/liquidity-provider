// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddLiquidity extends ethereum.Event {
  get params(): AddLiquidity__Params {
    return new AddLiquidity__Params(this);
  }
}

export class AddLiquidity__Params {
  _event: AddLiquidity;

  constructor(event: AddLiquidity) {
    this._event = event;
  }

  get receiptId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oracleVersion(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class AddLiquiditySettled extends ethereum.Event {
  get params(): AddLiquiditySettled__Params {
    return new AddLiquiditySettled__Params(this);
  }
}

export class AddLiquiditySettled__Params {
  _event: AddLiquiditySettled;

  constructor(event: AddLiquiditySettled) {
    this._event = event;
  }

  get receiptId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get settlementAdded(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lpTokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RebalanceLiquidity extends ethereum.Event {
  get params(): RebalanceLiquidity__Params {
    return new RebalanceLiquidity__Params(this);
  }
}

export class RebalanceLiquidity__Params {
  _event: RebalanceLiquidity;

  constructor(event: RebalanceLiquidity) {
    this._event = event;
  }

  get receiptId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RebalanceSettled extends ethereum.Event {
  get params(): RebalanceSettled__Params {
    return new RebalanceSettled__Params(this);
  }
}

export class RebalanceSettled__Params {
  _event: RebalanceSettled;

  constructor(event: RebalanceSettled) {
    this._event = event;
  }

  get receiptId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RemoveLiquidity extends ethereum.Event {
  get params(): RemoveLiquidity__Params {
    return new RemoveLiquidity__Params(this);
  }
}

export class RemoveLiquidity__Params {
  _event: RemoveLiquidity;

  constructor(event: RemoveLiquidity) {
    this._event = event;
  }

  get receiptId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oracleVersion(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lpTokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RemoveLiquiditySettled extends ethereum.Event {
  get params(): RemoveLiquiditySettled__Params {
    return new RemoveLiquiditySettled__Params(this);
  }
}

export class RemoveLiquiditySettled__Params {
  _event: RemoveLiquiditySettled;

  constructor(event: RemoveLiquiditySettled) {
    this._event = event;
  }

  get receiptId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get burningAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get witdrawnSettlementAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get refundedAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class IChromaticLP__addLiquidityResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get oracleVersion(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get pendingLiquidity(): BigInt {
    return this[3].toBigInt();
  }

  get recipient(): Address {
    return this[4].toAddress();
  }

  get action(): i32 {
    return this[5].toI32();
  }
}

export class IChromaticLP__getReceiptResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get oracleVersion(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get pendingLiquidity(): BigInt {
    return this[3].toBigInt();
  }

  get recipient(): Address {
    return this[4].toAddress();
  }

  get action(): i32 {
    return this[5].toI32();
  }
}

export class IChromaticLP__removeLiquidityResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get oracleVersion(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get pendingLiquidity(): BigInt {
    return this[3].toBigInt();
  }

  get recipient(): Address {
    return this[4].toAddress();
  }

  get action(): i32 {
    return this[5].toI32();
  }
}

export class IChromaticLP__valueInfoResultInfoStruct extends ethereum.Tuple {
  get total(): BigInt {
    return this[0].toBigInt();
  }

  get holding(): BigInt {
    return this[1].toBigInt();
  }

  get pending(): BigInt {
    return this[2].toBigInt();
  }

  get holdingClb(): BigInt {
    return this[3].toBigInt();
  }

  get pendingClb(): BigInt {
    return this[4].toBigInt();
  }
}

export class IChromaticLP extends ethereum.SmartContract {
  static bind(address: Address): IChromaticLP {
    return new IChromaticLP("IChromaticLP", address);
  }

  addLiquidity(
    amount: BigInt,
    recipient: Address
  ): IChromaticLP__addLiquidityResultValue0Struct {
    let result = super.call(
      "addLiquidity",
      "addLiquidity(uint256,address):((uint256,uint256,uint256,uint256,address,uint8))",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(recipient)
      ]
    );

    return changetype<IChromaticLP__addLiquidityResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_addLiquidity(
    amount: BigInt,
    recipient: Address
  ): ethereum.CallResult<IChromaticLP__addLiquidityResultValue0Struct> {
    let result = super.tryCall(
      "addLiquidity",
      "addLiquidity(uint256,address):((uint256,uint256,uint256,uint256,address,uint8))",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(recipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<IChromaticLP__addLiquidityResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  clbTokenBalances(): Array<BigInt> {
    let result = super.call(
      "clbTokenBalances",
      "clbTokenBalances():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_clbTokenBalances(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "clbTokenBalances",
      "clbTokenBalances():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  clbTokenIds(): Array<BigInt> {
    let result = super.call("clbTokenIds", "clbTokenIds():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_clbTokenIds(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("clbTokenIds", "clbTokenIds():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  feeRates(): Array<i32> {
    let result = super.call("feeRates", "feeRates():(int16[])", []);

    return result[0].toI32Array();
  }

  try_feeRates(): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall("feeRates", "feeRates():(int16[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  getReceipt(id: BigInt): IChromaticLP__getReceiptResultValue0Struct {
    let result = super.call(
      "getReceipt",
      "getReceipt(uint256):((uint256,uint256,uint256,uint256,address,uint8))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return changetype<IChromaticLP__getReceiptResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getReceipt(
    id: BigInt
  ): ethereum.CallResult<IChromaticLP__getReceiptResultValue0Struct> {
    let result = super.tryCall(
      "getReceipt",
      "getReceipt(uint256):((uint256,uint256,uint256,uint256,address,uint8))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<IChromaticLP__getReceiptResultValue0Struct>(value[0].toTuple())
    );
  }

  getReceiptIdsOf(owner: Address): Array<BigInt> {
    let result = super.call(
      "getReceiptIdsOf",
      "getReceiptIdsOf(address):(uint256[])",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigIntArray();
  }

  try_getReceiptIdsOf(owner: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getReceiptIdsOf",
      "getReceiptIdsOf(address):(uint256[])",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  holdingClbValue(): BigInt {
    let result = super.call(
      "holdingClbValue",
      "holdingClbValue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_holdingClbValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "holdingClbValue",
      "holdingClbValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  holdingValue(): BigInt {
    let result = super.call("holdingValue", "holdingValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_holdingValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("holdingValue", "holdingValue():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpName(): string {
    let result = super.call("lpName", "lpName():(string)", []);

    return result[0].toString();
  }

  try_lpName(): ethereum.CallResult<string> {
    let result = super.tryCall("lpName", "lpName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  lpToken(): Address {
    let result = super.call("lpToken", "lpToken():(address)", []);

    return result[0].toAddress();
  }

  try_lpToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("lpToken", "lpToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  market(): Address {
    let result = super.call("market", "market():(address)", []);

    return result[0].toAddress();
  }

  try_market(): ethereum.CallResult<Address> {
    let result = super.tryCall("market", "market():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingClbValue(): BigInt {
    let result = super.call(
      "pendingClbValue",
      "pendingClbValue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_pendingClbValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingClbValue",
      "pendingClbValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingValue(): BigInt {
    let result = super.call("pendingValue", "pendingValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pendingValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("pendingValue", "pendingValue():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  removeLiquidity(
    lpTokenAmount: BigInt,
    recipient: Address
  ): IChromaticLP__removeLiquidityResultValue0Struct {
    let result = super.call(
      "removeLiquidity",
      "removeLiquidity(uint256,address):((uint256,uint256,uint256,uint256,address,uint8))",
      [
        ethereum.Value.fromUnsignedBigInt(lpTokenAmount),
        ethereum.Value.fromAddress(recipient)
      ]
    );

    return changetype<IChromaticLP__removeLiquidityResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_removeLiquidity(
    lpTokenAmount: BigInt,
    recipient: Address
  ): ethereum.CallResult<IChromaticLP__removeLiquidityResultValue0Struct> {
    let result = super.tryCall(
      "removeLiquidity",
      "removeLiquidity(uint256,address):((uint256,uint256,uint256,uint256,address,uint8))",
      [
        ethereum.Value.fromUnsignedBigInt(lpTokenAmount),
        ethereum.Value.fromAddress(recipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<IChromaticLP__removeLiquidityResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  settle(receiptId: BigInt): boolean {
    let result = super.call("settle", "settle(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(receiptId)
    ]);

    return result[0].toBoolean();
  }

  try_settle(receiptId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("settle", "settle(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(receiptId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  settlementToken(): Address {
    let result = super.call(
      "settlementToken",
      "settlementToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_settlementToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "settlementToken",
      "settlementToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalClbValue(): BigInt {
    let result = super.call("totalClbValue", "totalClbValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalClbValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalClbValue",
      "totalClbValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalValue(): BigInt {
    let result = super.call("totalValue", "totalValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalValue", "totalValue():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  utilization(): i32 {
    let result = super.call("utilization", "utilization():(uint16)", []);

    return result[0].toI32();
  }

  try_utilization(): ethereum.CallResult<i32> {
    let result = super.tryCall("utilization", "utilization():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  valueInfo(): IChromaticLP__valueInfoResultInfoStruct {
    let result = super.call(
      "valueInfo",
      "valueInfo():((uint256,uint256,uint256,uint256,uint256))",
      []
    );

    return changetype<IChromaticLP__valueInfoResultInfoStruct>(
      result[0].toTuple()
    );
  }

  try_valueInfo(): ethereum.CallResult<
    IChromaticLP__valueInfoResultInfoStruct
  > {
    let result = super.tryCall(
      "valueInfo",
      "valueInfo():((uint256,uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<IChromaticLP__valueInfoResultInfoStruct>(value[0].toTuple())
    );
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get value0(): AddLiquidityCallValue0Struct {
    return changetype<AddLiquidityCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class AddLiquidityCallValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get oracleVersion(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get pendingLiquidity(): BigInt {
    return this[3].toBigInt();
  }

  get recipient(): Address {
    return this[4].toAddress();
  }

  get action(): i32 {
    return this[5].toI32();
  }
}

export class CancelRebalanceTaskCall extends ethereum.Call {
  get inputs(): CancelRebalanceTaskCall__Inputs {
    return new CancelRebalanceTaskCall__Inputs(this);
  }

  get outputs(): CancelRebalanceTaskCall__Outputs {
    return new CancelRebalanceTaskCall__Outputs(this);
  }
}

export class CancelRebalanceTaskCall__Inputs {
  _call: CancelRebalanceTaskCall;

  constructor(call: CancelRebalanceTaskCall) {
    this._call = call;
  }
}

export class CancelRebalanceTaskCall__Outputs {
  _call: CancelRebalanceTaskCall;

  constructor(call: CancelRebalanceTaskCall) {
    this._call = call;
  }
}

export class CreateRebalanceTaskCall extends ethereum.Call {
  get inputs(): CreateRebalanceTaskCall__Inputs {
    return new CreateRebalanceTaskCall__Inputs(this);
  }

  get outputs(): CreateRebalanceTaskCall__Outputs {
    return new CreateRebalanceTaskCall__Outputs(this);
  }
}

export class CreateRebalanceTaskCall__Inputs {
  _call: CreateRebalanceTaskCall;

  constructor(call: CreateRebalanceTaskCall) {
    this._call = call;
  }
}

export class CreateRebalanceTaskCall__Outputs {
  _call: CreateRebalanceTaskCall;

  constructor(call: CreateRebalanceTaskCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get lpTokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get value0(): RemoveLiquidityCallValue0Struct {
    return changetype<RemoveLiquidityCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class RemoveLiquidityCallValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get oracleVersion(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get pendingLiquidity(): BigInt {
    return this[3].toBigInt();
  }

  get recipient(): Address {
    return this[4].toAddress();
  }

  get action(): i32 {
    return this[5].toI32();
  }
}

export class SettleCall extends ethereum.Call {
  get inputs(): SettleCall__Inputs {
    return new SettleCall__Inputs(this);
  }

  get outputs(): SettleCall__Outputs {
    return new SettleCall__Outputs(this);
  }
}

export class SettleCall__Inputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get receiptId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SettleCall__Outputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
