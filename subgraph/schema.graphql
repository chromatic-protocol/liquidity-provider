type ChromaticLPRegistered @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  lp: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromaticLP @entity(immutable: true) {
  id: Bytes! # lp address
  longShortInfo: Int!
  market: Bytes! # address
  settlementToken: Bytes! #address
  settlementTokenSymbol: String!
  settlementTokenDecimals: Int!
  oracleProvider: Bytes! # address
  oracleDescription: String!
  feeRates: [Int!]!
  clbTokenIds: [BigInt!]!
  lpTokenName: String!
  lpTokenSymbol: String!
  lpTokenDecimals: Int!
  distributionRates: [Int!]!
  rebalanceBPS: BigInt!
  rebalanceCheckingInterval: BigInt!
  utilizationTargetBPS: BigInt!
  metas: [ChromaticLPMeta!]! @derivedFrom(field: "lp")
  configs: [ChromaticLPConfig!]! @derivedFrom(field: "lp")
}

type ChromaticLPMeta @entity(immutable: true) {
  id: ID!
  lp: ChromaticLP!
  lpName: String!
  lpTag: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type ChromaticLPConfig @entity(immutable: true) {
  id: ID!
  lp: ChromaticLP!
  automationFeeReserved: BigInt!
  minHoldingValueToRebalance: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type ChromaticLPStat @entity(immutable: true) {
  id: ID!
  lp: Bytes! # lp address
  totalValue: BigInt!
  holdingValue: BigInt!
  pendingValue: BigInt!
  holdingClbValue: BigInt!
  pendingClbValue: BigInt!
  valueOfSupply: BigInt
  utilization: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type LPTokenTotalSupply @entity(immutable: true) {
  id: ID!
  token: Bytes! # address
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type AddLiquidity @entity(immutable: true) {
  id: Bytes!
  lp: Bytes! # address
  receiptId: BigInt!
  provider: Bytes! # address
  recipient: Bytes! # address
  oracleVersion: BigInt!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AddLiquiditySettled @entity(immutable: true) {
  id: Bytes!
  lp: Bytes! # address
  receiptId: BigInt!
  provider: Bytes! # address
  recipient: Bytes! # address
  settlementAdded: BigInt!
  lpTokenAmount: BigInt!
  keeperFee: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveLiquidity @entity(immutable: true) {
  id: Bytes!
  lp: Bytes! # address
  receiptId: BigInt!
  provider: Bytes! # address
  recipient: Bytes! # address
  oracleVersion: BigInt!
  lpTokenAmount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveLiquiditySettled @entity(immutable: true) {
  id: Bytes!
  lp: Bytes! # address
  receiptId: BigInt!
  provider: Bytes! # address
  recipient: Bytes! # address
  burningAmount: BigInt!
  withdrawnSettlementAmount: BigInt!
  refundedAmount: BigInt!
  keeperFee: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RebalanceAddLiquidity @entity(immutable: true) {
  id: Bytes!
  lp: Bytes! # address
  receiptId: BigInt!
  oracleVersion: BigInt!
  amount: BigInt!
  currentUtility: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RebalanceRemoveLiquidity @entity(immutable: true) {
  id: Bytes!
  lp: Bytes! # address
  receiptId: BigInt!
  oracleVersion: BigInt!
  currentUtility: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RebalanceSettled @entity(immutable: true) {
  id: Bytes!
  lp: Bytes! # address
  receiptId: BigInt!
  keeperFee: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromaticBPCreated @entity(immutable: true) {
  id: Bytes!
  lp: Bytes! # address
  bp: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromaticBP @entity(immutable: true) {
  id: Bytes! # bp address
  lp: ChromaticLP!
  totalReward: BigInt!
  minRaisingTarget: BigInt!
  initialEndTimeOfWarmup: BigInt!
  maxRaisingTarget: BigInt!
  startTimeOfWarmup: BigInt!
  minDeposit: BigInt!
  statuses: [ChromaticBPStatus!]! @derivedFrom(field: "bp")
  totalRaised: [ChromaticBPTotalRaised!]! @derivedFrom(field: "bp")
  deposits: [ChromaticBPDeposit!]! @derivedFrom(field: "bp")
  refunds: [ChromaticBPRefund!]! @derivedFrom(field: "bp")
  claims: [ChromaticBPClaim!]! @derivedFrom(field: "bp")
}

type ChromaticBPStatus @entity(immutable: true) {
  id: ID!
  bp: ChromaticBP!
  endTimeOfWarmup: BigInt!
  endTimeOfLockup: BigInt!
  currentPeriod: Int!
  status: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type ChromaticBPTotalRaised @entity(immutable: true) {
  id: ID!
  bp: ChromaticBP!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type ChromaticBPDeposit @entity(immutable: true) {
  id: ID!
  bp: ChromaticBP!
  provider: Bytes! # address
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type ChromaticBPRefund @entity(immutable: true) {
  id: ID!
  bp: ChromaticBP!
  provider: Bytes! # address
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type ChromaticBPClaim @entity(immutable: true) {
  id: ID!
  bp: ChromaticBP!
  provider: Bytes! # address
  bpTokenAmount: BigInt!
  lpTokenAmount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type BPDeposited @entity(immutable: true) {
  id: Bytes!
  bp: Bytes! # address
  provider: Bytes! # address
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BPBoostTaskExecuted @entity(immutable: true) {
  id: Bytes!
  bp: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BPSettleUpdated @entity(immutable: true) {
  id: Bytes!
  bp: Bytes! # address
  totalLPToken: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BPCanceled @entity(immutable: true) {
  id: Bytes!
  bp: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

